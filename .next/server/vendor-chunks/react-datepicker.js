"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-datepicker";
exports.ids = ["vendor-chunks/react-datepicker"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-datepicker/dist/index.es.js":
/*!********************************************************!*\
  !*** ./node_modules/react-datepicker/dist/index.es.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CalendarContainer: () => (/* binding */ CalendarContainer),\n/* harmony export */   \"default\": () => (/* binding */ DatePicker),\n/* harmony export */   getDefaultLocale: () => (/* binding */ getDefaultLocale),\n/* harmony export */   registerLocale: () => (/* binding */ registerLocale),\n/* harmony export */   setDefaultLocale: () => (/* binding */ setDefaultLocale)\n/* harmony export */ });\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/parseISO.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/toDate.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/parse.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/isValid.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/isBefore.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/format.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/setHours.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/setMinutes.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/setSeconds.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/getISOWeek.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/startOfDay.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/startOfWeek.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/startOfMonth.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/startOfYear.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/startOfQuarter.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/endOfDay.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/endOfWeek.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/endOfMonth.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/isSameYear.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/isSameMonth.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/isSameQuarter.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/isSameDay.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/isEqual.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/isWithinInterval.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/setMonth.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/setQuarter.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/getYear.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/getMonth.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/endOfYear.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/getQuarter.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/differenceInCalendarDays.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/getHours.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/getMinutes.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/getSeconds.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/subMonths.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/differenceInCalendarMonths.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/addMonths.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/subQuarters.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/differenceInCalendarQuarters.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/addQuarters.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/subYears.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/differenceInCalendarYears.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/addYears.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/min.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/max.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/isDate.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/addHours.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/addMinutes.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/addSeconds.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/isAfter.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/getDay.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/getDate.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/addDays.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/addWeeks.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/getTime.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/setYear.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/differenceInDays.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/subWeeks.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addHours,addMinutes,addMonths,addQuarters,addSeconds,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarQuarters,differenceInCalendarYears,differenceInDays,endOfDay,endOfMonth,endOfWeek,endOfYear,format,getDate,getDay,getHours,getISOWeek,getMinutes,getMonth,getQuarter,getSeconds,getTime,getYear,isAfter,isBefore,isDate,isEqual,isSameDay,isSameMonth,isSameQuarter,isSameYear,isValid,isWithinInterval,max,min,parse,parseISO,setHours,setMinutes,setMonth,setQuarter,setSeconds,setYear,startOfDay,startOfMonth,startOfQuarter,startOfWeek,startOfYear,subDays,subMonths,subQuarters,subWeeks,subYears,toDate!=!date-fns */ \"(ssr)/./node_modules/date-fns/subDays.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/react-datepicker/node_modules/@floating-ui/react/dist/floating-ui.react.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_2__);\n/*!\n  react-datepicker v8.4.0\n  https://github.com/Hacker0x01/react-datepicker\n  Released under the MIT License.\n*/ \n\n\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol, Iterator */ var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return _assign.apply(this, arguments);\n};\nfunction __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nvar CalendarContainer = function(_a) {\n    var _b = _a.showTimeSelectOnly, showTimeSelectOnly = _b === void 0 ? false : _b, _c = _a.showTime, showTime = _c === void 0 ? false : _c, className = _a.className, children = _a.children;\n    var ariaLabel = showTimeSelectOnly ? \"Choose Time\" : \"Choose Date\".concat(showTime ? \" and Time\" : \"\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: className,\n        role: \"dialog\",\n        \"aria-label\": ariaLabel,\n        \"aria-modal\": \"true\"\n    }, children);\n};\nvar useDetectClickOutside = function(onClickOutside, ignoreClass) {\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var onClickOutsideRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(onClickOutside);\n    onClickOutsideRef.current = onClickOutside;\n    var handleClickOutside = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function(event) {\n        var _a;\n        var target = event.composed && event.composedPath && event.composedPath().find(function(eventTarget) {\n            return eventTarget instanceof Node;\n        }) || event.target;\n        if (ref.current && !ref.current.contains(target)) {\n            if (!(ignoreClass && target instanceof HTMLElement && target.classList.contains(ignoreClass))) {\n                (_a = onClickOutsideRef.current) === null || _a === void 0 ? void 0 : _a.call(onClickOutsideRef, event);\n            }\n        }\n    }, [\n        ignoreClass\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return function() {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [\n        handleClickOutside\n    ]);\n    return ref;\n};\nvar ClickOutsideWrapper = function(_a) {\n    var children = _a.children, onClickOutside = _a.onClickOutside, className = _a.className, containerRef = _a.containerRef, style = _a.style, ignoreClass = _a.ignoreClass;\n    var detectRef = useDetectClickOutside(onClickOutside, ignoreClass);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: className,\n        style: style,\n        ref: function(node) {\n            detectRef.current = node;\n            if (containerRef) {\n                containerRef.current = node;\n            }\n        }\n    }, children);\n};\nvar KeyType;\n(function(KeyType) {\n    KeyType[\"ArrowUp\"] = \"ArrowUp\";\n    KeyType[\"ArrowDown\"] = \"ArrowDown\";\n    KeyType[\"ArrowLeft\"] = \"ArrowLeft\";\n    KeyType[\"ArrowRight\"] = \"ArrowRight\";\n    KeyType[\"PageUp\"] = \"PageUp\";\n    KeyType[\"PageDown\"] = \"PageDown\";\n    KeyType[\"Home\"] = \"Home\";\n    KeyType[\"End\"] = \"End\";\n    KeyType[\"Enter\"] = \"Enter\";\n    KeyType[\"Space\"] = \" \";\n    KeyType[\"Tab\"] = \"Tab\";\n    KeyType[\"Escape\"] = \"Escape\";\n    KeyType[\"Backspace\"] = \"Backspace\";\n    KeyType[\"X\"] = \"x\";\n})(KeyType || (KeyType = {}));\nfunction getLocaleScope() {\n    // Use this cast to avoid messing with users globalThis (like window) and the rest of keys in the globalThis object we don't care about\n    var scope =  false ? 0 : globalThis;\n    return scope;\n}\nvar DEFAULT_YEAR_ITEM_NUMBER = 12;\n// ** Date Constructors **\nfunction newDate(value) {\n    if (value == null) {\n        return new Date();\n    }\n    var d = typeof value === \"string\" ? (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_3__.parseISO)(value) : (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_4__.toDate)(value);\n    return isValid(d) ? d : new Date();\n}\n/**\n * Parses a date.\n *\n * @param value - The string representing the Date in a parsable form, e.g., ISO 1861\n * @param dateFormat - The date format.\n * @param locale - The locale.\n * @param strictParsing - The strict parsing flag.\n * @param refDate - The base date to be passed to date-fns parse() function.\n * @returns - The parsed date or null.\n */ function parseDate(value, dateFormat, locale, strictParsing, refDate) {\n    if (refDate === void 0) {\n        refDate = newDate();\n    }\n    var localeObject = getLocaleObject(locale) || getLocaleObject(getDefaultLocale());\n    var formats = Array.isArray(dateFormat) ? dateFormat : [\n        dateFormat\n    ];\n    for(var _i = 0, formats_1 = formats; _i < formats_1.length; _i++){\n        var format_1 = formats_1[_i];\n        var parsedDate = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_5__.parse)(value, format_1, refDate, {\n            locale: localeObject,\n            useAdditionalWeekYearTokens: true,\n            useAdditionalDayOfYearTokens: true\n        });\n        if (isValid(parsedDate) && (!strictParsing || value === formatDate(parsedDate, format_1, locale))) {\n            return parsedDate;\n        }\n    }\n    return null;\n}\n/**\n * Checks if a given date is valid and not before the minimum date.\n * @param date - The date to be checked.\n * @param minDate - The minimum date allowed. If not provided, defaults to \"1/1/1800\".\n * @returns A boolean value indicating whether the date is valid and not before the minimum date.\n */ function isValid(date, minDate) {\n    /* the fallback date is essential to not break test case\n     * `should auto update calendar when the updated date text is after props.minDate`\n     * and backward compatibility respectfully\n     */ return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_6__.isValid)(date) && !(0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_7__.isBefore)(date, new Date(\"1/1/1800\"));\n}\n// ** Date Formatting **\n/**\n * Formats a date.\n *\n * @param date - The date.\n * @param formatStr - The format string.\n * @param locale - The locale.\n * @returns - The formatted date.\n */ function formatDate(date, formatStr, locale) {\n    if (locale === \"en\") {\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_8__.format)(date, formatStr, {\n            useAdditionalWeekYearTokens: true,\n            useAdditionalDayOfYearTokens: true\n        });\n    }\n    var localeObj = locale ? getLocaleObject(locale) : undefined;\n    if (locale && !localeObj) {\n        console.warn('A locale object was not found for the provided string [\"'.concat(locale, '\"].'));\n    }\n    localeObj = localeObj || getLocaleObject(getDefaultLocale());\n    return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_8__.format)(date, formatStr, {\n        locale: localeObj,\n        useAdditionalWeekYearTokens: true,\n        useAdditionalDayOfYearTokens: true\n    });\n}\n/**\n * Safely formats a date.\n *\n * @param date - The date.\n * @param options - An object containing the dateFormat and locale.\n * @returns - The formatted date or an empty string.\n */ function safeDateFormat(date, _a) {\n    var dateFormat = _a.dateFormat, locale = _a.locale;\n    var formatStr = Array.isArray(dateFormat) && dateFormat.length > 0 ? dateFormat[0] : dateFormat; // Cast to string because it's impossible to get `string | string[] | undefined` here and typescript doesn't know that\n    return date && formatDate(date, formatStr, locale) || \"\";\n}\n/**\n * Used as a delimiter to separate two dates when formatting a date range\n */ var DATE_RANGE_SEPARATOR = \" - \";\n/**\n * Safely formats a date range.\n *\n * @param startDate - The start date.\n * @param endDate - The end date.\n * @param props - The props.\n * @returns - The formatted date range or an empty string.\n */ function safeDateRangeFormat(startDate, endDate, props) {\n    if (!startDate) {\n        return \"\";\n    }\n    var formattedStartDate = safeDateFormat(startDate, props);\n    var formattedEndDate = endDate ? safeDateFormat(endDate, props) : \"\";\n    return \"\".concat(formattedStartDate).concat(DATE_RANGE_SEPARATOR).concat(formattedEndDate);\n}\n/**\n * Safely formats multiple dates.\n *\n * @param dates - The dates.\n * @param props - The props.\n * @returns - The formatted dates or an empty string.\n */ function safeMultipleDatesFormat(dates, props) {\n    if (!(dates === null || dates === void 0 ? void 0 : dates.length)) {\n        return \"\";\n    }\n    var formattedFirstDate = dates[0] ? safeDateFormat(dates[0], props) : \"\";\n    if (dates.length === 1) {\n        return formattedFirstDate;\n    }\n    if (dates.length === 2 && dates[1]) {\n        var formattedSecondDate = safeDateFormat(dates[1], props);\n        return \"\".concat(formattedFirstDate, \", \").concat(formattedSecondDate);\n    }\n    var extraDatesCount = dates.length - 1;\n    return \"\".concat(formattedFirstDate, \" (+\").concat(extraDatesCount, \")\");\n}\n// ** Date Setters **\n/**\n * Sets the time for a given date.\n *\n * @param date - The date.\n * @param time - An object containing the hour, minute, and second.\n * @returns - The date with the time set.\n */ function setTime(date, _a) {\n    var _b = _a.hour, hour = _b === void 0 ? 0 : _b, _c = _a.minute, minute = _c === void 0 ? 0 : _c, _d = _a.second, second = _d === void 0 ? 0 : _d;\n    return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_9__.setHours)((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_10__.setMinutes)((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_11__.setSeconds)(date, second), minute), hour);\n}\n/**\n * Gets the week of the year for a given date.\n *\n * @param date - The date.\n * @returns - The week of the year.\n */ function getWeek(date) {\n    return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_12__.getISOWeek)(date);\n}\n/**\n * Gets the day of the week code for a given day.\n *\n * @param day - The day.\n * @param locale - The locale.\n * @returns - The day of the week code.\n */ function getDayOfWeekCode(day, locale) {\n    return formatDate(day, \"ddd\", locale);\n}\n// *** Start of ***\n/**\n * Gets the start of the day for a given date.\n *\n * @param date - The date.\n * @returns - The start of the day.\n */ function getStartOfDay(date) {\n    return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_13__.startOfDay)(date);\n}\n/**\n * Gets the start of the week for a given date.\n *\n * @param date - The date.\n * @param locale - The locale.\n * @param calendarStartDay - The day the calendar starts on.\n * @returns - The start of the week.\n */ function getStartOfWeek(date, locale, calendarStartDay) {\n    var localeObj = locale ? getLocaleObject(locale) : getLocaleObject(getDefaultLocale());\n    return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_14__.startOfWeek)(date, {\n        locale: localeObj,\n        weekStartsOn: calendarStartDay\n    });\n}\n/**\n * Gets the start of the month for a given date.\n *\n * @param date - The date.\n * @returns - The start of the month.\n */ function getStartOfMonth(date) {\n    return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_15__.startOfMonth)(date);\n}\n/**\n * Gets the start of the year for a given date.\n *\n * @param date - The date.\n * @returns - The start of the year.\n */ function getStartOfYear(date) {\n    return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_16__.startOfYear)(date);\n}\n/**\n * Gets the start of the quarter for a given date.\n *\n * @param date - The date.\n * @returns - The start of the quarter.\n */ function getStartOfQuarter(date) {\n    return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_17__.startOfQuarter)(date);\n}\n/**\n * Gets the start of today.\n *\n * @returns - The start of today.\n */ function getStartOfToday() {\n    return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_13__.startOfDay)(newDate());\n}\n// *** End of ***\n/**\n * Gets the end of the day for a given date.\n *\n * @param date - The date.\n * @returns - The end of the day.\n */ function getEndOfDay(date) {\n    return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_18__.endOfDay)(date);\n}\n/**\n * Gets the end of the week for a given date.\n *\n * @param date - The date.\n * @returns - The end of the week.\n */ function getEndOfWeek(date) {\n    return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_19__.endOfWeek)(date);\n}\n/**\n * Gets the end of the month for a given date.\n *\n * @param date - The date.\n * @returns - The end of the month.\n */ function getEndOfMonth(date) {\n    return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_20__.endOfMonth)(date);\n}\n/**\n * Checks if two dates are in the same year.\n *\n * @param date1 - The first date.\n * @param date2 - The second date.\n * @returns - True if the dates are in the same year, false otherwise.\n */ function isSameYear(date1, date2) {\n    if (date1 && date2) {\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_21__.isSameYear)(date1, date2);\n    } else {\n        return !date1 && !date2;\n    }\n}\n/**\n * Checks if two dates are in the same month.\n *\n * @param date1 - The first date.\n * @param date2 - The second date.\n * @returns - True if the dates are in the same month, false otherwise.\n */ function isSameMonth(date1, date2) {\n    if (date1 && date2) {\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_22__.isSameMonth)(date1, date2);\n    } else {\n        return !date1 && !date2;\n    }\n}\n/**\n * Checks if two dates are in the same quarter.\n *\n * @param date1 - The first date.\n * @param date2 - The second date.\n * @returns - True if the dates are in the same quarter, false otherwise.\n */ function isSameQuarter(date1, date2) {\n    if (date1 && date2) {\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_23__.isSameQuarter)(date1, date2);\n    } else {\n        return !date1 && !date2;\n    }\n}\n/**\n * Checks if two dates are on the same day.\n *\n * @param date1 - The first date.\n * @param date2 - The second date.\n * @returns - True if the dates are on the same day, false otherwise.\n */ function isSameDay(date1, date2) {\n    if (date1 && date2) {\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_24__.isSameDay)(date1, date2);\n    } else {\n        return !date1 && !date2;\n    }\n}\n/**\n * Checks if two dates are equal.\n *\n * @param date1 - The first date.\n * @param date2 - The second date.\n * @returns - True if the dates are equal, false otherwise.\n */ function isEqual(date1, date2) {\n    if (date1 && date2) {\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_25__.isEqual)(date1, date2);\n    } else {\n        return !date1 && !date2;\n    }\n}\n/**\n * Checks if a day is within a date range.\n *\n * @param day - The day to check.\n * @param startDate - The start date of the range.\n * @param endDate - The end date of the range.\n * @returns - True if the day is within the range, false otherwise.\n */ function isDayInRange(day, startDate, endDate) {\n    var valid;\n    var start = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_13__.startOfDay)(startDate);\n    var end = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_18__.endOfDay)(endDate);\n    try {\n        valid = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_26__.isWithinInterval)(day, {\n            start: start,\n            end: end\n        });\n    } catch (err) {\n        valid = false;\n    }\n    return valid;\n}\n// ** Date Localization **\n/**\n * Registers a locale.\n *\n * @param localeName - The name of the locale.\n * @param localeData - The data of the locale.\n */ function registerLocale(localeName, localeData) {\n    var scope = getLocaleScope();\n    if (!scope.__localeData__) {\n        scope.__localeData__ = {};\n    }\n    scope.__localeData__[localeName] = localeData;\n}\n/**\n * Sets the default locale.\n *\n * @param localeName - The name of the locale.\n */ function setDefaultLocale(localeName) {\n    var scope = getLocaleScope();\n    scope.__localeId__ = localeName;\n}\n/**\n * Gets the default locale.\n *\n * @returns - The default locale.\n */ function getDefaultLocale() {\n    var scope = getLocaleScope();\n    return scope.__localeId__;\n}\n/**\n * Gets the locale object.\n *\n * @param localeSpec - The locale specification.\n * @returns - The locale object.\n */ function getLocaleObject(localeSpec) {\n    if (typeof localeSpec === \"string\") {\n        // Treat it as a locale name registered by registerLocale\n        var scope = getLocaleScope();\n        // Null was replaced with undefined to avoid type coercion\n        return scope.__localeData__ ? scope.__localeData__[localeSpec] : undefined;\n    } else {\n        // Treat it as a raw date-fns locale object\n        return localeSpec;\n    }\n}\n/**\n * Formats the weekday in a given locale.\n *\n * @param date - The date to format.\n * @param formatFunc - The formatting function.\n * @param locale - The locale to use for formatting.\n * @returns - The formatted weekday.\n */ function getFormattedWeekdayInLocale(date, formatFunc, locale) {\n    return formatFunc(formatDate(date, \"EEEE\", locale));\n}\n/**\n * Gets the minimum weekday in a given locale.\n *\n * @param date - The date to format.\n * @param locale - The locale to use for formatting.\n * @returns - The minimum weekday.\n */ function getWeekdayMinInLocale(date, locale) {\n    return formatDate(date, \"EEEEEE\", locale);\n}\n/**\n * Gets the short weekday in a given locale.\n *\n * @param date - The date to format.\n * @param locale - The locale to use for formatting.\n * @returns - The short weekday.\n */ function getWeekdayShortInLocale(date, locale) {\n    return formatDate(date, \"EEE\", locale);\n}\n/**\n * Gets the month in a given locale.\n *\n * @param month - The month to format.\n * @param locale - The locale to use for formatting.\n * @returns - The month.\n */ function getMonthInLocale(month, locale) {\n    return formatDate((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_27__.setMonth)(newDate(), month), \"LLLL\", locale);\n}\n/**\n * Gets the short month in a given locale.\n *\n * @param month - The month to format.\n * @param locale - The locale to use for formatting.\n * @returns - The short month.\n */ function getMonthShortInLocale(month, locale) {\n    return formatDate((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_27__.setMonth)(newDate(), month), \"LLL\", locale);\n}\n/**\n * Gets the short quarter in a given locale.\n *\n * @param quarter - The quarter to format.\n * @param locale - The locale to use for formatting.\n * @returns - The short quarter.\n */ function getQuarterShortInLocale(quarter, locale) {\n    return formatDate((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_28__.setQuarter)(newDate(), quarter), \"QQQ\", locale);\n}\n/**\n * Checks if a day is disabled.\n *\n * @param day - The day to check.\n * @param options - The options to consider when checking.\n * @returns - Returns true if the day is disabled, false otherwise.\n */ function isDayDisabled(day, _a) {\n    var _b = _a === void 0 ? {} : _a, minDate = _b.minDate, maxDate = _b.maxDate, excludeDates = _b.excludeDates, excludeDateIntervals = _b.excludeDateIntervals, includeDates = _b.includeDates, includeDateIntervals = _b.includeDateIntervals, filterDate = _b.filterDate;\n    return isOutOfBounds(day, {\n        minDate: minDate,\n        maxDate: maxDate\n    }) || excludeDates && excludeDates.some(function(excludeDate) {\n        if (excludeDate instanceof Date) {\n            return isSameDay(day, excludeDate);\n        } else {\n            return isSameDay(day, excludeDate.date);\n        }\n    }) || excludeDateIntervals && excludeDateIntervals.some(function(_a) {\n        var start = _a.start, end = _a.end;\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_26__.isWithinInterval)(day, {\n            start: start,\n            end: end\n        });\n    }) || includeDates && !includeDates.some(function(includeDate) {\n        return isSameDay(day, includeDate);\n    }) || includeDateIntervals && !includeDateIntervals.some(function(_a) {\n        var start = _a.start, end = _a.end;\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_26__.isWithinInterval)(day, {\n            start: start,\n            end: end\n        });\n    }) || filterDate && !filterDate(newDate(day)) || false;\n}\n/**\n * Checks if a day is excluded.\n *\n * @param day - The day to check.\n * @param options - The options to consider when checking.\n * @returns - Returns true if the day is excluded, false otherwise.\n */ function isDayExcluded(day, _a) {\n    var _b = _a === void 0 ? {} : _a, excludeDates = _b.excludeDates, excludeDateIntervals = _b.excludeDateIntervals;\n    if (excludeDateIntervals && excludeDateIntervals.length > 0) {\n        return excludeDateIntervals.some(function(_a) {\n            var start = _a.start, end = _a.end;\n            return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_26__.isWithinInterval)(day, {\n                start: start,\n                end: end\n            });\n        });\n    }\n    return excludeDates && excludeDates.some(function(excludeDate) {\n        var _a;\n        if (excludeDate instanceof Date) {\n            return isSameDay(day, excludeDate);\n        } else {\n            return isSameDay(day, (_a = excludeDate.date) !== null && _a !== void 0 ? _a : new Date());\n        }\n    }) || false;\n}\nfunction isMonthDisabled(month, _a) {\n    var _b = _a === void 0 ? {} : _a, minDate = _b.minDate, maxDate = _b.maxDate, excludeDates = _b.excludeDates, includeDates = _b.includeDates, filterDate = _b.filterDate;\n    return isOutOfBounds(month, {\n        minDate: minDate ? (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_15__.startOfMonth)(minDate) : undefined,\n        maxDate: maxDate ? (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_20__.endOfMonth)(maxDate) : undefined\n    }) || (excludeDates === null || excludeDates === void 0 ? void 0 : excludeDates.some(function(excludeDate) {\n        return isSameMonth(month, excludeDate instanceof Date ? excludeDate : excludeDate.date);\n    })) || includeDates && !includeDates.some(function(includeDate) {\n        return isSameMonth(month, includeDate);\n    }) || filterDate && !filterDate(newDate(month)) || false;\n}\nfunction isMonthInRange(startDate, endDate, m, day) {\n    var startDateYear = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(startDate);\n    var startDateMonth = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_30__.getMonth)(startDate);\n    var endDateYear = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(endDate);\n    var endDateMonth = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_30__.getMonth)(endDate);\n    var dayYear = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(day);\n    if (startDateYear === endDateYear && startDateYear === dayYear) {\n        return startDateMonth <= m && m <= endDateMonth;\n    } else if (startDateYear < endDateYear) {\n        return dayYear === startDateYear && startDateMonth <= m || dayYear === endDateYear && endDateMonth >= m || dayYear < endDateYear && dayYear > startDateYear;\n    }\n    return false;\n}\n/**\n * To check if a date's month and year are disabled/excluded\n * @param date Date to check\n * @returns {boolean} true if month and year are disabled/excluded, false otherwise\n */ function isMonthYearDisabled(date, _a) {\n    var _b = _a === void 0 ? {} : _a, minDate = _b.minDate, maxDate = _b.maxDate, excludeDates = _b.excludeDates, includeDates = _b.includeDates;\n    return isOutOfBounds(date, {\n        minDate: minDate,\n        maxDate: maxDate\n    }) || excludeDates && excludeDates.some(function(excludedDate) {\n        return isSameMonth(excludedDate instanceof Date ? excludedDate : excludedDate.date, date);\n    }) || includeDates && !includeDates.some(function(includedDate) {\n        return isSameMonth(includedDate, date);\n    }) || false;\n}\nfunction isQuarterDisabled(quarter, _a) {\n    var _b = _a === void 0 ? {} : _a, minDate = _b.minDate, maxDate = _b.maxDate, excludeDates = _b.excludeDates, includeDates = _b.includeDates, filterDate = _b.filterDate;\n    return isOutOfBounds(quarter, {\n        minDate: minDate,\n        maxDate: maxDate\n    }) || (excludeDates === null || excludeDates === void 0 ? void 0 : excludeDates.some(function(excludeDate) {\n        return isSameQuarter(quarter, excludeDate instanceof Date ? excludeDate : excludeDate.date);\n    })) || includeDates && !includeDates.some(function(includeDate) {\n        return isSameQuarter(quarter, includeDate);\n    }) || filterDate && !filterDate(newDate(quarter)) || false;\n}\nfunction isYearInRange(year, start, end) {\n    if (!start || !end) return false;\n    if (!(0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_6__.isValid)(start) || !(0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_6__.isValid)(end)) return false;\n    var startYear = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(start);\n    var endYear = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(end);\n    return startYear <= year && endYear >= year;\n}\nfunction isYearDisabled(year, _a) {\n    var _b = _a === void 0 ? {} : _a, minDate = _b.minDate, maxDate = _b.maxDate, excludeDates = _b.excludeDates, includeDates = _b.includeDates, filterDate = _b.filterDate;\n    var date = new Date(year, 0, 1);\n    return isOutOfBounds(date, {\n        minDate: minDate ? (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_16__.startOfYear)(minDate) : undefined,\n        maxDate: maxDate ? (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_31__.endOfYear)(maxDate) : undefined\n    }) || (excludeDates === null || excludeDates === void 0 ? void 0 : excludeDates.some(function(excludeDate) {\n        return isSameYear(date, excludeDate instanceof Date ? excludeDate : excludeDate.date);\n    })) || includeDates && !includeDates.some(function(includeDate) {\n        return isSameYear(date, includeDate);\n    }) || filterDate && !filterDate(newDate(date)) || false;\n}\nfunction isQuarterInRange(startDate, endDate, q, day) {\n    var startDateYear = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(startDate);\n    var startDateQuarter = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_32__.getQuarter)(startDate);\n    var endDateYear = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(endDate);\n    var endDateQuarter = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_32__.getQuarter)(endDate);\n    var dayYear = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(day);\n    if (startDateYear === endDateYear && startDateYear === dayYear) {\n        return startDateQuarter <= q && q <= endDateQuarter;\n    } else if (startDateYear < endDateYear) {\n        return dayYear === startDateYear && startDateQuarter <= q || dayYear === endDateYear && endDateQuarter >= q || dayYear < endDateYear && dayYear > startDateYear;\n    }\n    return false;\n}\nfunction isOutOfBounds(day, _a) {\n    var _b;\n    var _c = _a === void 0 ? {} : _a, minDate = _c.minDate, maxDate = _c.maxDate;\n    return (_b = minDate && (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_33__.differenceInCalendarDays)(day, minDate) < 0 || maxDate && (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_33__.differenceInCalendarDays)(day, maxDate) > 0) !== null && _b !== void 0 ? _b : false;\n}\nfunction isTimeInList(time, times) {\n    return times.some(function(listTime) {\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_34__.getHours)(listTime) === (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_34__.getHours)(time) && (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_35__.getMinutes)(listTime) === (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_35__.getMinutes)(time) && (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_36__.getSeconds)(listTime) === (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_36__.getSeconds)(time);\n    });\n}\nfunction isTimeDisabled(time, _a) {\n    var _b = _a === void 0 ? {} : _a, excludeTimes = _b.excludeTimes, includeTimes = _b.includeTimes, filterTime = _b.filterTime;\n    return excludeTimes && isTimeInList(time, excludeTimes) || includeTimes && !isTimeInList(time, includeTimes) || filterTime && !filterTime(time) || false;\n}\nfunction isTimeInDisabledRange(time, _a) {\n    var minTime = _a.minTime, maxTime = _a.maxTime;\n    if (!minTime || !maxTime) {\n        throw new Error(\"Both minTime and maxTime props required\");\n    }\n    var baseTime = newDate();\n    baseTime = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_9__.setHours)(baseTime, (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_34__.getHours)(time));\n    baseTime = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_10__.setMinutes)(baseTime, (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_35__.getMinutes)(time));\n    baseTime = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_11__.setSeconds)(baseTime, (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_36__.getSeconds)(time));\n    var min = newDate();\n    min = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_9__.setHours)(min, (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_34__.getHours)(minTime));\n    min = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_10__.setMinutes)(min, (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_35__.getMinutes)(minTime));\n    min = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_11__.setSeconds)(min, (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_36__.getSeconds)(minTime));\n    var max = newDate();\n    max = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_9__.setHours)(max, (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_34__.getHours)(maxTime));\n    max = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_10__.setMinutes)(max, (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_35__.getMinutes)(maxTime));\n    max = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_11__.setSeconds)(max, (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_36__.getSeconds)(maxTime));\n    var valid;\n    try {\n        valid = !(0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_26__.isWithinInterval)(baseTime, {\n            start: min,\n            end: max\n        });\n    } catch (err) {\n        valid = false;\n    }\n    return valid;\n}\nfunction monthDisabledBefore(day, _a) {\n    var _b = _a === void 0 ? {} : _a, minDate = _b.minDate, includeDates = _b.includeDates;\n    var previousMonth = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_37__.subMonths)(day, 1);\n    return minDate && (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_38__.differenceInCalendarMonths)(minDate, previousMonth) > 0 || includeDates && includeDates.every(function(includeDate) {\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_38__.differenceInCalendarMonths)(includeDate, previousMonth) > 0;\n    }) || false;\n}\nfunction monthDisabledAfter(day, _a) {\n    var _b = _a === void 0 ? {} : _a, maxDate = _b.maxDate, includeDates = _b.includeDates;\n    var nextMonth = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_39__.addMonths)(day, 1);\n    return maxDate && (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_38__.differenceInCalendarMonths)(nextMonth, maxDate) > 0 || includeDates && includeDates.every(function(includeDate) {\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_38__.differenceInCalendarMonths)(nextMonth, includeDate) > 0;\n    }) || false;\n}\nfunction quarterDisabledBefore(date, _a) {\n    var _b = _a === void 0 ? {} : _a, minDate = _b.minDate, includeDates = _b.includeDates;\n    var firstDateOfYear = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_16__.startOfYear)(date);\n    var previousQuarter = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_40__.subQuarters)(firstDateOfYear, 1);\n    return minDate && (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_41__.differenceInCalendarQuarters)(minDate, previousQuarter) > 0 || includeDates && includeDates.every(function(includeDate) {\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_41__.differenceInCalendarQuarters)(includeDate, previousQuarter) > 0;\n    }) || false;\n}\nfunction quarterDisabledAfter(date, _a) {\n    var _b = _a === void 0 ? {} : _a, maxDate = _b.maxDate, includeDates = _b.includeDates;\n    var lastDateOfYear = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_31__.endOfYear)(date);\n    var nextQuarter = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_42__.addQuarters)(lastDateOfYear, 1);\n    return maxDate && (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_41__.differenceInCalendarQuarters)(nextQuarter, maxDate) > 0 || includeDates && includeDates.every(function(includeDate) {\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_41__.differenceInCalendarQuarters)(nextQuarter, includeDate) > 0;\n    }) || false;\n}\nfunction yearDisabledBefore(day, _a) {\n    var _b = _a === void 0 ? {} : _a, minDate = _b.minDate, includeDates = _b.includeDates;\n    var previousYear = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_43__.subYears)(day, 1);\n    return minDate && (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_44__.differenceInCalendarYears)(minDate, previousYear) > 0 || includeDates && includeDates.every(function(includeDate) {\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_44__.differenceInCalendarYears)(includeDate, previousYear) > 0;\n    }) || false;\n}\nfunction yearsDisabledBefore(day, _a) {\n    var _b = _a === void 0 ? {} : _a, minDate = _b.minDate, _c = _b.yearItemNumber, yearItemNumber = _c === void 0 ? DEFAULT_YEAR_ITEM_NUMBER : _c;\n    var previousYear = getStartOfYear((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_43__.subYears)(day, yearItemNumber));\n    var endPeriod = getYearsPeriod(previousYear, yearItemNumber).endPeriod;\n    var minDateYear = minDate && (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(minDate);\n    return minDateYear && minDateYear > endPeriod || false;\n}\nfunction yearDisabledAfter(day, _a) {\n    var _b = _a === void 0 ? {} : _a, maxDate = _b.maxDate, includeDates = _b.includeDates;\n    var nextYear = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_45__.addYears)(day, 1);\n    return maxDate && (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_44__.differenceInCalendarYears)(nextYear, maxDate) > 0 || includeDates && includeDates.every(function(includeDate) {\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_44__.differenceInCalendarYears)(nextYear, includeDate) > 0;\n    }) || false;\n}\nfunction yearsDisabledAfter(day, _a) {\n    var _b = _a === void 0 ? {} : _a, maxDate = _b.maxDate, _c = _b.yearItemNumber, yearItemNumber = _c === void 0 ? DEFAULT_YEAR_ITEM_NUMBER : _c;\n    var nextYear = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_45__.addYears)(day, yearItemNumber);\n    var startPeriod = getYearsPeriod(nextYear, yearItemNumber).startPeriod;\n    var maxDateYear = maxDate && (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(maxDate);\n    return maxDateYear && maxDateYear < startPeriod || false;\n}\nfunction getEffectiveMinDate(_a) {\n    var minDate = _a.minDate, includeDates = _a.includeDates;\n    if (includeDates && minDate) {\n        var minDates = includeDates.filter(function(includeDate) {\n            return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_33__.differenceInCalendarDays)(includeDate, minDate) >= 0;\n        });\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_46__.min)(minDates);\n    } else if (includeDates) {\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_46__.min)(includeDates);\n    } else {\n        return minDate;\n    }\n}\nfunction getEffectiveMaxDate(_a) {\n    var maxDate = _a.maxDate, includeDates = _a.includeDates;\n    if (includeDates && maxDate) {\n        var maxDates = includeDates.filter(function(includeDate) {\n            return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_33__.differenceInCalendarDays)(includeDate, maxDate) <= 0;\n        });\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_47__.max)(maxDates);\n    } else if (includeDates) {\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_47__.max)(includeDates);\n    } else {\n        return maxDate;\n    }\n}\n/**\n * Get a map of highlighted dates with their corresponding classes.\n * @param highlightDates The dates to highlight.\n * @param defaultClassName The default class to use for highlighting.\n * @returns A map with dates as keys and arrays of class names as values.\n */ function getHighLightDaysMap(highlightDates, defaultClassName) {\n    var _a;\n    if (highlightDates === void 0) {\n        highlightDates = [];\n    }\n    if (defaultClassName === void 0) {\n        defaultClassName = \"react-datepicker__day--highlighted\";\n    }\n    var dateClasses = new Map();\n    for(var i = 0, len = highlightDates.length; i < len; i++){\n        var obj = highlightDates[i];\n        if ((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_48__.isDate)(obj)) {\n            var key = formatDate(obj, \"MM.dd.yyyy\");\n            var classNamesArr = dateClasses.get(key) || [];\n            if (!classNamesArr.includes(defaultClassName)) {\n                classNamesArr.push(defaultClassName);\n                dateClasses.set(key, classNamesArr);\n            }\n        } else if (typeof obj === \"object\") {\n            var keys = Object.keys(obj);\n            var className = (_a = keys[0]) !== null && _a !== void 0 ? _a : \"\";\n            var arrOfDates = obj[className];\n            if (typeof className === \"string\" && Array.isArray(arrOfDates)) {\n                for(var k = 0, len_1 = arrOfDates.length; k < len_1; k++){\n                    var dateK = arrOfDates[k];\n                    if (dateK) {\n                        var key = formatDate(dateK, \"MM.dd.yyyy\");\n                        var classNamesArr = dateClasses.get(key) || [];\n                        if (!classNamesArr.includes(className)) {\n                            classNamesArr.push(className);\n                            dateClasses.set(key, classNamesArr);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return dateClasses;\n}\n/**\n * Compare the two arrays\n * @param array1 The first array to compare.\n * @param array2 The second array to compare.\n * @returns true, if the passed arrays are equal, false otherwise.\n */ function arraysAreEqual(array1, array2) {\n    if (array1.length !== array2.length) {\n        return false;\n    }\n    return array1.every(function(value, index) {\n        return value === array2[index];\n    });\n}\n/**\n * Assign the custom class to each date\n * @param holidayDates array of object containing date and name of the holiday\n * @param defaultClassName className to be added.\n * @returns Map containing date as key and array of className and holiday name as value\n */ function getHolidaysMap(holidayDates, defaultClassName) {\n    if (holidayDates === void 0) {\n        holidayDates = [];\n    }\n    if (defaultClassName === void 0) {\n        defaultClassName = \"react-datepicker__day--holidays\";\n    }\n    var dateClasses = new Map();\n    holidayDates.forEach(function(holiday) {\n        var dateObj = holiday.date, holidayName = holiday.holidayName;\n        if (!(0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_48__.isDate)(dateObj)) {\n            return;\n        }\n        var key = formatDate(dateObj, \"MM.dd.yyyy\");\n        var classNamesObj = dateClasses.get(key) || {\n            className: \"\",\n            holidayNames: []\n        };\n        if (\"className\" in classNamesObj && classNamesObj[\"className\"] === defaultClassName && arraysAreEqual(classNamesObj[\"holidayNames\"], [\n            holidayName\n        ])) {\n            return;\n        }\n        classNamesObj[\"className\"] = defaultClassName;\n        var holidayNameArr = classNamesObj[\"holidayNames\"];\n        classNamesObj[\"holidayNames\"] = holidayNameArr ? __spreadArray(__spreadArray([], holidayNameArr, true), [\n            holidayName\n        ], false) : [\n            holidayName\n        ];\n        dateClasses.set(key, classNamesObj);\n    });\n    return dateClasses;\n}\n/**\n * Determines the times to inject after a given start of day, current time, and multiplier.\n * @param startOfDay The start of the day.\n * @param currentTime The current time.\n * @param currentMultiplier The current multiplier.\n * @param intervals The intervals.\n * @param injectedTimes The times to potentially inject.\n * @returns An array of times to inject.\n */ function timesToInjectAfter(startOfDay, currentTime, currentMultiplier, intervals, injectedTimes) {\n    var l = injectedTimes.length;\n    var times = [];\n    for(var i = 0; i < l; i++){\n        var injectedTime = startOfDay;\n        var injectedTimeValue = injectedTimes[i];\n        if (injectedTimeValue) {\n            injectedTime = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_49__.addHours)(injectedTime, (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_34__.getHours)(injectedTimeValue));\n            injectedTime = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_50__.addMinutes)(injectedTime, (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_35__.getMinutes)(injectedTimeValue));\n            injectedTime = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_51__.addSeconds)(injectedTime, (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_36__.getSeconds)(injectedTimeValue));\n        }\n        var nextTime = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_50__.addMinutes)(startOfDay, (currentMultiplier + 1) * intervals);\n        if ((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_52__.isAfter)(injectedTime, currentTime) && (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_7__.isBefore)(injectedTime, nextTime) && injectedTimeValue != undefined) {\n            times.push(injectedTimeValue);\n        }\n    }\n    return times;\n}\n/**\n * Adds a leading zero to a number if it's less than 10.\n * @param i The number to add a leading zero to.\n * @returns The number as a string, with a leading zero if it was less than 10.\n */ function addZero(i) {\n    return i < 10 ? \"0\".concat(i) : \"\".concat(i);\n}\n/**\n * Gets the start and end years for a period.\n * @param date The date to get the period for.\n * @param yearItemNumber The number of years in the period. Defaults to DEFAULT_YEAR_ITEM_NUMBER.\n * @returns An object with the start and end years for the period.\n */ function getYearsPeriod(date, yearItemNumber) {\n    if (yearItemNumber === void 0) {\n        yearItemNumber = DEFAULT_YEAR_ITEM_NUMBER;\n    }\n    var endPeriod = Math.ceil((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(date) / yearItemNumber) * yearItemNumber;\n    var startPeriod = endPeriod - (yearItemNumber - 1);\n    return {\n        startPeriod: startPeriod,\n        endPeriod: endPeriod\n    };\n}\n/**\n * Gets the number of hours in a day.\n * @param d The date to get the number of hours for.\n * @returns The number of hours in the day.\n */ function getHoursInDay(d) {\n    var startOfDay = new Date(d.getFullYear(), d.getMonth(), d.getDate());\n    var startOfTheNextDay = new Date(d.getFullYear(), d.getMonth(), d.getDate(), 24);\n    return Math.round((+startOfTheNextDay - +startOfDay) / 3600000);\n}\n/**\n * Returns the start of the minute for the given date\n *\n * NOTE: this function is a DST and timezone-safe analog of `date-fns/startOfMinute`\n * do not make changes unless you know what you're doing\n *\n * See comments on https://github.com/Hacker0x01/react-datepicker/pull/4244\n * for more details\n *\n * @param d date\n * @returns start of the minute\n */ function startOfMinute(d) {\n    var seconds = d.getSeconds();\n    var milliseconds = d.getMilliseconds();\n    return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_4__.toDate)(d.getTime() - seconds * 1000 - milliseconds);\n}\n/**\n * Returns whether the given dates are in the same minute\n *\n * This function is a DST and timezone-safe analog of `date-fns/isSameMinute`\n *\n * @param d1\n * @param d2\n * @returns\n */ function isSameMinute(d1, d2) {\n    return startOfMinute(d1).getTime() === startOfMinute(d2).getTime();\n}\n/**\n * Returns a new datetime object representing the input date with midnight time\n * @param date The date to get the midnight time for\n * @returns A new datetime object representing the input date with midnight time\n */ function getMidnightDate(date) {\n    if (!(0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_48__.isDate)(date)) {\n        throw new Error(\"Invalid date\");\n    }\n    var dateWithoutTime = new Date(date);\n    dateWithoutTime.setHours(0, 0, 0, 0);\n    return dateWithoutTime;\n}\n/**\n * Is the first date before the second one?\n * @param date The date that should be before the other one to return true\n * @param dateToCompare The date to compare with\n * @returns The first date is before the second date\n *\n * Note:\n *  This function considers the mid-night of the given dates for comparison.\n *  It evaluates whether date is before dateToCompare based on their mid-night timestamps.\n */ function isDateBefore(date, dateToCompare) {\n    if (!(0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_48__.isDate)(date) || !(0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_48__.isDate)(dateToCompare)) {\n        throw new Error(\"Invalid date received\");\n    }\n    var midnightDate = getMidnightDate(date);\n    var midnightDateToCompare = getMidnightDate(dateToCompare);\n    return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_7__.isBefore)(midnightDate, midnightDateToCompare);\n}\n/**\n * Checks if the space key was pressed down.\n *\n * @param event - The keyboard event.\n * @returns - Returns true if the space key was pressed down, false otherwise.\n */ function isSpaceKeyDown(event) {\n    return event.key === KeyType.Space;\n}\n/**\n * `InputTime` is a React component that manages time input.\n *\n * @component\n * @example\n * <InputTime timeString=\"12:00\" />\n *\n * @param props - The properties that define the `InputTime` component.\n * @param props.onChange - Function that is called when the date changes.\n * @param props.date - The initial date value.\n * @param props.timeString - The initial time string value.\n * @param props.timeInputLabel - The label for the time input.\n * @param props.customTimeInput - An optional custom time input element.\n *\n * @returns The `InputTime` component.\n */ var InputTime = /** @class */ function(_super) {\n    __extends(InputTime, _super);\n    function InputTime(props) {\n        var _this = _super.call(this, props) || this;\n        _this.inputRef = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createRef();\n        _this.onTimeChange = function(time) {\n            var _a, _b;\n            _this.setState({\n                time: time\n            });\n            var propDate = _this.props.date;\n            var isPropDateValid = propDate instanceof Date && !isNaN(+propDate);\n            var date = isPropDateValid ? propDate : new Date();\n            if (time === null || time === void 0 ? void 0 : time.includes(\":\")) {\n                var _c = time.split(\":\"), hours = _c[0], minutes = _c[1];\n                date.setHours(Number(hours));\n                date.setMinutes(Number(minutes));\n            }\n            (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, date);\n        };\n        _this.renderTimeInput = function() {\n            var time = _this.state.time;\n            var _a = _this.props, date = _a.date, timeString = _a.timeString, customTimeInput = _a.customTimeInput;\n            if (customTimeInput) {\n                return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.cloneElement)(customTimeInput, {\n                    date: date,\n                    value: time,\n                    onChange: _this.onTimeChange\n                });\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"input\", {\n                type: \"time\",\n                className: \"react-datepicker-time__input\",\n                placeholder: \"Time\",\n                name: \"time-input\",\n                ref: _this.inputRef,\n                onClick: function() {\n                    var _a;\n                    (_a = _this.inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n                },\n                required: true,\n                value: time,\n                onChange: function(event) {\n                    _this.onTimeChange(event.target.value || timeString);\n                }\n            });\n        };\n        _this.state = {\n            time: _this.props.timeString\n        };\n        return _this;\n    }\n    InputTime.getDerivedStateFromProps = function(props, state) {\n        if (props.timeString !== state.time) {\n            return {\n                time: props.timeString\n            };\n        }\n        // Return null to indicate no change to state.\n        return null;\n    };\n    InputTime.prototype.render = function() {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"react-datepicker__input-time-container\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"react-datepicker-time__caption\"\n        }, this.props.timeInputLabel), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"react-datepicker-time__input-container\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"react-datepicker-time__input\"\n        }, this.renderTimeInput())));\n    };\n    return InputTime;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\n/**\n * `Day` is a React component that represents a single day in a date picker.\n * It handles the rendering and interaction of a day.\n *\n * @prop ariaLabelPrefixWhenEnabled - Aria label prefix when the day is enabled.\n * @prop ariaLabelPrefixWhenDisabled - Aria label prefix when the day is disabled.\n * @prop disabledKeyboardNavigation - Whether keyboard navigation is disabled.\n * @prop day - The day to be displayed.\n * @prop dayClassName - Function to customize the CSS class of the day.\n * @prop endDate - The end date in a range.\n * @prop highlightDates - Map of dates to be highlighted.\n * @prop holidays - Map of holiday dates.\n * @prop inline - Whether the date picker is inline.\n * @prop shouldFocusDayInline - Whether the day should be focused when date picker is inline.\n * @prop month - The month the day belongs to.\n * @prop onClick - Click event handler.\n * @prop onMouseEnter - Mouse enter event handler.\n * @prop handleOnKeyDown - Key down event handler.\n * @prop usePointerEvent - Whether to use pointer events.\n * @prop preSelection - The date that is currently selected.\n * @prop selected - The selected date.\n * @prop selectingDate - The date currently being selected.\n * @prop selectsEnd - Whether the day can be the end date in a range.\n * @prop selectsStart - Whether the day can be the start date in a range.\n * @prop selectsRange - Whether the day can be in a range.\n * @prop showWeekPicker - Whether to show week picker.\n * @prop showWeekNumber - Whether to show week numbers.\n * @prop selectsDisabledDaysInRange - Whether to select disabled days in a range.\n * @prop selectsMultiple - Whether to allow multiple date selection.\n * @prop selectedDates - Array of selected dates.\n * @prop startDate - The start date in a range.\n * @prop renderDayContents - Function to customize the rendering of the day's contents.\n * @prop containerRef - Ref for the container.\n * @prop excludeDates - Array of dates to be excluded.\n * @prop calendarStartDay - The start day of the week.\n * @prop locale - The locale object.\n * @prop monthShowsDuplicateDaysEnd - Whether to show duplicate days at the end of the month.\n * @prop monthShowsDuplicateDaysStart - Whether to show duplicate days at the start of the month.\n * @prop includeDates - Array of dates to be included.\n * @prop includeDateIntervals - Array of date intervals to be included.\n * @prop minDate - The minimum date that can be selected.\n * @prop maxDate - The maximum date that can be selected.\n *\n * @example\n * ```tsx\n * import React from 'react';\n * import Day from './day';\n *\n * function MyComponent() {\n *   const handleDayClick = (event) => {\n *     console.log('Day clicked', event);\n *   };\n *\n *   const handleDayMouseEnter = (event) => {\n *     console.log('Mouse entered day', event);\n *   };\n *\n *   const renderDayContents = (date) => {\n *     return <div>{date.getDate()}</div>;\n *   };\n *\n *   return (\n *     <Day\n *       day={new Date()}\n *       onClick={handleDayClick}\n *       onMouseEnter={handleDayMouseEnter}\n *       renderDayContents={renderDayContents}\n *     />\n *   );\n * }\n *\n * export default MyComponent;\n * ```\n */ var Day = /** @class */ function(_super) {\n    __extends(Day, _super);\n    function Day() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.dayEl = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        _this.handleClick = function(event) {\n            if (!_this.isDisabled() && _this.props.onClick) {\n                _this.props.onClick(event);\n            }\n        };\n        _this.handleMouseEnter = function(event) {\n            if (!_this.isDisabled() && _this.props.onMouseEnter) {\n                _this.props.onMouseEnter(event);\n            }\n        };\n        _this.handleOnKeyDown = function(event) {\n            var _a, _b;\n            var eventKey = event.key;\n            if (eventKey === KeyType.Space) {\n                event.preventDefault();\n                event.key = KeyType.Enter;\n            }\n            (_b = (_a = _this.props).handleOnKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n        };\n        _this.isSameDay = function(other) {\n            return isSameDay(_this.props.day, other);\n        };\n        _this.isKeyboardSelected = function() {\n            var _a;\n            if (_this.props.disabledKeyboardNavigation) {\n                return false;\n            }\n            var isSelectedDate = _this.props.selectsMultiple ? (_a = _this.props.selectedDates) === null || _a === void 0 ? void 0 : _a.some(function(date) {\n                return _this.isSameDayOrWeek(date);\n            }) : _this.isSameDayOrWeek(_this.props.selected);\n            var isDisabled = _this.props.preSelection && _this.isDisabled(_this.props.preSelection);\n            return !isSelectedDate && _this.isSameDayOrWeek(_this.props.preSelection) && !isDisabled;\n        };\n        _this.isDisabled = function(day) {\n            if (day === void 0) {\n                day = _this.props.day;\n            }\n            // Almost all props previously were passed as this.props w/o proper typing with prop-types\n            // after the migration to TS i made it explicit\n            return isDayDisabled(day, {\n                minDate: _this.props.minDate,\n                maxDate: _this.props.maxDate,\n                excludeDates: _this.props.excludeDates,\n                excludeDateIntervals: _this.props.excludeDateIntervals,\n                includeDateIntervals: _this.props.includeDateIntervals,\n                includeDates: _this.props.includeDates,\n                filterDate: _this.props.filterDate\n            });\n        };\n        _this.isExcluded = function() {\n            // Almost all props previously were passed as this.props w/o proper typing with prop-types\n            // after the migration to TS i made it explicit\n            return isDayExcluded(_this.props.day, {\n                excludeDates: _this.props.excludeDates,\n                excludeDateIntervals: _this.props.excludeDateIntervals\n            });\n        };\n        _this.isStartOfWeek = function() {\n            return isSameDay(_this.props.day, getStartOfWeek(_this.props.day, _this.props.locale, _this.props.calendarStartDay));\n        };\n        _this.isSameWeek = function(other) {\n            return _this.props.showWeekPicker && isSameDay(other, getStartOfWeek(_this.props.day, _this.props.locale, _this.props.calendarStartDay));\n        };\n        _this.isSameDayOrWeek = function(other) {\n            return _this.isSameDay(other) || _this.isSameWeek(other);\n        };\n        _this.getHighLightedClass = function() {\n            var _a = _this.props, day = _a.day, highlightDates = _a.highlightDates;\n            if (!highlightDates) {\n                return false;\n            }\n            // Looking for className in the Map of {'day string, 'className'}\n            var dayStr = formatDate(day, \"MM.dd.yyyy\");\n            return highlightDates.get(dayStr);\n        };\n        // Function to return the array containing className associated to the date\n        _this.getHolidaysClass = function() {\n            var _a;\n            var _b = _this.props, day = _b.day, holidays = _b.holidays;\n            if (!holidays) {\n                // For type consistency no other reasons\n                return [\n                    undefined\n                ];\n            }\n            var dayStr = formatDate(day, \"MM.dd.yyyy\");\n            // Looking for className in the Map of {day string: {className, holidayName}}\n            if (holidays.has(dayStr)) {\n                return [\n                    (_a = holidays.get(dayStr)) === null || _a === void 0 ? void 0 : _a.className\n                ];\n            }\n            // For type consistency no other reasons\n            return [\n                undefined\n            ];\n        };\n        _this.isInRange = function() {\n            var _a = _this.props, day = _a.day, startDate = _a.startDate, endDate = _a.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isDayInRange(day, startDate, endDate);\n        };\n        _this.isInSelectingRange = function() {\n            var _a;\n            var _b = _this.props, day = _b.day, selectsStart = _b.selectsStart, selectsEnd = _b.selectsEnd, selectsRange = _b.selectsRange, selectsDisabledDaysInRange = _b.selectsDisabledDaysInRange, startDate = _b.startDate, endDate = _b.endDate;\n            var selectingDate = (_a = _this.props.selectingDate) !== null && _a !== void 0 ? _a : _this.props.preSelection;\n            if (!(selectsStart || selectsEnd || selectsRange) || !selectingDate || !selectsDisabledDaysInRange && _this.isDisabled()) {\n                return false;\n            }\n            if (selectsStart && endDate && ((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_7__.isBefore)(selectingDate, endDate) || isEqual(selectingDate, endDate))) {\n                return isDayInRange(day, selectingDate, endDate);\n            }\n            if (selectsEnd && startDate && ((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_52__.isAfter)(selectingDate, startDate) || isEqual(selectingDate, startDate))) {\n                return isDayInRange(day, startDate, selectingDate);\n            }\n            if (selectsRange && startDate && !endDate && ((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_52__.isAfter)(selectingDate, startDate) || isEqual(selectingDate, startDate))) {\n                return isDayInRange(day, startDate, selectingDate);\n            }\n            return false;\n        };\n        _this.isSelectingRangeStart = function() {\n            var _a;\n            if (!_this.isInSelectingRange()) {\n                return false;\n            }\n            var _b = _this.props, day = _b.day, startDate = _b.startDate, selectsStart = _b.selectsStart;\n            var selectingDate = (_a = _this.props.selectingDate) !== null && _a !== void 0 ? _a : _this.props.preSelection;\n            if (selectsStart) {\n                return isSameDay(day, selectingDate);\n            } else {\n                return isSameDay(day, startDate);\n            }\n        };\n        _this.isSelectingRangeEnd = function() {\n            var _a;\n            if (!_this.isInSelectingRange()) {\n                return false;\n            }\n            var _b = _this.props, day = _b.day, endDate = _b.endDate, selectsEnd = _b.selectsEnd, selectsRange = _b.selectsRange;\n            var selectingDate = (_a = _this.props.selectingDate) !== null && _a !== void 0 ? _a : _this.props.preSelection;\n            if (selectsEnd || selectsRange) {\n                return isSameDay(day, selectingDate);\n            } else {\n                return isSameDay(day, endDate);\n            }\n        };\n        _this.isRangeStart = function() {\n            var _a = _this.props, day = _a.day, startDate = _a.startDate, endDate = _a.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isSameDay(startDate, day);\n        };\n        _this.isRangeEnd = function() {\n            var _a = _this.props, day = _a.day, startDate = _a.startDate, endDate = _a.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isSameDay(endDate, day);\n        };\n        _this.isWeekend = function() {\n            var weekday = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_53__.getDay)(_this.props.day);\n            return weekday === 0 || weekday === 6;\n        };\n        _this.isAfterMonth = function() {\n            return _this.props.month !== undefined && (_this.props.month + 1) % 12 === (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_30__.getMonth)(_this.props.day);\n        };\n        _this.isBeforeMonth = function() {\n            return _this.props.month !== undefined && ((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_30__.getMonth)(_this.props.day) + 1) % 12 === _this.props.month;\n        };\n        _this.isCurrentDay = function() {\n            return _this.isSameDay(newDate());\n        };\n        _this.isSelected = function() {\n            var _a;\n            if (_this.props.selectsMultiple) {\n                return (_a = _this.props.selectedDates) === null || _a === void 0 ? void 0 : _a.some(function(date) {\n                    return _this.isSameDayOrWeek(date);\n                });\n            }\n            return _this.isSameDayOrWeek(_this.props.selected);\n        };\n        _this.getClassNames = function(date) {\n            var dayClassName = _this.props.dayClassName ? _this.props.dayClassName(date) : undefined;\n            return (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker__day\", dayClassName, \"react-datepicker__day--\" + getDayOfWeekCode(_this.props.day), {\n                \"react-datepicker__day--disabled\": _this.isDisabled(),\n                \"react-datepicker__day--excluded\": _this.isExcluded(),\n                \"react-datepicker__day--selected\": _this.isSelected(),\n                \"react-datepicker__day--keyboard-selected\": _this.isKeyboardSelected(),\n                \"react-datepicker__day--range-start\": _this.isRangeStart(),\n                \"react-datepicker__day--range-end\": _this.isRangeEnd(),\n                \"react-datepicker__day--in-range\": _this.isInRange(),\n                \"react-datepicker__day--in-selecting-range\": _this.isInSelectingRange(),\n                \"react-datepicker__day--selecting-range-start\": _this.isSelectingRangeStart(),\n                \"react-datepicker__day--selecting-range-end\": _this.isSelectingRangeEnd(),\n                \"react-datepicker__day--today\": _this.isCurrentDay(),\n                \"react-datepicker__day--weekend\": _this.isWeekend(),\n                \"react-datepicker__day--outside-month\": _this.isAfterMonth() || _this.isBeforeMonth()\n            }, _this.getHighLightedClass(), _this.getHolidaysClass());\n        };\n        _this.getAriaLabel = function() {\n            var _a = _this.props, day = _a.day, _b = _a.ariaLabelPrefixWhenEnabled, ariaLabelPrefixWhenEnabled = _b === void 0 ? \"Choose\" : _b, _c = _a.ariaLabelPrefixWhenDisabled, ariaLabelPrefixWhenDisabled = _c === void 0 ? \"Not available\" : _c;\n            var prefix = _this.isDisabled() || _this.isExcluded() ? ariaLabelPrefixWhenDisabled : ariaLabelPrefixWhenEnabled;\n            return \"\".concat(prefix, \" \").concat(formatDate(day, \"PPPP\", _this.props.locale));\n        };\n        // A function to return the holiday's name as title's content\n        _this.getTitle = function() {\n            var _a = _this.props, day = _a.day, _b = _a.holidays, holidays = _b === void 0 ? new Map() : _b, excludeDates = _a.excludeDates;\n            var compareDt = formatDate(day, \"MM.dd.yyyy\");\n            var titles = [];\n            if (holidays.has(compareDt)) {\n                titles.push.apply(titles, holidays.get(compareDt).holidayNames);\n            }\n            if (_this.isExcluded()) {\n                titles.push(excludeDates === null || excludeDates === void 0 ? void 0 : excludeDates.filter(function(excludeDate) {\n                    if (excludeDate instanceof Date) {\n                        return isSameDay(excludeDate, day);\n                    }\n                    return isSameDay(excludeDate === null || excludeDate === void 0 ? void 0 : excludeDate.date, day);\n                }).map(function(excludeDate) {\n                    if (excludeDate instanceof Date) {\n                        return undefined;\n                    }\n                    return excludeDate === null || excludeDate === void 0 ? void 0 : excludeDate.message;\n                }));\n            }\n            // I'm not sure that this is a right output, but all tests are green\n            return titles.join(\", \");\n        };\n        _this.getTabIndex = function() {\n            var selectedDay = _this.props.selected;\n            var preSelectionDay = _this.props.preSelection;\n            var tabIndex = !(_this.props.showWeekPicker && (_this.props.showWeekNumber || !_this.isStartOfWeek())) && (_this.isKeyboardSelected() || _this.isSameDay(selectedDay) && isSameDay(preSelectionDay, selectedDay)) ? 0 : -1;\n            return tabIndex;\n        };\n        // various cases when we need to apply focus to the preselected day\n        // focus the day on mount/update so that keyboard navigation works while cycling through months with up or down keys (not for prev and next month buttons)\n        // prevent focus for these activeElement cases so we don't pull focus from the input as the calendar opens\n        _this.handleFocusDay = function() {\n            var _a;\n            // only do this while the input isn't focused\n            // otherwise, typing/backspacing the date manually may steal focus away from the input\n            _this.shouldFocusDay() && ((_a = _this.dayEl.current) === null || _a === void 0 ? void 0 : _a.focus({\n                preventScroll: true\n            }));\n        };\n        _this.renderDayContents = function() {\n            if (_this.props.monthShowsDuplicateDaysEnd && _this.isAfterMonth()) return null;\n            if (_this.props.monthShowsDuplicateDaysStart && _this.isBeforeMonth()) return null;\n            return _this.props.renderDayContents ? _this.props.renderDayContents((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_54__.getDate)(_this.props.day), _this.props.day) : (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_54__.getDate)(_this.props.day);\n        };\n        _this.render = function() {\n            return(// TODO: Use <option> instead of the \"option\" role to ensure accessibility across all devices.\n            /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                ref: _this.dayEl,\n                className: _this.getClassNames(_this.props.day),\n                onKeyDown: _this.handleOnKeyDown,\n                onClick: _this.handleClick,\n                onMouseEnter: !_this.props.usePointerEvent ? _this.handleMouseEnter : undefined,\n                onPointerEnter: _this.props.usePointerEvent ? _this.handleMouseEnter : undefined,\n                tabIndex: _this.getTabIndex(),\n                \"aria-label\": _this.getAriaLabel(),\n                role: \"option\",\n                title: _this.getTitle(),\n                \"aria-disabled\": _this.isDisabled(),\n                \"aria-current\": _this.isCurrentDay() ? \"date\" : undefined,\n                \"aria-selected\": _this.isSelected() || _this.isInRange()\n            }, _this.renderDayContents(), _this.getTitle() !== \"\" && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                className: \"overlay\"\n            }, _this.getTitle())));\n        };\n        return _this;\n    }\n    Day.prototype.componentDidMount = function() {\n        this.handleFocusDay();\n    };\n    Day.prototype.componentDidUpdate = function() {\n        this.handleFocusDay();\n    };\n    Day.prototype.shouldFocusDay = function() {\n        var shouldFocusDay = false;\n        if (this.getTabIndex() === 0 && this.isSameDay(this.props.preSelection)) {\n            // there is currently no activeElement and not inline\n            if (!document.activeElement || document.activeElement === document.body) {\n                shouldFocusDay = true;\n            }\n            // inline version:\n            // do not focus on initial render to prevent autoFocus issue\n            // focus after month has changed via keyboard\n            if (this.props.inline && !this.props.shouldFocusDayInline) {\n                shouldFocusDay = false;\n            }\n            if (this.isDayActiveElement()) {\n                shouldFocusDay = true;\n            }\n            if (this.isDuplicateDay()) {\n                shouldFocusDay = false;\n            }\n        }\n        return shouldFocusDay;\n    };\n    // the activeElement is in the container, and it is another instance of Day\n    Day.prototype.isDayActiveElement = function() {\n        var _a, _b, _c;\n        return ((_b = (_a = this.props.containerRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.contains(document.activeElement)) && ((_c = document.activeElement) === null || _c === void 0 ? void 0 : _c.classList.contains(\"react-datepicker__day\"));\n    };\n    Day.prototype.isDuplicateDay = function() {\n        return(//day is one of the non rendered duplicate days\n        this.props.monthShowsDuplicateDaysEnd && this.isAfterMonth() || this.props.monthShowsDuplicateDaysStart && this.isBeforeMonth());\n    };\n    return Day;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\nvar WeekNumber = /** @class */ function(_super) {\n    __extends(WeekNumber, _super);\n    function WeekNumber() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.weekNumberEl = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        _this.handleClick = function(event) {\n            if (_this.props.onClick) {\n                _this.props.onClick(event);\n            }\n        };\n        _this.handleOnKeyDown = function(event) {\n            var _a, _b;\n            var eventKey = event.key;\n            if (eventKey === KeyType.Space) {\n                event.preventDefault();\n                event.key = KeyType.Enter;\n            }\n            (_b = (_a = _this.props).handleOnKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n        };\n        _this.isKeyboardSelected = function() {\n            return !_this.props.disabledKeyboardNavigation && !isSameDay(_this.props.date, _this.props.selected) && isSameDay(_this.props.date, _this.props.preSelection);\n        };\n        _this.getTabIndex = function() {\n            return _this.props.showWeekPicker && _this.props.showWeekNumber && (_this.isKeyboardSelected() || isSameDay(_this.props.date, _this.props.selected) && isSameDay(_this.props.preSelection, _this.props.selected)) ? 0 : -1;\n        };\n        // various cases when we need to apply focus to the preselected week-number\n        // focus the week-number on mount/update so that keyboard navigation works while cycling through months with up or down keys (not for prev and next month buttons)\n        // prevent focus for these activeElement cases so we don't pull focus from the input as the calendar opens\n        _this.handleFocusWeekNumber = function(prevProps) {\n            var shouldFocusWeekNumber = false;\n            // only do this while the input isn't focused\n            // otherwise, typing/backspacing the date manually may steal focus away from the input\n            if (_this.getTabIndex() === 0 && !(prevProps === null || prevProps === void 0 ? void 0 : prevProps.isInputFocused) && isSameDay(_this.props.date, _this.props.preSelection)) {\n                // there is currently no activeElement and not inline\n                if (!document.activeElement || document.activeElement === document.body) {\n                    shouldFocusWeekNumber = true;\n                }\n                // inline version:\n                // do not focus on initial render to prevent autoFocus issue\n                // focus after month has changed via keyboard\n                if (_this.props.inline && !_this.props.shouldFocusDayInline) {\n                    shouldFocusWeekNumber = false;\n                }\n                // the activeElement is in the container, and it is another instance of WeekNumber\n                if (_this.props.containerRef && _this.props.containerRef.current && _this.props.containerRef.current.contains(document.activeElement) && document.activeElement && document.activeElement.classList.contains(\"react-datepicker__week-number\")) {\n                    shouldFocusWeekNumber = true;\n                }\n            }\n            shouldFocusWeekNumber && _this.weekNumberEl.current && _this.weekNumberEl.current.focus({\n                preventScroll: true\n            });\n        };\n        return _this;\n    }\n    Object.defineProperty(WeekNumber, \"defaultProps\", {\n        get: function() {\n            return {\n                ariaLabelPrefix: \"week \"\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    WeekNumber.prototype.componentDidMount = function() {\n        this.handleFocusWeekNumber();\n    };\n    WeekNumber.prototype.componentDidUpdate = function(prevProps) {\n        this.handleFocusWeekNumber(prevProps);\n    };\n    WeekNumber.prototype.render = function() {\n        var _a = this.props, weekNumber = _a.weekNumber, isWeekDisabled = _a.isWeekDisabled, _b = _a.ariaLabelPrefix, ariaLabelPrefix = _b === void 0 ? WeekNumber.defaultProps.ariaLabelPrefix : _b, onClick = _a.onClick;\n        var weekNumberClasses = {\n            \"react-datepicker__week-number\": true,\n            \"react-datepicker__week-number--clickable\": !!onClick && !isWeekDisabled,\n            \"react-datepicker__week-number--selected\": !!onClick && isSameDay(this.props.date, this.props.selected)\n        };\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            ref: this.weekNumberEl,\n            className: (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(weekNumberClasses),\n            \"aria-label\": \"\".concat(ariaLabelPrefix, \" \").concat(this.props.weekNumber),\n            onClick: this.handleClick,\n            onKeyDown: this.handleOnKeyDown,\n            tabIndex: this.getTabIndex()\n        }, weekNumber);\n    };\n    return WeekNumber;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\nvar Week = /** @class */ function(_super) {\n    __extends(Week, _super);\n    function Week() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.isDisabled = function(day) {\n            return isDayDisabled(day, {\n                minDate: _this.props.minDate,\n                maxDate: _this.props.maxDate,\n                excludeDates: _this.props.excludeDates,\n                excludeDateIntervals: _this.props.excludeDateIntervals,\n                includeDateIntervals: _this.props.includeDateIntervals,\n                includeDates: _this.props.includeDates,\n                filterDate: _this.props.filterDate\n            });\n        };\n        _this.handleDayClick = function(day, event) {\n            if (_this.props.onDayClick) {\n                _this.props.onDayClick(day, event);\n            }\n        };\n        _this.handleDayMouseEnter = function(day) {\n            if (_this.props.onDayMouseEnter) {\n                _this.props.onDayMouseEnter(day);\n            }\n        };\n        _this.handleWeekClick = function(day, weekNumber, event) {\n            var _a, _b, _c;\n            var enabledWeekDay = new Date(day);\n            for(var i = 0; i < 7; i++){\n                var processingDay = new Date(day);\n                processingDay.setDate(processingDay.getDate() + i);\n                var isEnabled = !_this.isDisabled(processingDay);\n                if (isEnabled) {\n                    enabledWeekDay = processingDay;\n                    break;\n                }\n            }\n            if (typeof _this.props.onWeekSelect === \"function\") {\n                _this.props.onWeekSelect(enabledWeekDay, weekNumber, event);\n            }\n            if (_this.props.showWeekPicker) {\n                _this.handleDayClick(enabledWeekDay, event);\n            }\n            if ((_a = _this.props.shouldCloseOnSelect) !== null && _a !== void 0 ? _a : Week.defaultProps.shouldCloseOnSelect) {\n                (_c = (_b = _this.props).setOpen) === null || _c === void 0 ? void 0 : _c.call(_b, false);\n            }\n        };\n        _this.formatWeekNumber = function(date) {\n            if (_this.props.formatWeekNumber) {\n                return _this.props.formatWeekNumber(date);\n            }\n            return getWeek(date);\n        };\n        _this.isWeekDisabled = function() {\n            var startOfWeek = _this.startOfWeek();\n            var endOfWeek = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_55__.addDays)(startOfWeek, 6);\n            var processingDate = new Date(startOfWeek);\n            while(processingDate <= endOfWeek){\n                if (!_this.isDisabled(processingDate)) return false;\n                processingDate = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_55__.addDays)(processingDate, 1);\n            }\n            return true;\n        };\n        _this.renderDays = function() {\n            var startOfWeek = _this.startOfWeek();\n            var days = [];\n            var weekNumber = _this.formatWeekNumber(startOfWeek);\n            if (_this.props.showWeekNumber) {\n                var onClickAction = _this.props.onWeekSelect || _this.props.showWeekPicker ? _this.handleWeekClick.bind(_this, startOfWeek, weekNumber) : undefined;\n                days.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(WeekNumber, _assign({\n                    key: \"W\"\n                }, Week.defaultProps, _this.props, {\n                    weekNumber: weekNumber,\n                    isWeekDisabled: _this.isWeekDisabled(),\n                    date: startOfWeek,\n                    onClick: onClickAction\n                })));\n            }\n            return days.concat([\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6\n            ].map(function(offset) {\n                var day = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_55__.addDays)(startOfWeek, offset);\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Day, _assign({}, Week.defaultProps, _this.props, {\n                    ariaLabelPrefixWhenEnabled: _this.props.chooseDayAriaLabelPrefix,\n                    ariaLabelPrefixWhenDisabled: _this.props.disabledDayAriaLabelPrefix,\n                    key: day.valueOf(),\n                    day: day,\n                    onClick: _this.handleDayClick.bind(_this, day),\n                    onMouseEnter: _this.handleDayMouseEnter.bind(_this, day)\n                }));\n            }));\n        };\n        _this.startOfWeek = function() {\n            return getStartOfWeek(_this.props.day, _this.props.locale, _this.props.calendarStartDay);\n        };\n        _this.isKeyboardSelected = function() {\n            return !_this.props.disabledKeyboardNavigation && !isSameDay(_this.startOfWeek(), _this.props.selected) && isSameDay(_this.startOfWeek(), _this.props.preSelection);\n        };\n        return _this;\n    }\n    Object.defineProperty(Week, \"defaultProps\", {\n        get: function() {\n            return {\n                shouldCloseOnSelect: true\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Week.prototype.render = function() {\n        var weekNumberClasses = {\n            \"react-datepicker__week\": true,\n            \"react-datepicker__week--selected\": isSameDay(this.startOfWeek(), this.props.selected),\n            \"react-datepicker__week--keyboard-selected\": this.isKeyboardSelected()\n        };\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(weekNumberClasses)\n        }, this.renderDays());\n    };\n    return Week;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\nvar _a;\nvar FIXED_HEIGHT_STANDARD_WEEK_COUNT = 6;\nvar MONTH_COLUMNS_LAYOUT = {\n    TWO_COLUMNS: \"two_columns\",\n    THREE_COLUMNS: \"three_columns\",\n    FOUR_COLUMNS: \"four_columns\"\n};\nvar MONTH_COLUMNS = (_a = {}, _a[MONTH_COLUMNS_LAYOUT.TWO_COLUMNS] = {\n    grid: [\n        [\n            0,\n            1\n        ],\n        [\n            2,\n            3\n        ],\n        [\n            4,\n            5\n        ],\n        [\n            6,\n            7\n        ],\n        [\n            8,\n            9\n        ],\n        [\n            10,\n            11\n        ]\n    ],\n    verticalNavigationOffset: 2\n}, _a[MONTH_COLUMNS_LAYOUT.THREE_COLUMNS] = {\n    grid: [\n        [\n            0,\n            1,\n            2\n        ],\n        [\n            3,\n            4,\n            5\n        ],\n        [\n            6,\n            7,\n            8\n        ],\n        [\n            9,\n            10,\n            11\n        ]\n    ],\n    verticalNavigationOffset: 3\n}, _a[MONTH_COLUMNS_LAYOUT.FOUR_COLUMNS] = {\n    grid: [\n        [\n            0,\n            1,\n            2,\n            3\n        ],\n        [\n            4,\n            5,\n            6,\n            7\n        ],\n        [\n            8,\n            9,\n            10,\n            11\n        ]\n    ],\n    verticalNavigationOffset: 4\n}, _a);\nvar MONTH_NAVIGATION_HORIZONTAL_OFFSET = 1;\nfunction getMonthColumnsLayout(showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker) {\n    if (showFourColumnMonthYearPicker) {\n        return MONTH_COLUMNS_LAYOUT.FOUR_COLUMNS;\n    }\n    if (showTwoColumnMonthYearPicker) {\n        return MONTH_COLUMNS_LAYOUT.TWO_COLUMNS;\n    }\n    return MONTH_COLUMNS_LAYOUT.THREE_COLUMNS;\n}\n/**\n * `Month` is a React component that represents a month in a calendar.\n * It accepts a `MonthProps` object as props which provides various configurations and event handlers.\n *\n * @prop dayClassName - Function to determine the class name for a day.\n * @prop monthClassName - Function to determine the class name for a month.\n * @prop filterDate - Function to filter dates.\n * @prop formatWeekNumber - Function to format the week number.\n * @prop onDayClick - Function to handle day click events.\n * @prop onDayMouseEnter - Function to handle mouse enter events on a day.\n * @prop onMouseLeave - Function to handle mouse leave events.\n * @prop onWeekSelect - Function to handle week selection.\n * @prop setPreSelection - Function to set pre-selection.\n * @prop setOpen - Function to set open state.\n * @prop renderDayContents - Function to render day contents.\n * @prop renderMonthContent - Function to render month content.\n * @prop renderQuarterContent - Function to render quarter content.\n * @prop handleOnKeyDown - Function to handle key down events.\n * @prop handleOnMonthKeyDown - Function to handle key down events on a month.\n * @prop ariaLabelPrefix - Aria label prefix.\n * @prop chooseDayAriaLabelPrefix - Aria label prefix for choosing a day.\n * @prop disabledDayAriaLabelPrefix - Aria label prefix for disabled day.\n * @prop disabledKeyboardNavigation - Flag to disable keyboard navigation.\n * @prop day - The day.\n * @prop endDate - The end date.\n * @prop orderInDisplay - The order in display.\n * @prop excludeDates - Dates to exclude.\n * @prop excludeDateIntervals - Date intervals to exclude.\n * @prop fixedHeight - Flag to set fixed height.\n * @prop highlightDates - Dates to highlight.\n * @prop holidays - Holidays.\n * @prop includeDates - Dates to include.\n * @prop includeDateIntervals - Date intervals to include.\n * @prop inline - Flag to set inline.\n * @prop shouldFocusDayInline - Flag to set focus on day inline.\n * @prop locale - The locale.\n * @prop maxDate - The maximum date.\n * @prop minDate - The minimum date.\n * @prop usePointerEvent - Flag to use pointer event.\n * @prop peekNextMonth - Flag to peek next month.\n * @prop preSelection - The pre-selection.\n * @prop selected - The selected date.\n * @prop selectingDate - The selecting date.\n * @prop calendarStartDay - The calendar start day.\n * @prop selectsEnd - Flag to select end.\n * @prop selectsStart - Flag to select start.\n * @prop selectsRange - Flag to select range.\n * @prop selectsDisabledDaysInRange - Flag to select disabled days in range.\n * @prop selectsMultiple - Flag to select multiple.\n * @prop selectedDates - The selected dates.\n * @prop showWeekNumbers - Flag to show week numbers.\n * @prop startDate - The start date.\n * @prop shouldCloseOnSelect - Flag to close on select.\n * @prop showMonthYearPicker - Flag to show month year picker.\n * @prop showFullMonthYearPicker - Flag to show full month year picker.\n * @prop showTwoColumnMonthYearPicker - Flag to show two column month year picker.\n * @prop showFourColumnMonthYearPicker - Flag to show four column month year picker.\n * @prop showQuarterYearPicker - Flag to show quarter year picker.\n * @prop showWeekPicker - Flag to show week picker.\n * @prop isInputFocused - Flag to set input focus.\n * @prop weekAriaLabelPrefix - Aria label prefix for week.\n * @prop containerRef - The container reference.\n * @prop monthShowsDuplicateDaysEnd - Flag to show duplicate days at the end of the month.\n * @prop monthShowsDuplicateDaysStart - Flag to show duplicate days at the start of the month.\n *\n * @example\n * ```tsx\n * function App() {\n *  const handleDayClick = (date) => {\n *     console.log('Day clicked: ', date);\n *   };\n *\n *   const handleDayMouseEnter = (date) => {\n *     console.log('Mouse entered on day: ', date);\n *   };\n *\n *   return (\n *     <div>\n *       <Month\n *         day={new Date()}\n *         endDate={new Date()}\n *         onDayClick={handleDayClick}\n *         onDayMouseEnter={handleDayMouseEnter}\n *         disabledKeyboardNavigation={false}\n *         showWeekNumbers={true}\n *         showMonthYearPicker={false}\n *       />\n *     </div>\n *   );\n * }\n * ```\n */ var Month = /** @class */ function(_super) {\n    __extends(Month, _super);\n    function Month() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.MONTH_REFS = __spreadArray([], Array(12), true).map(function() {\n            return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        });\n        _this.QUARTER_REFS = __spreadArray([], Array(4), true).map(function() {\n            return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        });\n        _this.isDisabled = function(day) {\n            // Almost all props previously were passed as this.props w/o proper typing with prop-types\n            // after the migration to TS i made it explicit\n            return isDayDisabled(day, {\n                minDate: _this.props.minDate,\n                maxDate: _this.props.maxDate,\n                excludeDates: _this.props.excludeDates,\n                excludeDateIntervals: _this.props.excludeDateIntervals,\n                includeDateIntervals: _this.props.includeDateIntervals,\n                includeDates: _this.props.includeDates,\n                filterDate: _this.props.filterDate\n            });\n        };\n        _this.isExcluded = function(day) {\n            // Almost all props previously were passed as this.props w/o proper typing with prop-types\n            // after the migration to TS i made it explicit\n            return isDayExcluded(day, {\n                excludeDates: _this.props.excludeDates,\n                excludeDateIntervals: _this.props.excludeDateIntervals\n            });\n        };\n        _this.handleDayClick = function(day, event) {\n            var _a, _b;\n            (_b = (_a = _this.props).onDayClick) === null || _b === void 0 ? void 0 : _b.call(_a, day, event, _this.props.orderInDisplay);\n        };\n        _this.handleDayMouseEnter = function(day) {\n            var _a, _b;\n            (_b = (_a = _this.props).onDayMouseEnter) === null || _b === void 0 ? void 0 : _b.call(_a, day);\n        };\n        _this.handleMouseLeave = function() {\n            var _a, _b;\n            (_b = (_a = _this.props).onMouseLeave) === null || _b === void 0 ? void 0 : _b.call(_a);\n        };\n        _this.isRangeStartMonth = function(m) {\n            var _a = _this.props, day = _a.day, startDate = _a.startDate, endDate = _a.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isSameMonth((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_27__.setMonth)(day, m), startDate);\n        };\n        _this.isRangeStartQuarter = function(q) {\n            var _a = _this.props, day = _a.day, startDate = _a.startDate, endDate = _a.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isSameQuarter((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_28__.setQuarter)(day, q), startDate);\n        };\n        _this.isRangeEndMonth = function(m) {\n            var _a = _this.props, day = _a.day, startDate = _a.startDate, endDate = _a.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isSameMonth((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_27__.setMonth)(day, m), endDate);\n        };\n        _this.isRangeEndQuarter = function(q) {\n            var _a = _this.props, day = _a.day, startDate = _a.startDate, endDate = _a.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isSameQuarter((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_28__.setQuarter)(day, q), endDate);\n        };\n        _this.isInSelectingRangeMonth = function(m) {\n            var _a;\n            var _b = _this.props, day = _b.day, selectsStart = _b.selectsStart, selectsEnd = _b.selectsEnd, selectsRange = _b.selectsRange, startDate = _b.startDate, endDate = _b.endDate;\n            var selectingDate = (_a = _this.props.selectingDate) !== null && _a !== void 0 ? _a : _this.props.preSelection;\n            if (!(selectsStart || selectsEnd || selectsRange) || !selectingDate) {\n                return false;\n            }\n            if (selectsStart && endDate) {\n                return isMonthInRange(selectingDate, endDate, m, day);\n            }\n            if (selectsEnd && startDate) {\n                return isMonthInRange(startDate, selectingDate, m, day);\n            }\n            if (selectsRange && startDate && !endDate) {\n                return isMonthInRange(startDate, selectingDate, m, day);\n            }\n            return false;\n        };\n        _this.isSelectingMonthRangeStart = function(m) {\n            var _a;\n            if (!_this.isInSelectingRangeMonth(m)) {\n                return false;\n            }\n            var _b = _this.props, day = _b.day, startDate = _b.startDate, selectsStart = _b.selectsStart;\n            var _month = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_27__.setMonth)(day, m);\n            var selectingDate = (_a = _this.props.selectingDate) !== null && _a !== void 0 ? _a : _this.props.preSelection;\n            if (selectsStart) {\n                return isSameMonth(_month, selectingDate);\n            } else {\n                return isSameMonth(_month, startDate);\n            }\n        };\n        _this.isSelectingMonthRangeEnd = function(m) {\n            var _a;\n            if (!_this.isInSelectingRangeMonth(m)) {\n                return false;\n            }\n            var _b = _this.props, day = _b.day, endDate = _b.endDate, selectsEnd = _b.selectsEnd, selectsRange = _b.selectsRange;\n            var _month = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_27__.setMonth)(day, m);\n            var selectingDate = (_a = _this.props.selectingDate) !== null && _a !== void 0 ? _a : _this.props.preSelection;\n            if (selectsEnd || selectsRange) {\n                return isSameMonth(_month, selectingDate);\n            } else {\n                return isSameMonth(_month, endDate);\n            }\n        };\n        _this.isInSelectingRangeQuarter = function(q) {\n            var _a;\n            var _b = _this.props, day = _b.day, selectsStart = _b.selectsStart, selectsEnd = _b.selectsEnd, selectsRange = _b.selectsRange, startDate = _b.startDate, endDate = _b.endDate;\n            var selectingDate = (_a = _this.props.selectingDate) !== null && _a !== void 0 ? _a : _this.props.preSelection;\n            if (!(selectsStart || selectsEnd || selectsRange) || !selectingDate) {\n                return false;\n            }\n            if (selectsStart && endDate) {\n                return isQuarterInRange(selectingDate, endDate, q, day);\n            }\n            if (selectsEnd && startDate) {\n                return isQuarterInRange(startDate, selectingDate, q, day);\n            }\n            if (selectsRange && startDate && !endDate) {\n                return isQuarterInRange(startDate, selectingDate, q, day);\n            }\n            return false;\n        };\n        _this.isWeekInMonth = function(startOfWeek) {\n            var day = _this.props.day;\n            var endOfWeek = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_55__.addDays)(startOfWeek, 6);\n            return isSameMonth(startOfWeek, day) || isSameMonth(endOfWeek, day);\n        };\n        _this.isCurrentMonth = function(day, m) {\n            return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(day) === (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(newDate()) && m === (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_30__.getMonth)(newDate());\n        };\n        _this.isCurrentQuarter = function(day, q) {\n            return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(day) === (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(newDate()) && q === (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_32__.getQuarter)(newDate());\n        };\n        _this.isSelectedMonth = function(day, m, selected) {\n            return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_30__.getMonth)(selected) === m && (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(day) === (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(selected);\n        };\n        _this.isSelectMonthInList = function(day, m, selectedDates) {\n            return selectedDates.some(function(selectedDate) {\n                return _this.isSelectedMonth(day, m, selectedDate);\n            });\n        };\n        _this.isSelectedQuarter = function(day, q, selected) {\n            return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_32__.getQuarter)(day) === q && (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(day) === (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(selected);\n        };\n        _this.isMonthSelected = function() {\n            var _a = _this.props, day = _a.day, selected = _a.selected, selectedDates = _a.selectedDates, selectsMultiple = _a.selectsMultiple;\n            var monthIdx = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_30__.getMonth)(day);\n            if (selectsMultiple) {\n                return selectedDates === null || selectedDates === void 0 ? void 0 : selectedDates.some(function(date) {\n                    return _this.isSelectedMonth(day, monthIdx, date);\n                });\n            }\n            return !!selected && _this.isSelectedMonth(day, monthIdx, selected);\n        };\n        _this.renderWeeks = function() {\n            var weeks = [];\n            var isFixedHeight = _this.props.fixedHeight;\n            var i = 0;\n            var breakAfterNextPush = false;\n            var currentWeekStart = getStartOfWeek(getStartOfMonth(_this.props.day), _this.props.locale, _this.props.calendarStartDay);\n            var isPreSelected = function(preSelection) {\n                return _this.props.showWeekPicker ? getStartOfWeek(preSelection, _this.props.locale, _this.props.calendarStartDay) : _this.props.preSelection;\n            };\n            var isSelected = function(selected) {\n                return _this.props.showWeekPicker ? getStartOfWeek(selected, _this.props.locale, _this.props.calendarStartDay) : _this.props.selected;\n            };\n            var selected = _this.props.selected ? isSelected(_this.props.selected) : undefined;\n            var preSelection = _this.props.preSelection ? isPreSelected(_this.props.preSelection) : undefined;\n            while(true){\n                weeks.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Week, _assign({}, _this.props, {\n                    ariaLabelPrefix: _this.props.weekAriaLabelPrefix,\n                    key: i,\n                    day: currentWeekStart,\n                    month: (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_30__.getMonth)(_this.props.day),\n                    onDayClick: _this.handleDayClick,\n                    onDayMouseEnter: _this.handleDayMouseEnter,\n                    selected: selected,\n                    preSelection: preSelection,\n                    showWeekNumber: _this.props.showWeekNumbers\n                })));\n                if (breakAfterNextPush) break;\n                i++;\n                currentWeekStart = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_56__.addWeeks)(currentWeekStart, 1);\n                // If one of these conditions is true, we will either break on this week\n                // or break on the next week\n                var isFixedAndFinalWeek = isFixedHeight && i >= FIXED_HEIGHT_STANDARD_WEEK_COUNT;\n                var isNonFixedAndOutOfMonth = !isFixedHeight && !_this.isWeekInMonth(currentWeekStart);\n                if (isFixedAndFinalWeek || isNonFixedAndOutOfMonth) {\n                    if (_this.props.peekNextMonth) {\n                        breakAfterNextPush = true;\n                    } else {\n                        break;\n                    }\n                }\n            }\n            return weeks;\n        };\n        _this.onMonthClick = function(event, m) {\n            var _a = _this.isMonthDisabledForLabelDate(m), isDisabled = _a.isDisabled, labelDate = _a.labelDate;\n            if (isDisabled) {\n                return;\n            }\n            _this.handleDayClick(getStartOfMonth(labelDate), event);\n        };\n        _this.onMonthMouseEnter = function(m) {\n            var _a = _this.isMonthDisabledForLabelDate(m), isDisabled = _a.isDisabled, labelDate = _a.labelDate;\n            if (isDisabled) {\n                return;\n            }\n            _this.handleDayMouseEnter(getStartOfMonth(labelDate));\n        };\n        _this.handleMonthNavigation = function(newMonth, newDate) {\n            var _a, _b, _c, _d;\n            (_b = (_a = _this.props).setPreSelection) === null || _b === void 0 ? void 0 : _b.call(_a, newDate);\n            (_d = (_c = _this.MONTH_REFS[newMonth]) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.focus();\n        };\n        _this.handleKeyboardNavigation = function(event, eventKey, month) {\n            var _a;\n            var _b = _this.props, selected = _b.selected, preSelection = _b.preSelection, setPreSelection = _b.setPreSelection, minDate = _b.minDate, maxDate = _b.maxDate, showFourColumnMonthYearPicker = _b.showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker = _b.showTwoColumnMonthYearPicker;\n            if (!preSelection) return;\n            var monthColumnsLayout = getMonthColumnsLayout(showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker);\n            var verticalOffset = _this.getVerticalOffset(monthColumnsLayout);\n            var monthsGrid = (_a = MONTH_COLUMNS[monthColumnsLayout]) === null || _a === void 0 ? void 0 : _a.grid;\n            var calculateNewDateAndMonth = function(eventKey, date, month) {\n                var _a, _b;\n                var newCalculatedDate = date;\n                var newCalculatedMonth = month;\n                switch(eventKey){\n                    case KeyType.ArrowRight:\n                        newCalculatedDate = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_39__.addMonths)(date, MONTH_NAVIGATION_HORIZONTAL_OFFSET);\n                        newCalculatedMonth = month === 11 ? 0 : month + MONTH_NAVIGATION_HORIZONTAL_OFFSET;\n                        break;\n                    case KeyType.ArrowLeft:\n                        newCalculatedDate = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_37__.subMonths)(date, MONTH_NAVIGATION_HORIZONTAL_OFFSET);\n                        newCalculatedMonth = month === 0 ? 11 : month - MONTH_NAVIGATION_HORIZONTAL_OFFSET;\n                        break;\n                    case KeyType.ArrowUp:\n                        newCalculatedDate = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_37__.subMonths)(date, verticalOffset);\n                        newCalculatedMonth = ((_a = monthsGrid === null || monthsGrid === void 0 ? void 0 : monthsGrid[0]) === null || _a === void 0 ? void 0 : _a.includes(month)) ? month + 12 - verticalOffset : month - verticalOffset;\n                        break;\n                    case KeyType.ArrowDown:\n                        newCalculatedDate = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_39__.addMonths)(date, verticalOffset);\n                        newCalculatedMonth = ((_b = monthsGrid === null || monthsGrid === void 0 ? void 0 : monthsGrid[monthsGrid.length - 1]) === null || _b === void 0 ? void 0 : _b.includes(month)) ? month - 12 + verticalOffset : month + verticalOffset;\n                        break;\n                }\n                return {\n                    newCalculatedDate: newCalculatedDate,\n                    newCalculatedMonth: newCalculatedMonth\n                };\n            };\n            var getNewDateAndMonth = function(eventKey, selectedDate, month) {\n                var MAX_ITERATIONS = 40;\n                var eventKeyCopy = eventKey;\n                var validDateFound = false;\n                var iterations = 0;\n                var _a = calculateNewDateAndMonth(eventKeyCopy, selectedDate, month), newCalculatedDate = _a.newCalculatedDate, newCalculatedMonth = _a.newCalculatedMonth;\n                while(!validDateFound){\n                    if (iterations >= MAX_ITERATIONS) {\n                        newCalculatedDate = selectedDate;\n                        newCalculatedMonth = month;\n                        break;\n                    }\n                    // if minDate exists and the new month is before the minimum month, it will try to find the next available month after\n                    if (minDate && newCalculatedDate < minDate) {\n                        eventKeyCopy = KeyType.ArrowRight;\n                        var obj = calculateNewDateAndMonth(eventKeyCopy, newCalculatedDate, newCalculatedMonth);\n                        newCalculatedDate = obj.newCalculatedDate;\n                        newCalculatedMonth = obj.newCalculatedMonth;\n                    }\n                    // if maxDate exists and the new month is after the maximum month, it will try to find the next available month before\n                    if (maxDate && newCalculatedDate > maxDate) {\n                        eventKeyCopy = KeyType.ArrowLeft;\n                        var obj = calculateNewDateAndMonth(eventKeyCopy, newCalculatedDate, newCalculatedMonth);\n                        newCalculatedDate = obj.newCalculatedDate;\n                        newCalculatedMonth = obj.newCalculatedMonth;\n                    }\n                    if (isMonthYearDisabled(newCalculatedDate, _this.props)) {\n                        var obj = calculateNewDateAndMonth(eventKeyCopy, newCalculatedDate, newCalculatedMonth);\n                        newCalculatedDate = obj.newCalculatedDate;\n                        newCalculatedMonth = obj.newCalculatedMonth;\n                    } else {\n                        validDateFound = true;\n                    }\n                    iterations++;\n                }\n                return {\n                    newCalculatedDate: newCalculatedDate,\n                    newCalculatedMonth: newCalculatedMonth\n                };\n            };\n            if (eventKey === KeyType.Enter) {\n                if (!_this.isMonthDisabled(month)) {\n                    _this.onMonthClick(event, month);\n                    setPreSelection === null || setPreSelection === void 0 ? void 0 : setPreSelection(selected);\n                }\n                return;\n            }\n            var _c = getNewDateAndMonth(eventKey, preSelection, month), newCalculatedDate = _c.newCalculatedDate, newCalculatedMonth = _c.newCalculatedMonth;\n            switch(eventKey){\n                case KeyType.ArrowRight:\n                case KeyType.ArrowLeft:\n                case KeyType.ArrowUp:\n                case KeyType.ArrowDown:\n                    _this.handleMonthNavigation(newCalculatedMonth, newCalculatedDate);\n                    break;\n            }\n        };\n        _this.getVerticalOffset = function(monthColumnsLayout) {\n            var _a, _b;\n            return (_b = (_a = MONTH_COLUMNS[monthColumnsLayout]) === null || _a === void 0 ? void 0 : _a.verticalNavigationOffset) !== null && _b !== void 0 ? _b : 0;\n        };\n        _this.onMonthKeyDown = function(event, month) {\n            var _a = _this.props, disabledKeyboardNavigation = _a.disabledKeyboardNavigation, handleOnMonthKeyDown = _a.handleOnMonthKeyDown;\n            var eventKey = event.key;\n            if (eventKey !== KeyType.Tab) {\n                // preventDefault on tab event blocks focus change\n                event.preventDefault();\n            }\n            if (!disabledKeyboardNavigation) {\n                _this.handleKeyboardNavigation(event, eventKey, month);\n            }\n            handleOnMonthKeyDown && handleOnMonthKeyDown(event);\n        };\n        _this.onQuarterClick = function(event, q) {\n            var labelDate = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_28__.setQuarter)(_this.props.day, q);\n            if (isQuarterDisabled(labelDate, _this.props)) {\n                return;\n            }\n            _this.handleDayClick(getStartOfQuarter(labelDate), event);\n        };\n        _this.onQuarterMouseEnter = function(q) {\n            var labelDate = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_28__.setQuarter)(_this.props.day, q);\n            if (isQuarterDisabled(labelDate, _this.props)) {\n                return;\n            }\n            _this.handleDayMouseEnter(getStartOfQuarter(labelDate));\n        };\n        _this.handleQuarterNavigation = function(newQuarter, newDate) {\n            var _a, _b, _c, _d;\n            if (_this.isDisabled(newDate) || _this.isExcluded(newDate)) {\n                return;\n            }\n            (_b = (_a = _this.props).setPreSelection) === null || _b === void 0 ? void 0 : _b.call(_a, newDate);\n            (_d = (_c = _this.QUARTER_REFS[newQuarter - 1]) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.focus();\n        };\n        _this.onQuarterKeyDown = function(event, quarter) {\n            var _a, _b;\n            var eventKey = event.key;\n            if (!_this.props.disabledKeyboardNavigation) {\n                switch(eventKey){\n                    case KeyType.Enter:\n                        _this.onQuarterClick(event, quarter);\n                        (_b = (_a = _this.props).setPreSelection) === null || _b === void 0 ? void 0 : _b.call(_a, _this.props.selected);\n                        break;\n                    case KeyType.ArrowRight:\n                        if (!_this.props.preSelection) {\n                            break;\n                        }\n                        _this.handleQuarterNavigation(quarter === 4 ? 1 : quarter + 1, (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_42__.addQuarters)(_this.props.preSelection, 1));\n                        break;\n                    case KeyType.ArrowLeft:\n                        if (!_this.props.preSelection) {\n                            break;\n                        }\n                        _this.handleQuarterNavigation(quarter === 1 ? 4 : quarter - 1, (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_40__.subQuarters)(_this.props.preSelection, 1));\n                        break;\n                }\n            }\n        };\n        _this.isMonthDisabledForLabelDate = function(month) {\n            var _a;\n            var _b = _this.props, day = _b.day, minDate = _b.minDate, maxDate = _b.maxDate, excludeDates = _b.excludeDates, includeDates = _b.includeDates;\n            var labelDate = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_27__.setMonth)(day, month);\n            return {\n                isDisabled: (_a = (minDate || maxDate || excludeDates || includeDates) && isMonthDisabled(labelDate, _this.props)) !== null && _a !== void 0 ? _a : false,\n                labelDate: labelDate\n            };\n        };\n        _this.isMonthDisabled = function(month) {\n            var isDisabled = _this.isMonthDisabledForLabelDate(month).isDisabled;\n            return isDisabled;\n        };\n        _this.getMonthClassNames = function(m) {\n            var _a = _this.props, day = _a.day, startDate = _a.startDate, endDate = _a.endDate, preSelection = _a.preSelection, monthClassName = _a.monthClassName;\n            var _monthClassName = monthClassName ? monthClassName((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_27__.setMonth)(day, m)) : undefined;\n            var selection = _this.getSelection();\n            return (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker__month-text\", \"react-datepicker__month-\".concat(m), _monthClassName, {\n                \"react-datepicker__month-text--disabled\": _this.isMonthDisabled(m),\n                \"react-datepicker__month-text--selected\": selection ? _this.isSelectMonthInList(day, m, selection) : undefined,\n                \"react-datepicker__month-text--keyboard-selected\": !_this.props.disabledKeyboardNavigation && preSelection && _this.isSelectedMonth(day, m, preSelection) && !_this.isMonthSelected() && !_this.isMonthDisabled(m),\n                \"react-datepicker__month-text--in-selecting-range\": _this.isInSelectingRangeMonth(m),\n                \"react-datepicker__month-text--in-range\": startDate && endDate ? isMonthInRange(startDate, endDate, m, day) : undefined,\n                \"react-datepicker__month-text--range-start\": _this.isRangeStartMonth(m),\n                \"react-datepicker__month-text--range-end\": _this.isRangeEndMonth(m),\n                \"react-datepicker__month-text--selecting-range-start\": _this.isSelectingMonthRangeStart(m),\n                \"react-datepicker__month-text--selecting-range-end\": _this.isSelectingMonthRangeEnd(m),\n                \"react-datepicker__month-text--today\": _this.isCurrentMonth(day, m)\n            });\n        };\n        _this.getTabIndex = function(m) {\n            if (_this.props.preSelection == null) {\n                return \"-1\";\n            }\n            var preSelectedMonth = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_30__.getMonth)(_this.props.preSelection);\n            var isPreSelectedMonthDisabled = _this.isMonthDisabledForLabelDate(preSelectedMonth).isDisabled;\n            var tabIndex = m === preSelectedMonth && !(isPreSelectedMonthDisabled || _this.props.disabledKeyboardNavigation) ? \"0\" : \"-1\";\n            return tabIndex;\n        };\n        _this.getQuarterTabIndex = function(q) {\n            if (_this.props.preSelection == null) {\n                return \"-1\";\n            }\n            var preSelectedQuarter = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_32__.getQuarter)(_this.props.preSelection);\n            var isCurrentQuarterDisabled = isQuarterDisabled(_this.props.day, _this.props);\n            var tabIndex = q === preSelectedQuarter && !(isCurrentQuarterDisabled || _this.props.disabledKeyboardNavigation) ? \"0\" : \"-1\";\n            return tabIndex;\n        };\n        _this.getAriaLabel = function(month) {\n            var _a = _this.props, _b = _a.chooseDayAriaLabelPrefix, chooseDayAriaLabelPrefix = _b === void 0 ? \"Choose\" : _b, _c = _a.disabledDayAriaLabelPrefix, disabledDayAriaLabelPrefix = _c === void 0 ? \"Not available\" : _c, day = _a.day, locale = _a.locale;\n            var labelDate = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_27__.setMonth)(day, month);\n            var prefix = _this.isDisabled(labelDate) || _this.isExcluded(labelDate) ? disabledDayAriaLabelPrefix : chooseDayAriaLabelPrefix;\n            return \"\".concat(prefix, \" \").concat(formatDate(labelDate, \"MMMM yyyy\", locale));\n        };\n        _this.getQuarterClassNames = function(q) {\n            var _a = _this.props, day = _a.day, startDate = _a.startDate, endDate = _a.endDate, selected = _a.selected, minDate = _a.minDate, maxDate = _a.maxDate, excludeDates = _a.excludeDates, includeDates = _a.includeDates, filterDate = _a.filterDate, preSelection = _a.preSelection, disabledKeyboardNavigation = _a.disabledKeyboardNavigation;\n            var isDisabled = (minDate || maxDate || excludeDates || includeDates || filterDate) && isQuarterDisabled((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_28__.setQuarter)(day, q), _this.props);\n            return (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker__quarter-text\", \"react-datepicker__quarter-\".concat(q), {\n                \"react-datepicker__quarter-text--disabled\": isDisabled,\n                \"react-datepicker__quarter-text--selected\": selected ? _this.isSelectedQuarter(day, q, selected) : undefined,\n                \"react-datepicker__quarter-text--keyboard-selected\": !disabledKeyboardNavigation && preSelection && _this.isSelectedQuarter(day, q, preSelection) && !isDisabled,\n                \"react-datepicker__quarter-text--in-selecting-range\": _this.isInSelectingRangeQuarter(q),\n                \"react-datepicker__quarter-text--in-range\": startDate && endDate ? isQuarterInRange(startDate, endDate, q, day) : undefined,\n                \"react-datepicker__quarter-text--range-start\": _this.isRangeStartQuarter(q),\n                \"react-datepicker__quarter-text--range-end\": _this.isRangeEndQuarter(q),\n                \"react-datepicker__quarter-text--today\": _this.isCurrentQuarter(day, q)\n            });\n        };\n        _this.getMonthContent = function(m) {\n            var _a = _this.props, showFullMonthYearPicker = _a.showFullMonthYearPicker, renderMonthContent = _a.renderMonthContent, locale = _a.locale, day = _a.day;\n            var shortMonthText = getMonthShortInLocale(m, locale);\n            var fullMonthText = getMonthInLocale(m, locale);\n            if (renderMonthContent) {\n                return renderMonthContent(m, shortMonthText, fullMonthText, day);\n            }\n            return showFullMonthYearPicker ? fullMonthText : shortMonthText;\n        };\n        _this.getQuarterContent = function(q) {\n            var _a;\n            var _b = _this.props, renderQuarterContent = _b.renderQuarterContent, locale = _b.locale;\n            var shortQuarter = getQuarterShortInLocale(q, locale);\n            return (_a = renderQuarterContent === null || renderQuarterContent === void 0 ? void 0 : renderQuarterContent(q, shortQuarter)) !== null && _a !== void 0 ? _a : shortQuarter;\n        };\n        _this.renderMonths = function() {\n            var _a;\n            var _b = _this.props, showTwoColumnMonthYearPicker = _b.showTwoColumnMonthYearPicker, showFourColumnMonthYearPicker = _b.showFourColumnMonthYearPicker, day = _b.day, selected = _b.selected;\n            var monthColumns = (_a = MONTH_COLUMNS[getMonthColumnsLayout(showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker)]) === null || _a === void 0 ? void 0 : _a.grid;\n            return monthColumns === null || monthColumns === void 0 ? void 0 : monthColumns.map(function(month, i) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__month-wrapper\",\n                    key: i\n                }, month.map(function(m, j) {\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                        ref: _this.MONTH_REFS[m],\n                        key: j,\n                        onClick: function(event) {\n                            _this.onMonthClick(event, m);\n                        },\n                        onKeyDown: function(event) {\n                            if (isSpaceKeyDown(event)) {\n                                event.preventDefault();\n                                event.key = KeyType.Enter;\n                            }\n                            _this.onMonthKeyDown(event, m);\n                        },\n                        onMouseEnter: !_this.props.usePointerEvent ? function() {\n                            return _this.onMonthMouseEnter(m);\n                        } : undefined,\n                        onPointerEnter: _this.props.usePointerEvent ? function() {\n                            return _this.onMonthMouseEnter(m);\n                        } : undefined,\n                        tabIndex: Number(_this.getTabIndex(m)),\n                        className: _this.getMonthClassNames(m),\n                        \"aria-disabled\": _this.isMonthDisabled(m),\n                        role: \"option\",\n                        \"aria-label\": _this.getAriaLabel(m),\n                        \"aria-current\": _this.isCurrentMonth(day, m) ? \"date\" : undefined,\n                        \"aria-selected\": selected ? _this.isSelectedMonth(day, m, selected) : undefined\n                    }, _this.getMonthContent(m));\n                }));\n            });\n        };\n        _this.renderQuarters = function() {\n            var _a = _this.props, day = _a.day, selected = _a.selected;\n            var quarters = [\n                1,\n                2,\n                3,\n                4\n            ];\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__quarter-wrapper\"\n            }, quarters.map(function(q, j) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    key: j,\n                    ref: _this.QUARTER_REFS[j],\n                    role: \"option\",\n                    onClick: function(event) {\n                        _this.onQuarterClick(event, q);\n                    },\n                    onKeyDown: function(event) {\n                        _this.onQuarterKeyDown(event, q);\n                    },\n                    onMouseEnter: !_this.props.usePointerEvent ? function() {\n                        return _this.onQuarterMouseEnter(q);\n                    } : undefined,\n                    onPointerEnter: _this.props.usePointerEvent ? function() {\n                        return _this.onQuarterMouseEnter(q);\n                    } : undefined,\n                    className: _this.getQuarterClassNames(q),\n                    \"aria-selected\": selected ? _this.isSelectedQuarter(day, q, selected) : undefined,\n                    tabIndex: Number(_this.getQuarterTabIndex(q)),\n                    \"aria-current\": _this.isCurrentQuarter(day, q) ? \"date\" : undefined\n                }, _this.getQuarterContent(q));\n            }));\n        };\n        _this.getClassNames = function() {\n            var _a = _this.props, selectingDate = _a.selectingDate, selectsStart = _a.selectsStart, selectsEnd = _a.selectsEnd, showMonthYearPicker = _a.showMonthYearPicker, showQuarterYearPicker = _a.showQuarterYearPicker, showWeekPicker = _a.showWeekPicker;\n            return (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker__month\", {\n                \"react-datepicker__month--selecting-range\": selectingDate && (selectsStart || selectsEnd)\n            }, {\n                \"react-datepicker__monthPicker\": showMonthYearPicker\n            }, {\n                \"react-datepicker__quarterPicker\": showQuarterYearPicker\n            }, {\n                \"react-datepicker__weekPicker\": showWeekPicker\n            });\n        };\n        return _this;\n    }\n    Month.prototype.getSelection = function() {\n        var _a = this.props, selected = _a.selected, selectedDates = _a.selectedDates, selectsMultiple = _a.selectsMultiple;\n        if (selectsMultiple) {\n            return selectedDates;\n        }\n        if (selected) {\n            return [\n                selected\n            ];\n        }\n        return undefined;\n    };\n    Month.prototype.render = function() {\n        var _a = this.props, showMonthYearPicker = _a.showMonthYearPicker, showQuarterYearPicker = _a.showQuarterYearPicker, day = _a.day, _b = _a.ariaLabelPrefix, ariaLabelPrefix = _b === void 0 ? \"Month \" : _b;\n        var formattedAriaLabelPrefix = ariaLabelPrefix ? ariaLabelPrefix.trim() + \" \" : \"\";\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: this.getClassNames(),\n            onMouseLeave: !this.props.usePointerEvent ? this.handleMouseLeave : undefined,\n            onPointerLeave: this.props.usePointerEvent ? this.handleMouseLeave : undefined,\n            \"aria-label\": \"\".concat(formattedAriaLabelPrefix).concat(formatDate(day, \"MMMM, yyyy\", this.props.locale)),\n            role: \"listbox\"\n        }, showMonthYearPicker ? this.renderMonths() : showQuarterYearPicker ? this.renderQuarters() : this.renderWeeks());\n    };\n    return Month;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\nvar MonthDropdownOptions = /** @class */ function(_super) {\n    __extends(MonthDropdownOptions, _super);\n    function MonthDropdownOptions() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.isSelectedMonth = function(i) {\n            return _this.props.month === i;\n        };\n        _this.renderOptions = function() {\n            return _this.props.monthNames.map(function(month, i) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: _this.isSelectedMonth(i) ? \"react-datepicker__month-option react-datepicker__month-option--selected_month\" : \"react-datepicker__month-option\",\n                    key: month,\n                    onClick: _this.onChange.bind(_this, i),\n                    \"aria-selected\": _this.isSelectedMonth(i) ? \"true\" : undefined\n                }, _this.isSelectedMonth(i) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                    className: \"react-datepicker__month-option--selected\"\n                }, \"✓\") : \"\", month);\n            });\n        };\n        _this.onChange = function(month) {\n            return _this.props.onChange(month);\n        };\n        _this.handleClickOutside = function() {\n            return _this.props.onCancel();\n        };\n        return _this;\n    }\n    MonthDropdownOptions.prototype.render = function() {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(ClickOutsideWrapper, {\n            className: \"react-datepicker__month-dropdown\",\n            onClickOutside: this.handleClickOutside\n        }, this.renderOptions());\n    };\n    return MonthDropdownOptions;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\nvar MonthDropdown = /** @class */ function(_super) {\n    __extends(MonthDropdown, _super);\n    function MonthDropdown() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            dropdownVisible: false\n        };\n        _this.renderSelectOptions = function(monthNames) {\n            return monthNames.map(function(m, i) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"option\", {\n                    key: m,\n                    value: i\n                }, m);\n            });\n        };\n        _this.renderSelectMode = function(monthNames) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"select\", {\n                value: _this.props.month,\n                className: \"react-datepicker__month-select\",\n                onChange: function(e) {\n                    return _this.onChange(parseInt(e.target.value));\n                }\n            }, _this.renderSelectOptions(monthNames));\n        };\n        _this.renderReadView = function(visible, monthNames) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                key: \"read\",\n                style: {\n                    visibility: visible ? \"visible\" : \"hidden\"\n                },\n                className: \"react-datepicker__month-read-view\",\n                onClick: _this.toggleDropdown\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                className: \"react-datepicker__month-read-view--down-arrow\"\n            }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                className: \"react-datepicker__month-read-view--selected-month\"\n            }, monthNames[_this.props.month]));\n        };\n        _this.renderDropdown = function(monthNames) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(MonthDropdownOptions, _assign({\n                key: \"dropdown\"\n            }, _this.props, {\n                monthNames: monthNames,\n                onChange: _this.onChange,\n                onCancel: _this.toggleDropdown\n            }));\n        };\n        _this.renderScrollMode = function(monthNames) {\n            var dropdownVisible = _this.state.dropdownVisible;\n            var result = [\n                _this.renderReadView(!dropdownVisible, monthNames)\n            ];\n            if (dropdownVisible) {\n                result.unshift(_this.renderDropdown(monthNames));\n            }\n            return result;\n        };\n        _this.onChange = function(month) {\n            _this.toggleDropdown();\n            if (month !== _this.props.month) {\n                _this.props.onChange(month);\n            }\n        };\n        _this.toggleDropdown = function() {\n            return _this.setState({\n                dropdownVisible: !_this.state.dropdownVisible\n            });\n        };\n        return _this;\n    }\n    MonthDropdown.prototype.render = function() {\n        var _this = this;\n        var monthNames = [\n            0,\n            1,\n            2,\n            3,\n            4,\n            5,\n            6,\n            7,\n            8,\n            9,\n            10,\n            11\n        ].map(this.props.useShortMonthInDropdown ? function(m) {\n            return getMonthShortInLocale(m, _this.props.locale);\n        } : function(m) {\n            return getMonthInLocale(m, _this.props.locale);\n        });\n        var renderedDropdown;\n        switch(this.props.dropdownMode){\n            case \"scroll\":\n                renderedDropdown = this.renderScrollMode(monthNames);\n                break;\n            case \"select\":\n                renderedDropdown = this.renderSelectMode(monthNames);\n                break;\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"react-datepicker__month-dropdown-container react-datepicker__month-dropdown-container--\".concat(this.props.dropdownMode)\n        }, renderedDropdown);\n    };\n    return MonthDropdown;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\nfunction generateMonthYears(minDate, maxDate) {\n    var list = [];\n    var currDate = getStartOfMonth(minDate);\n    var lastDate = getStartOfMonth(maxDate);\n    while(!(0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_52__.isAfter)(currDate, lastDate)){\n        list.push(newDate(currDate));\n        currDate = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_39__.addMonths)(currDate, 1);\n    }\n    return list;\n}\nvar MonthYearDropdownOptions = /** @class */ function(_super) {\n    __extends(MonthYearDropdownOptions, _super);\n    function MonthYearDropdownOptions(props) {\n        var _this = _super.call(this, props) || this;\n        _this.renderOptions = function() {\n            return _this.state.monthYearsList.map(function(monthYear) {\n                var monthYearPoint = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_57__.getTime)(monthYear);\n                var isSameMonthYear = isSameYear(_this.props.date, monthYear) && isSameMonth(_this.props.date, monthYear);\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: isSameMonthYear ? \"react-datepicker__month-year-option--selected_month-year\" : \"react-datepicker__month-year-option\",\n                    key: monthYearPoint,\n                    onClick: _this.onChange.bind(_this, monthYearPoint),\n                    \"aria-selected\": isSameMonthYear ? \"true\" : undefined\n                }, isSameMonthYear ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                    className: \"react-datepicker__month-year-option--selected\"\n                }, \"✓\") : \"\", formatDate(monthYear, _this.props.dateFormat, _this.props.locale));\n            });\n        };\n        _this.onChange = function(monthYear) {\n            return _this.props.onChange(monthYear);\n        };\n        _this.handleClickOutside = function() {\n            _this.props.onCancel();\n        };\n        _this.state = {\n            monthYearsList: generateMonthYears(_this.props.minDate, _this.props.maxDate)\n        };\n        return _this;\n    }\n    MonthYearDropdownOptions.prototype.render = function() {\n        var dropdownClass = (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)({\n            \"react-datepicker__month-year-dropdown\": true,\n            \"react-datepicker__month-year-dropdown--scrollable\": this.props.scrollableMonthYearDropdown\n        });\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(ClickOutsideWrapper, {\n            className: dropdownClass,\n            onClickOutside: this.handleClickOutside\n        }, this.renderOptions());\n    };\n    return MonthYearDropdownOptions;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\nvar MonthYearDropdown = /** @class */ function(_super) {\n    __extends(MonthYearDropdown, _super);\n    function MonthYearDropdown() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            dropdownVisible: false\n        };\n        _this.renderSelectOptions = function() {\n            var currDate = getStartOfMonth(_this.props.minDate);\n            var lastDate = getStartOfMonth(_this.props.maxDate);\n            var options = [];\n            while(!(0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_52__.isAfter)(currDate, lastDate)){\n                var timePoint = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_57__.getTime)(currDate);\n                options.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"option\", {\n                    key: timePoint,\n                    value: timePoint\n                }, formatDate(currDate, _this.props.dateFormat, _this.props.locale)));\n                currDate = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_39__.addMonths)(currDate, 1);\n            }\n            return options;\n        };\n        _this.onSelectChange = function(event) {\n            _this.onChange(parseInt(event.target.value));\n        };\n        _this.renderSelectMode = function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"select\", {\n                value: (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_57__.getTime)(getStartOfMonth(_this.props.date)),\n                className: \"react-datepicker__month-year-select\",\n                onChange: _this.onSelectChange\n            }, _this.renderSelectOptions());\n        };\n        _this.renderReadView = function(visible) {\n            var yearMonth = formatDate(_this.props.date, _this.props.dateFormat, _this.props.locale);\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                key: \"read\",\n                style: {\n                    visibility: visible ? \"visible\" : \"hidden\"\n                },\n                className: \"react-datepicker__month-year-read-view\",\n                onClick: _this.toggleDropdown\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                className: \"react-datepicker__month-year-read-view--down-arrow\"\n            }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                className: \"react-datepicker__month-year-read-view--selected-month-year\"\n            }, yearMonth));\n        };\n        _this.renderDropdown = function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(MonthYearDropdownOptions, _assign({\n                key: \"dropdown\"\n            }, _this.props, {\n                onChange: _this.onChange,\n                onCancel: _this.toggleDropdown\n            }));\n        };\n        _this.renderScrollMode = function() {\n            var dropdownVisible = _this.state.dropdownVisible;\n            var result = [\n                _this.renderReadView(!dropdownVisible)\n            ];\n            if (dropdownVisible) {\n                result.unshift(_this.renderDropdown());\n            }\n            return result;\n        };\n        _this.onChange = function(monthYearPoint) {\n            _this.toggleDropdown();\n            var changedDate = newDate(monthYearPoint);\n            if (isSameYear(_this.props.date, changedDate) && isSameMonth(_this.props.date, changedDate)) {\n                return;\n            }\n            _this.props.onChange(changedDate);\n        };\n        _this.toggleDropdown = function() {\n            return _this.setState({\n                dropdownVisible: !_this.state.dropdownVisible\n            });\n        };\n        return _this;\n    }\n    MonthYearDropdown.prototype.render = function() {\n        var renderedDropdown;\n        switch(this.props.dropdownMode){\n            case \"scroll\":\n                renderedDropdown = this.renderScrollMode();\n                break;\n            case \"select\":\n                renderedDropdown = this.renderSelectMode();\n                break;\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"react-datepicker__month-year-dropdown-container react-datepicker__month-year-dropdown-container--\".concat(this.props.dropdownMode)\n        }, renderedDropdown);\n    };\n    return MonthYearDropdown;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\nvar Time = /** @class */ function(_super) {\n    __extends(Time, _super);\n    function Time() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            height: null\n        };\n        _this.scrollToTheSelectedTime = function() {\n            requestAnimationFrame(function() {\n                var _a, _b, _c;\n                if (!_this.list) return;\n                _this.list.scrollTop = (_c = _this.centerLi && Time.calcCenterPosition(_this.props.monthRef ? _this.props.monthRef.clientHeight - ((_b = (_a = _this.header) === null || _a === void 0 ? void 0 : _a.clientHeight) !== null && _b !== void 0 ? _b : 0) : _this.list.clientHeight, _this.centerLi)) !== null && _c !== void 0 ? _c : 0;\n            });\n        };\n        _this.handleClick = function(time) {\n            var _a, _b;\n            if ((_this.props.minTime || _this.props.maxTime) && isTimeInDisabledRange(time, _this.props) || (_this.props.excludeTimes || _this.props.includeTimes || _this.props.filterTime) && isTimeDisabled(time, _this.props)) {\n                return;\n            }\n            (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, time);\n        };\n        _this.isSelectedTime = function(time) {\n            return _this.props.selected && isSameMinute(_this.props.selected, time);\n        };\n        _this.isDisabledTime = function(time) {\n            return (_this.props.minTime || _this.props.maxTime) && isTimeInDisabledRange(time, _this.props) || (_this.props.excludeTimes || _this.props.includeTimes || _this.props.filterTime) && isTimeDisabled(time, _this.props);\n        };\n        _this.liClasses = function(time) {\n            var _a;\n            var classes = [\n                \"react-datepicker__time-list-item\",\n                _this.props.timeClassName ? _this.props.timeClassName(time) : undefined\n            ];\n            if (_this.isSelectedTime(time)) {\n                classes.push(\"react-datepicker__time-list-item--selected\");\n            }\n            if (_this.isDisabledTime(time)) {\n                classes.push(\"react-datepicker__time-list-item--disabled\");\n            }\n            //convert this.props.intervals and the relevant time to seconds and check if it it's a clean multiple of the interval\n            if (_this.props.injectTimes && ((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_34__.getHours)(time) * 3600 + (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_35__.getMinutes)(time) * 60 + (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_36__.getSeconds)(time)) % (((_a = _this.props.intervals) !== null && _a !== void 0 ? _a : Time.defaultProps.intervals) * 60) !== 0) {\n                classes.push(\"react-datepicker__time-list-item--injected\");\n            }\n            return classes.join(\" \");\n        };\n        _this.handleOnKeyDown = function(event, time) {\n            var _a, _b;\n            if (event.key === KeyType.Space) {\n                event.preventDefault();\n                event.key = KeyType.Enter;\n            }\n            if ((event.key === KeyType.ArrowUp || event.key === KeyType.ArrowLeft) && event.target instanceof HTMLElement && event.target.previousSibling) {\n                event.preventDefault();\n                event.target.previousSibling instanceof HTMLElement && event.target.previousSibling.focus();\n            }\n            if ((event.key === KeyType.ArrowDown || event.key === KeyType.ArrowRight) && event.target instanceof HTMLElement && event.target.nextSibling) {\n                event.preventDefault();\n                event.target.nextSibling instanceof HTMLElement && event.target.nextSibling.focus();\n            }\n            if (event.key === KeyType.Enter) {\n                _this.handleClick(time);\n            }\n            (_b = (_a = _this.props).handleOnKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n        };\n        _this.renderTimes = function() {\n            var _a;\n            var times = [];\n            var format = typeof _this.props.format === \"string\" ? _this.props.format : \"p\";\n            var intervals = (_a = _this.props.intervals) !== null && _a !== void 0 ? _a : Time.defaultProps.intervals;\n            var activeDate = _this.props.selected || _this.props.openToDate || newDate();\n            var base = getStartOfDay(activeDate);\n            var sortedInjectTimes = _this.props.injectTimes && _this.props.injectTimes.sort(function(a, b) {\n                return a.getTime() - b.getTime();\n            });\n            var minutesInDay = 60 * getHoursInDay(activeDate);\n            var multiplier = minutesInDay / intervals;\n            for(var i = 0; i < multiplier; i++){\n                var currentTime = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_50__.addMinutes)(base, i * intervals);\n                times.push(currentTime);\n                if (sortedInjectTimes) {\n                    var timesToInject = timesToInjectAfter(base, currentTime, i, intervals, sortedInjectTimes);\n                    times = times.concat(timesToInject);\n                }\n            }\n            // Determine which time to focus and scroll into view when component mounts\n            var timeToFocus = times.reduce(function(prev, time) {\n                if (time.getTime() <= activeDate.getTime()) {\n                    return time;\n                }\n                return prev;\n            }, times[0]);\n            return times.map(function(time) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"li\", {\n                    key: time.valueOf(),\n                    onClick: _this.handleClick.bind(_this, time),\n                    className: _this.liClasses(time),\n                    ref: function(li) {\n                        if (time === timeToFocus) {\n                            _this.centerLi = li;\n                        }\n                    },\n                    onKeyDown: function(event) {\n                        _this.handleOnKeyDown(event, time);\n                    },\n                    tabIndex: time === timeToFocus ? 0 : -1,\n                    role: \"option\",\n                    \"aria-selected\": _this.isSelectedTime(time) ? \"true\" : undefined,\n                    \"aria-disabled\": _this.isDisabledTime(time) ? \"true\" : undefined\n                }, formatDate(time, format, _this.props.locale));\n            });\n        };\n        _this.renderTimeCaption = function() {\n            if (_this.props.showTimeCaption === false) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null);\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__header react-datepicker__header--time \".concat(_this.props.showTimeSelectOnly ? \"react-datepicker__header--time--only\" : \"\"),\n                ref: function(header) {\n                    _this.header = header;\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker-time__header\"\n            }, _this.props.timeCaption));\n        };\n        return _this;\n    }\n    Object.defineProperty(Time, \"defaultProps\", {\n        get: function() {\n            return {\n                intervals: 30,\n                todayButton: null,\n                timeCaption: \"Time\",\n                showTimeCaption: true\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Time.prototype.componentDidMount = function() {\n        // code to ensure selected time will always be in focus within time window when it first appears\n        this.scrollToTheSelectedTime();\n        this.observeDatePickerHeightChanges();\n    };\n    Time.prototype.componentWillUnmount = function() {\n        var _a;\n        (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n    };\n    Time.prototype.observeDatePickerHeightChanges = function() {\n        var _this = this;\n        var monthRef = this.props.monthRef;\n        this.updateContainerHeight();\n        if (monthRef) {\n            this.resizeObserver = new ResizeObserver(function() {\n                _this.updateContainerHeight();\n            });\n            this.resizeObserver.observe(monthRef);\n        }\n    };\n    Time.prototype.updateContainerHeight = function() {\n        if (this.props.monthRef && this.header) {\n            this.setState({\n                height: this.props.monthRef.clientHeight - this.header.clientHeight\n            });\n        }\n    };\n    Time.prototype.render = function() {\n        var _this = this;\n        var _a;\n        var height = this.state.height;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"react-datepicker__time-container \".concat(((_a = this.props.todayButton) !== null && _a !== void 0 ? _a : Time.defaultProps.todayButton) ? \"react-datepicker__time-container--with-today-button\" : \"\")\n        }, this.renderTimeCaption(), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"react-datepicker__time\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"react-datepicker__time-box\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"ul\", {\n            className: \"react-datepicker__time-list\",\n            ref: function(list) {\n                _this.list = list;\n            },\n            style: height ? {\n                height: height\n            } : {},\n            role: \"listbox\",\n            \"aria-label\": this.props.timeCaption\n        }, this.renderTimes()))));\n    };\n    Time.calcCenterPosition = function(listHeight, centerLiRef) {\n        return centerLiRef.offsetTop - (listHeight / 2 - centerLiRef.clientHeight / 2);\n    };\n    return Time;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\nvar VERTICAL_NAVIGATION_OFFSET = 3;\n/**\n * `Year` is a component that represents a year in a date picker.\n *\n * @class\n * @param {YearProps} props - The properties that define the `Year` component.\n * @property {VoidFunction} [props.clearSelectingDate] - Function to clear the selected date.\n * @property {Date} [props.date] - The currently selected date.\n * @property {boolean} [props.disabledKeyboardNavigation] - If true, keyboard navigation is disabled.\n * @property {Date} [props.endDate] - The end date in a range selection.\n * @property {(date: Date) => void} props.onDayClick - Function to handle day click events.\n * @property {Date} props.preSelection - The date that is currently in focus.\n * @property {(date: Date) => void} props.setPreSelection - Function to set the pre-selected date.\n * @property {{ [key: string]: any }} props.selected - The selected date(s).\n * @property {boolean} props.inline - If true, the date picker is displayed inline.\n * @property {Date} props.maxDate - The maximum selectable date.\n * @property {Date} props.minDate - The minimum selectable date.\n * @property {boolean} props.usePointerEvent - If true, pointer events are used instead of mouse events.\n * @property {(date: Date) => void} props.onYearMouseEnter - Function to handle mouse enter events on a year.\n * @property {(date: Date) => void} props.onYearMouseLeave - Function to handle mouse leave events on a year.\n */ var Year = /** @class */ function(_super) {\n    __extends(Year, _super);\n    function Year(props) {\n        var _this = _super.call(this, props) || this;\n        _this.YEAR_REFS = __spreadArray([], Array(_this.props.yearItemNumber), true).map(function() {\n            return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        });\n        _this.isDisabled = function(date) {\n            return isDayDisabled(date, {\n                minDate: _this.props.minDate,\n                maxDate: _this.props.maxDate,\n                excludeDates: _this.props.excludeDates,\n                includeDates: _this.props.includeDates,\n                filterDate: _this.props.filterDate\n            });\n        };\n        _this.isExcluded = function(date) {\n            return isDayExcluded(date, {\n                excludeDates: _this.props.excludeDates\n            });\n        };\n        _this.selectingDate = function() {\n            var _a;\n            return (_a = _this.props.selectingDate) !== null && _a !== void 0 ? _a : _this.props.preSelection;\n        };\n        _this.updateFocusOnPaginate = function(refIndex) {\n            var waitForReRender = function() {\n                var _a, _b;\n                (_b = (_a = _this.YEAR_REFS[refIndex]) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.focus();\n            };\n            window.requestAnimationFrame(waitForReRender);\n        };\n        _this.handleYearClick = function(day, event) {\n            if (_this.props.onDayClick) {\n                _this.props.onDayClick(day, event);\n            }\n        };\n        _this.handleYearNavigation = function(newYear, newDate) {\n            var _a, _b, _c, _d;\n            var _e = _this.props, date = _e.date, yearItemNumber = _e.yearItemNumber;\n            if (date === undefined || yearItemNumber === undefined) {\n                return;\n            }\n            var startPeriod = getYearsPeriod(date, yearItemNumber).startPeriod;\n            if (_this.isDisabled(newDate) || _this.isExcluded(newDate)) {\n                return;\n            }\n            (_b = (_a = _this.props).setPreSelection) === null || _b === void 0 ? void 0 : _b.call(_a, newDate);\n            if (newYear - startPeriod < 0) {\n                _this.updateFocusOnPaginate(yearItemNumber - (startPeriod - newYear));\n            } else if (newYear - startPeriod >= yearItemNumber) {\n                _this.updateFocusOnPaginate(Math.abs(yearItemNumber - (newYear - startPeriod)));\n            } else (_d = (_c = _this.YEAR_REFS[newYear - startPeriod]) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.focus();\n        };\n        _this.isSameDay = function(y, other) {\n            return isSameDay(y, other);\n        };\n        _this.isCurrentYear = function(y) {\n            return y === (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(newDate());\n        };\n        _this.isRangeStart = function(y) {\n            return _this.props.startDate && _this.props.endDate && isSameYear((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_58__.setYear)(newDate(), y), _this.props.startDate);\n        };\n        _this.isRangeEnd = function(y) {\n            return _this.props.startDate && _this.props.endDate && isSameYear((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_58__.setYear)(newDate(), y), _this.props.endDate);\n        };\n        _this.isInRange = function(y) {\n            return isYearInRange(y, _this.props.startDate, _this.props.endDate);\n        };\n        _this.isInSelectingRange = function(y) {\n            var _a = _this.props, selectsStart = _a.selectsStart, selectsEnd = _a.selectsEnd, selectsRange = _a.selectsRange, startDate = _a.startDate, endDate = _a.endDate;\n            if (!(selectsStart || selectsEnd || selectsRange) || !_this.selectingDate()) {\n                return false;\n            }\n            if (selectsStart && endDate) {\n                return isYearInRange(y, _this.selectingDate(), endDate);\n            }\n            if (selectsEnd && startDate) {\n                return isYearInRange(y, startDate, _this.selectingDate());\n            }\n            if (selectsRange && startDate && !endDate) {\n                return isYearInRange(y, startDate, _this.selectingDate());\n            }\n            return false;\n        };\n        _this.isSelectingRangeStart = function(y) {\n            var _a;\n            if (!_this.isInSelectingRange(y)) {\n                return false;\n            }\n            var _b = _this.props, startDate = _b.startDate, selectsStart = _b.selectsStart;\n            var _year = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_58__.setYear)(newDate(), y);\n            if (selectsStart) {\n                return isSameYear(_year, (_a = _this.selectingDate()) !== null && _a !== void 0 ? _a : null);\n            }\n            return isSameYear(_year, startDate !== null && startDate !== void 0 ? startDate : null);\n        };\n        _this.isSelectingRangeEnd = function(y) {\n            var _a;\n            if (!_this.isInSelectingRange(y)) {\n                return false;\n            }\n            var _b = _this.props, endDate = _b.endDate, selectsEnd = _b.selectsEnd, selectsRange = _b.selectsRange;\n            var _year = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_58__.setYear)(newDate(), y);\n            if (selectsEnd || selectsRange) {\n                return isSameYear(_year, (_a = _this.selectingDate()) !== null && _a !== void 0 ? _a : null);\n            }\n            return isSameYear(_year, endDate !== null && endDate !== void 0 ? endDate : null);\n        };\n        _this.isKeyboardSelected = function(y) {\n            if (_this.props.date === undefined || _this.props.selected == null || _this.props.preSelection == null) {\n                return;\n            }\n            var _a = _this.props, minDate = _a.minDate, maxDate = _a.maxDate, excludeDates = _a.excludeDates, includeDates = _a.includeDates, filterDate = _a.filterDate;\n            var date = getStartOfYear((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_58__.setYear)(_this.props.date, y));\n            var isDisabled = (minDate || maxDate || excludeDates || includeDates || filterDate) && isYearDisabled(y, _this.props);\n            return !_this.props.disabledKeyboardNavigation && !_this.props.inline && !isSameDay(date, getStartOfYear(_this.props.selected)) && isSameDay(date, getStartOfYear(_this.props.preSelection)) && !isDisabled;\n        };\n        _this.isSelectedYear = function(year) {\n            var _a = _this.props, selectsMultiple = _a.selectsMultiple, selected = _a.selected, selectedDates = _a.selectedDates;\n            if (selectsMultiple) {\n                return selectedDates === null || selectedDates === void 0 ? void 0 : selectedDates.some(function(date) {\n                    return year === (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(date);\n                });\n            }\n            return !!selected && year === (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(selected);\n        };\n        _this.onYearClick = function(event, y) {\n            var date = _this.props.date;\n            if (date === undefined) {\n                return;\n            }\n            _this.handleYearClick(getStartOfYear((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_58__.setYear)(date, y)), event);\n        };\n        _this.onYearKeyDown = function(event, y) {\n            var _a, _b;\n            var key = event.key;\n            var _c = _this.props, date = _c.date, yearItemNumber = _c.yearItemNumber, handleOnKeyDown = _c.handleOnKeyDown;\n            if (key !== KeyType.Tab) {\n                // preventDefault on tab event blocks focus change\n                event.preventDefault();\n            }\n            if (!_this.props.disabledKeyboardNavigation) {\n                switch(key){\n                    case KeyType.Enter:\n                        if (_this.props.selected == null) {\n                            break;\n                        }\n                        _this.onYearClick(event, y);\n                        (_b = (_a = _this.props).setPreSelection) === null || _b === void 0 ? void 0 : _b.call(_a, _this.props.selected);\n                        break;\n                    case KeyType.ArrowRight:\n                        if (_this.props.preSelection == null) {\n                            break;\n                        }\n                        _this.handleYearNavigation(y + 1, (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_45__.addYears)(_this.props.preSelection, 1));\n                        break;\n                    case KeyType.ArrowLeft:\n                        if (_this.props.preSelection == null) {\n                            break;\n                        }\n                        _this.handleYearNavigation(y - 1, (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_43__.subYears)(_this.props.preSelection, 1));\n                        break;\n                    case KeyType.ArrowUp:\n                        {\n                            if (date === undefined || yearItemNumber === undefined || _this.props.preSelection == null) {\n                                break;\n                            }\n                            var startPeriod = getYearsPeriod(date, yearItemNumber).startPeriod;\n                            var offset = VERTICAL_NAVIGATION_OFFSET;\n                            var newYear = y - offset;\n                            if (newYear < startPeriod) {\n                                var leftOverOffset = yearItemNumber % offset;\n                                if (y >= startPeriod && y < startPeriod + leftOverOffset) {\n                                    offset = leftOverOffset;\n                                } else {\n                                    offset += leftOverOffset;\n                                }\n                                newYear = y - offset;\n                            }\n                            _this.handleYearNavigation(newYear, (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_43__.subYears)(_this.props.preSelection, offset));\n                            break;\n                        }\n                    case KeyType.ArrowDown:\n                        {\n                            if (date === undefined || yearItemNumber === undefined || _this.props.preSelection == null) {\n                                break;\n                            }\n                            var endPeriod = getYearsPeriod(date, yearItemNumber).endPeriod;\n                            var offset = VERTICAL_NAVIGATION_OFFSET;\n                            var newYear = y + offset;\n                            if (newYear > endPeriod) {\n                                var leftOverOffset = yearItemNumber % offset;\n                                if (y <= endPeriod && y > endPeriod - leftOverOffset) {\n                                    offset = leftOverOffset;\n                                } else {\n                                    offset += leftOverOffset;\n                                }\n                                newYear = y + offset;\n                            }\n                            _this.handleYearNavigation(newYear, (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_45__.addYears)(_this.props.preSelection, offset));\n                            break;\n                        }\n                }\n            }\n            handleOnKeyDown && handleOnKeyDown(event);\n        };\n        _this.getYearClassNames = function(y) {\n            var _a = _this.props, date = _a.date, minDate = _a.minDate, maxDate = _a.maxDate, excludeDates = _a.excludeDates, includeDates = _a.includeDates, filterDate = _a.filterDate, yearClassName = _a.yearClassName;\n            return (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker__year-text\", \"react-datepicker__year-\".concat(y), date ? yearClassName === null || yearClassName === void 0 ? void 0 : yearClassName((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_58__.setYear)(date, y)) : undefined, {\n                \"react-datepicker__year-text--selected\": _this.isSelectedYear(y),\n                \"react-datepicker__year-text--disabled\": (minDate || maxDate || excludeDates || includeDates || filterDate) && isYearDisabled(y, _this.props),\n                \"react-datepicker__year-text--keyboard-selected\": _this.isKeyboardSelected(y),\n                \"react-datepicker__year-text--range-start\": _this.isRangeStart(y),\n                \"react-datepicker__year-text--range-end\": _this.isRangeEnd(y),\n                \"react-datepicker__year-text--in-range\": _this.isInRange(y),\n                \"react-datepicker__year-text--in-selecting-range\": _this.isInSelectingRange(y),\n                \"react-datepicker__year-text--selecting-range-start\": _this.isSelectingRangeStart(y),\n                \"react-datepicker__year-text--selecting-range-end\": _this.isSelectingRangeEnd(y),\n                \"react-datepicker__year-text--today\": _this.isCurrentYear(y)\n            });\n        };\n        _this.getYearTabIndex = function(y) {\n            if (_this.props.disabledKeyboardNavigation || _this.props.preSelection == null) {\n                return \"-1\";\n            }\n            var preSelected = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(_this.props.preSelection);\n            var isPreSelectedYearDisabled = isYearDisabled(y, _this.props);\n            return y === preSelected && !isPreSelectedYearDisabled ? \"0\" : \"-1\";\n        };\n        _this.getYearContent = function(y) {\n            return _this.props.renderYearContent ? _this.props.renderYearContent(y) : y;\n        };\n        return _this;\n    }\n    Year.prototype.render = function() {\n        var _this = this;\n        var yearsList = [];\n        var _a = this.props, date = _a.date, yearItemNumber = _a.yearItemNumber, onYearMouseEnter = _a.onYearMouseEnter, onYearMouseLeave = _a.onYearMouseLeave;\n        if (date === undefined) {\n            return null;\n        }\n        var _b = getYearsPeriod(date, yearItemNumber), startPeriod = _b.startPeriod, endPeriod = _b.endPeriod;\n        var _loop_1 = function(y) {\n            yearsList.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                ref: this_1.YEAR_REFS[y - startPeriod],\n                onClick: function(event) {\n                    _this.onYearClick(event, y);\n                },\n                onKeyDown: function(event) {\n                    if (isSpaceKeyDown(event)) {\n                        event.preventDefault();\n                        event.key = KeyType.Enter;\n                    }\n                    _this.onYearKeyDown(event, y);\n                },\n                tabIndex: Number(this_1.getYearTabIndex(y)),\n                className: this_1.getYearClassNames(y),\n                onMouseEnter: !this_1.props.usePointerEvent ? function(event) {\n                    return onYearMouseEnter(event, y);\n                } : undefined,\n                onPointerEnter: this_1.props.usePointerEvent ? function(event) {\n                    return onYearMouseEnter(event, y);\n                } : undefined,\n                onMouseLeave: !this_1.props.usePointerEvent ? function(event) {\n                    return onYearMouseLeave(event, y);\n                } : undefined,\n                onPointerLeave: this_1.props.usePointerEvent ? function(event) {\n                    return onYearMouseLeave(event, y);\n                } : undefined,\n                key: y,\n                \"aria-current\": this_1.isCurrentYear(y) ? \"date\" : undefined\n            }, this_1.getYearContent(y)));\n        };\n        var this_1 = this;\n        for(var y = startPeriod; y <= endPeriod; y++){\n            _loop_1(y);\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"react-datepicker__year\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"react-datepicker__year-wrapper\",\n            onMouseLeave: !this.props.usePointerEvent ? this.props.clearSelectingDate : undefined,\n            onPointerLeave: this.props.usePointerEvent ? this.props.clearSelectingDate : undefined\n        }, yearsList));\n    };\n    return Year;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\nfunction generateYears(year, noOfYear, minDate, maxDate) {\n    var list = [];\n    for(var i = 0; i < 2 * noOfYear + 1; i++){\n        var newYear = year + noOfYear - i;\n        var isInRange = true;\n        if (minDate) {\n            isInRange = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(minDate) <= newYear;\n        }\n        if (maxDate && isInRange) {\n            isInRange = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(maxDate) >= newYear;\n        }\n        if (isInRange) {\n            list.push(newYear);\n        }\n    }\n    return list;\n}\nvar YearDropdownOptions = /** @class */ function(_super) {\n    __extends(YearDropdownOptions, _super);\n    function YearDropdownOptions(props) {\n        var _this = _super.call(this, props) || this;\n        _this.renderOptions = function() {\n            var selectedYear = _this.props.year;\n            var options = _this.state.yearsList.map(function(year) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: selectedYear === year ? \"react-datepicker__year-option react-datepicker__year-option--selected_year\" : \"react-datepicker__year-option\",\n                    key: year,\n                    onClick: _this.onChange.bind(_this, year),\n                    \"aria-selected\": selectedYear === year ? \"true\" : undefined\n                }, selectedYear === year ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                    className: \"react-datepicker__year-option--selected\"\n                }, \"✓\") : \"\", year);\n            });\n            var minYear = _this.props.minDate ? (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(_this.props.minDate) : null;\n            var maxYear = _this.props.maxDate ? (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(_this.props.maxDate) : null;\n            if (!maxYear || !_this.state.yearsList.find(function(year) {\n                return year === maxYear;\n            })) {\n                options.unshift(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__year-option\",\n                    key: \"upcoming\",\n                    onClick: _this.incrementYears\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"a\", {\n                    className: \"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-upcoming\"\n                })));\n            }\n            if (!minYear || !_this.state.yearsList.find(function(year) {\n                return year === minYear;\n            })) {\n                options.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__year-option\",\n                    key: \"previous\",\n                    onClick: _this.decrementYears\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"a\", {\n                    className: \"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-previous\"\n                })));\n            }\n            return options;\n        };\n        _this.onChange = function(year) {\n            _this.props.onChange(year);\n        };\n        _this.handleClickOutside = function() {\n            _this.props.onCancel();\n        };\n        _this.shiftYears = function(amount) {\n            var years = _this.state.yearsList.map(function(year) {\n                return year + amount;\n            });\n            _this.setState({\n                yearsList: years\n            });\n        };\n        _this.incrementYears = function() {\n            return _this.shiftYears(1);\n        };\n        _this.decrementYears = function() {\n            return _this.shiftYears(-1);\n        };\n        var yearDropdownItemNumber = props.yearDropdownItemNumber, scrollableYearDropdown = props.scrollableYearDropdown;\n        var noOfYear = yearDropdownItemNumber || (scrollableYearDropdown ? 10 : 5);\n        _this.state = {\n            yearsList: generateYears(_this.props.year, noOfYear, _this.props.minDate, _this.props.maxDate)\n        };\n        _this.dropdownRef = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        return _this;\n    }\n    YearDropdownOptions.prototype.componentDidMount = function() {\n        var dropdownCurrent = this.dropdownRef.current;\n        if (dropdownCurrent) {\n            // Get array from HTMLCollection\n            var dropdownCurrentChildren = dropdownCurrent.children ? Array.from(dropdownCurrent.children) : null;\n            var selectedYearOptionEl = dropdownCurrentChildren ? dropdownCurrentChildren.find(function(childEl) {\n                return childEl.ariaSelected;\n            }) : null;\n            dropdownCurrent.scrollTop = selectedYearOptionEl && selectedYearOptionEl instanceof HTMLElement ? selectedYearOptionEl.offsetTop + (selectedYearOptionEl.clientHeight - dropdownCurrent.clientHeight) / 2 : (dropdownCurrent.scrollHeight - dropdownCurrent.clientHeight) / 2;\n        }\n    };\n    YearDropdownOptions.prototype.render = function() {\n        var dropdownClass = (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)({\n            \"react-datepicker__year-dropdown\": true,\n            \"react-datepicker__year-dropdown--scrollable\": this.props.scrollableYearDropdown\n        });\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(ClickOutsideWrapper, {\n            className: dropdownClass,\n            containerRef: this.dropdownRef,\n            onClickOutside: this.handleClickOutside\n        }, this.renderOptions());\n    };\n    return YearDropdownOptions;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\nvar YearDropdown = /** @class */ function(_super) {\n    __extends(YearDropdown, _super);\n    function YearDropdown() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            dropdownVisible: false\n        };\n        _this.renderSelectOptions = function() {\n            var minYear = _this.props.minDate ? (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(_this.props.minDate) : 1900;\n            var maxYear = _this.props.maxDate ? (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(_this.props.maxDate) : 2100;\n            var options = [];\n            for(var i = minYear; i <= maxYear; i++){\n                options.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"option\", {\n                    key: i,\n                    value: i\n                }, i));\n            }\n            return options;\n        };\n        _this.onSelectChange = function(event) {\n            _this.onChange(parseInt(event.target.value));\n        };\n        _this.renderSelectMode = function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"select\", {\n                value: _this.props.year,\n                className: \"react-datepicker__year-select\",\n                onChange: _this.onSelectChange\n            }, _this.renderSelectOptions());\n        };\n        _this.renderReadView = function(visible) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                key: \"read\",\n                style: {\n                    visibility: visible ? \"visible\" : \"hidden\"\n                },\n                className: \"react-datepicker__year-read-view\",\n                onClick: function(event) {\n                    return _this.toggleDropdown(event);\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                className: \"react-datepicker__year-read-view--down-arrow\"\n            }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                className: \"react-datepicker__year-read-view--selected-year\"\n            }, _this.props.year));\n        };\n        _this.renderDropdown = function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(YearDropdownOptions, _assign({\n                key: \"dropdown\"\n            }, _this.props, {\n                onChange: _this.onChange,\n                onCancel: _this.toggleDropdown\n            }));\n        };\n        _this.renderScrollMode = function() {\n            var dropdownVisible = _this.state.dropdownVisible;\n            var result = [\n                _this.renderReadView(!dropdownVisible)\n            ];\n            if (dropdownVisible) {\n                result.unshift(_this.renderDropdown());\n            }\n            return result;\n        };\n        _this.onChange = function(year) {\n            _this.toggleDropdown();\n            if (year === _this.props.year) return;\n            _this.props.onChange(year);\n        };\n        _this.toggleDropdown = function(event) {\n            _this.setState({\n                dropdownVisible: !_this.state.dropdownVisible\n            }, function() {\n                if (_this.props.adjustDateOnChange) {\n                    _this.handleYearChange(_this.props.date, event);\n                }\n            });\n        };\n        _this.handleYearChange = function(date, event) {\n            var _a;\n            (_a = _this.onSelect) === null || _a === void 0 ? void 0 : _a.call(_this, date, event);\n            _this.setOpen();\n        };\n        _this.onSelect = function(date, event) {\n            var _a, _b;\n            (_b = (_a = _this.props).onSelect) === null || _b === void 0 ? void 0 : _b.call(_a, date, event);\n        };\n        _this.setOpen = function() {\n            var _a, _b;\n            (_b = (_a = _this.props).setOpen) === null || _b === void 0 ? void 0 : _b.call(_a, true);\n        };\n        return _this;\n    }\n    YearDropdown.prototype.render = function() {\n        var renderedDropdown;\n        switch(this.props.dropdownMode){\n            case \"scroll\":\n                renderedDropdown = this.renderScrollMode();\n                break;\n            case \"select\":\n                renderedDropdown = this.renderSelectMode();\n                break;\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"react-datepicker__year-dropdown-container react-datepicker__year-dropdown-container--\".concat(this.props.dropdownMode)\n        }, renderedDropdown);\n    };\n    return YearDropdown;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\nvar DROPDOWN_FOCUS_CLASSNAMES = [\n    \"react-datepicker__year-select\",\n    \"react-datepicker__month-select\",\n    \"react-datepicker__month-year-select\"\n];\nvar isDropdownSelect = function(element) {\n    var classNames = (element.className || \"\").split(/\\s+/);\n    return DROPDOWN_FOCUS_CLASSNAMES.some(function(testClassname) {\n        return classNames.indexOf(testClassname) >= 0;\n    });\n};\nvar Calendar = /** @class */ function(_super) {\n    __extends(Calendar, _super);\n    function Calendar(props) {\n        var _this = _super.call(this, props) || this;\n        _this.monthContainer = undefined;\n        _this.handleClickOutside = function(event) {\n            _this.props.onClickOutside(event);\n        };\n        _this.setClickOutsideRef = function() {\n            return _this.containerRef.current;\n        };\n        _this.handleDropdownFocus = function(event) {\n            var _a, _b;\n            if (isDropdownSelect(event.target)) {\n                (_b = (_a = _this.props).onDropdownFocus) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n            }\n        };\n        _this.getDateInView = function() {\n            var _a = _this.props, preSelection = _a.preSelection, selected = _a.selected, openToDate = _a.openToDate;\n            var minDate = getEffectiveMinDate(_this.props);\n            var maxDate = getEffectiveMaxDate(_this.props);\n            var current = newDate();\n            var initialDate = openToDate || selected || preSelection;\n            if (initialDate) {\n                return initialDate;\n            } else {\n                if (minDate && (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_7__.isBefore)(current, minDate)) {\n                    return minDate;\n                } else if (maxDate && (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_52__.isAfter)(current, maxDate)) {\n                    return maxDate;\n                }\n            }\n            return current;\n        };\n        _this.increaseMonth = function() {\n            _this.setState(function(_a) {\n                var date = _a.date;\n                return {\n                    date: (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_39__.addMonths)(date, 1)\n                };\n            }, function() {\n                return _this.handleMonthChange(_this.state.date);\n            });\n        };\n        _this.decreaseMonth = function() {\n            _this.setState(function(_a) {\n                var date = _a.date;\n                return {\n                    date: (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_37__.subMonths)(date, 1)\n                };\n            }, function() {\n                return _this.handleMonthChange(_this.state.date);\n            });\n        };\n        _this.handleDayClick = function(day, event, monthSelectedIn) {\n            _this.props.onSelect(day, event, monthSelectedIn);\n            _this.props.setPreSelection && _this.props.setPreSelection(day);\n        };\n        _this.handleDayMouseEnter = function(day) {\n            _this.setState({\n                selectingDate: day\n            });\n            _this.props.onDayMouseEnter && _this.props.onDayMouseEnter(day);\n        };\n        _this.handleMonthMouseLeave = function() {\n            _this.setState({\n                selectingDate: undefined\n            });\n            _this.props.onMonthMouseLeave && _this.props.onMonthMouseLeave();\n        };\n        _this.handleYearMouseEnter = function(event, year) {\n            _this.setState({\n                selectingDate: (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_58__.setYear)(newDate(), year)\n            });\n            !!_this.props.onYearMouseEnter && _this.props.onYearMouseEnter(event, year);\n        };\n        _this.handleYearMouseLeave = function(event, year) {\n            !!_this.props.onYearMouseLeave && _this.props.onYearMouseLeave(event, year);\n        };\n        _this.handleYearChange = function(date) {\n            var _a, _b, _c, _d;\n            (_b = (_a = _this.props).onYearChange) === null || _b === void 0 ? void 0 : _b.call(_a, date);\n            _this.setState({\n                isRenderAriaLiveMessage: true\n            });\n            if (_this.props.adjustDateOnChange) {\n                _this.props.onSelect(date);\n                (_d = (_c = _this.props).setOpen) === null || _d === void 0 ? void 0 : _d.call(_c, true);\n            }\n            _this.props.setPreSelection && _this.props.setPreSelection(date);\n        };\n        _this.getEnabledPreSelectionDateForMonth = function(date) {\n            if (!isDayDisabled(date, _this.props)) {\n                return date;\n            }\n            var startOfMonth = getStartOfMonth(date);\n            var endOfMonth = getEndOfMonth(date);\n            var totalDays = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_59__.differenceInDays)(endOfMonth, startOfMonth);\n            var preSelectedDate = null;\n            for(var dayIdx = 0; dayIdx <= totalDays; dayIdx++){\n                var processingDate = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_55__.addDays)(startOfMonth, dayIdx);\n                if (!isDayDisabled(processingDate, _this.props)) {\n                    preSelectedDate = processingDate;\n                    break;\n                }\n            }\n            return preSelectedDate;\n        };\n        _this.handleMonthChange = function(date) {\n            var _a, _b, _c;\n            var enabledPreSelectionDate = (_a = _this.getEnabledPreSelectionDateForMonth(date)) !== null && _a !== void 0 ? _a : date;\n            _this.handleCustomMonthChange(enabledPreSelectionDate);\n            if (_this.props.adjustDateOnChange) {\n                _this.props.onSelect(enabledPreSelectionDate);\n                (_c = (_b = _this.props).setOpen) === null || _c === void 0 ? void 0 : _c.call(_b, true);\n            }\n            _this.props.setPreSelection && _this.props.setPreSelection(enabledPreSelectionDate);\n        };\n        _this.handleCustomMonthChange = function(date) {\n            var _a, _b;\n            (_b = (_a = _this.props).onMonthChange) === null || _b === void 0 ? void 0 : _b.call(_a, date);\n            _this.setState({\n                isRenderAriaLiveMessage: true\n            });\n        };\n        _this.handleMonthYearChange = function(date) {\n            _this.handleYearChange(date);\n            _this.handleMonthChange(date);\n        };\n        _this.changeYear = function(year) {\n            _this.setState(function(_a) {\n                var date = _a.date;\n                return {\n                    date: (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_58__.setYear)(date, Number(year))\n                };\n            }, function() {\n                return _this.handleYearChange(_this.state.date);\n            });\n        };\n        _this.changeMonth = function(month) {\n            _this.setState(function(_a) {\n                var date = _a.date;\n                return {\n                    date: (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_27__.setMonth)(date, Number(month))\n                };\n            }, function() {\n                return _this.handleMonthChange(_this.state.date);\n            });\n        };\n        _this.changeMonthYear = function(monthYear) {\n            _this.setState(function(_a) {\n                var date = _a.date;\n                return {\n                    date: (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_58__.setYear)((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_27__.setMonth)(date, (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_30__.getMonth)(monthYear)), (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(monthYear))\n                };\n            }, function() {\n                return _this.handleMonthYearChange(_this.state.date);\n            });\n        };\n        _this.header = function(date) {\n            if (date === void 0) {\n                date = _this.state.date;\n            }\n            var startOfWeek = getStartOfWeek(date, _this.props.locale, _this.props.calendarStartDay);\n            var dayNames = [];\n            if (_this.props.showWeekNumbers) {\n                dayNames.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    key: \"W\",\n                    className: \"react-datepicker__day-name\"\n                }, _this.props.weekLabel || \"#\"));\n            }\n            return dayNames.concat([\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6\n            ].map(function(offset) {\n                var day = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_55__.addDays)(startOfWeek, offset);\n                var weekDayName = _this.formatWeekday(day, _this.props.locale);\n                var weekDayClassName = _this.props.weekDayClassName ? _this.props.weekDayClassName(day) : undefined;\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    key: offset,\n                    \"aria-label\": formatDate(day, \"EEEE\", _this.props.locale),\n                    className: (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker__day-name\", weekDayClassName)\n                }, weekDayName);\n            }));\n        };\n        _this.formatWeekday = function(day, locale) {\n            if (_this.props.formatWeekDay) {\n                return getFormattedWeekdayInLocale(day, _this.props.formatWeekDay, locale);\n            }\n            return _this.props.useWeekdaysShort ? getWeekdayShortInLocale(day, locale) : getWeekdayMinInLocale(day, locale);\n        };\n        _this.decreaseYear = function() {\n            _this.setState(function(_a) {\n                var _b;\n                var date = _a.date;\n                return {\n                    date: (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_43__.subYears)(date, _this.props.showYearPicker ? (_b = _this.props.yearItemNumber) !== null && _b !== void 0 ? _b : Calendar.defaultProps.yearItemNumber : 1)\n                };\n            }, function() {\n                return _this.handleYearChange(_this.state.date);\n            });\n        };\n        _this.clearSelectingDate = function() {\n            _this.setState({\n                selectingDate: undefined\n            });\n        };\n        _this.renderPreviousButton = function() {\n            var _a, _b, _c;\n            if (_this.props.renderCustomHeader) {\n                return;\n            }\n            var monthsShown = (_a = _this.props.monthsShown) !== null && _a !== void 0 ? _a : Calendar.defaultProps.monthsShown;\n            var monthsToSubtract = _this.props.showPreviousMonths ? monthsShown - 1 : 0;\n            var monthSelectedIn = (_b = _this.props.monthSelectedIn) !== null && _b !== void 0 ? _b : monthsToSubtract;\n            var fromMonthDate = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_37__.subMonths)(_this.state.date, monthSelectedIn);\n            var allPrevDaysDisabled;\n            switch(true){\n                case _this.props.showMonthYearPicker:\n                    allPrevDaysDisabled = yearDisabledBefore(_this.state.date, _this.props);\n                    break;\n                case _this.props.showYearPicker:\n                    allPrevDaysDisabled = yearsDisabledBefore(_this.state.date, _this.props);\n                    break;\n                case _this.props.showQuarterYearPicker:\n                    allPrevDaysDisabled = quarterDisabledBefore(_this.state.date, _this.props);\n                    break;\n                default:\n                    allPrevDaysDisabled = monthDisabledBefore(fromMonthDate, _this.props);\n                    break;\n            }\n            if (!((_c = _this.props.forceShowMonthNavigation) !== null && _c !== void 0 ? _c : Calendar.defaultProps.forceShowMonthNavigation) && !_this.props.showDisabledMonthNavigation && allPrevDaysDisabled || _this.props.showTimeSelectOnly) {\n                return;\n            }\n            var iconClasses = [\n                \"react-datepicker__navigation-icon\",\n                \"react-datepicker__navigation-icon--previous\"\n            ];\n            var classes = [\n                \"react-datepicker__navigation\",\n                \"react-datepicker__navigation--previous\"\n            ];\n            var clickHandler = _this.decreaseMonth;\n            if (_this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker) {\n                clickHandler = _this.decreaseYear;\n            }\n            if (allPrevDaysDisabled && _this.props.showDisabledMonthNavigation) {\n                classes.push(\"react-datepicker__navigation--previous--disabled\");\n                clickHandler = undefined;\n            }\n            var isForYear = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker;\n            var _d = _this.props, _e = _d.previousMonthButtonLabel, previousMonthButtonLabel = _e === void 0 ? Calendar.defaultProps.previousMonthButtonLabel : _e, _f = _d.previousYearButtonLabel, previousYearButtonLabel = _f === void 0 ? Calendar.defaultProps.previousYearButtonLabel : _f;\n            var _g = _this.props, _h = _g.previousMonthAriaLabel, previousMonthAriaLabel = _h === void 0 ? typeof previousMonthButtonLabel === \"string\" ? previousMonthButtonLabel : \"Previous Month\" : _h, _j = _g.previousYearAriaLabel, previousYearAriaLabel = _j === void 0 ? typeof previousYearButtonLabel === \"string\" ? previousYearButtonLabel : \"Previous Year\" : _j;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"button\", {\n                type: \"button\",\n                className: classes.join(\" \"),\n                onClick: clickHandler,\n                onKeyDown: _this.props.handleOnKeyDown,\n                \"aria-label\": isForYear ? previousYearAriaLabel : previousMonthAriaLabel\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                className: iconClasses.join(\" \")\n            }, isForYear ? previousYearButtonLabel : previousMonthButtonLabel));\n        };\n        _this.increaseYear = function() {\n            _this.setState(function(_a) {\n                var _b;\n                var date = _a.date;\n                return {\n                    date: (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_45__.addYears)(date, _this.props.showYearPicker ? (_b = _this.props.yearItemNumber) !== null && _b !== void 0 ? _b : Calendar.defaultProps.yearItemNumber : 1)\n                };\n            }, function() {\n                return _this.handleYearChange(_this.state.date);\n            });\n        };\n        _this.renderNextButton = function() {\n            var _a;\n            if (_this.props.renderCustomHeader) {\n                return;\n            }\n            var allNextDaysDisabled;\n            switch(true){\n                case _this.props.showMonthYearPicker:\n                    allNextDaysDisabled = yearDisabledAfter(_this.state.date, _this.props);\n                    break;\n                case _this.props.showYearPicker:\n                    allNextDaysDisabled = yearsDisabledAfter(_this.state.date, _this.props);\n                    break;\n                case _this.props.showQuarterYearPicker:\n                    allNextDaysDisabled = quarterDisabledAfter(_this.state.date, _this.props);\n                    break;\n                default:\n                    allNextDaysDisabled = monthDisabledAfter(_this.state.date, _this.props);\n                    break;\n            }\n            if (!((_a = _this.props.forceShowMonthNavigation) !== null && _a !== void 0 ? _a : Calendar.defaultProps.forceShowMonthNavigation) && !_this.props.showDisabledMonthNavigation && allNextDaysDisabled || _this.props.showTimeSelectOnly) {\n                return;\n            }\n            var classes = [\n                \"react-datepicker__navigation\",\n                \"react-datepicker__navigation--next\"\n            ];\n            var iconClasses = [\n                \"react-datepicker__navigation-icon\",\n                \"react-datepicker__navigation-icon--next\"\n            ];\n            if (_this.props.showTimeSelect) {\n                classes.push(\"react-datepicker__navigation--next--with-time\");\n            }\n            if (_this.props.todayButton) {\n                classes.push(\"react-datepicker__navigation--next--with-today-button\");\n            }\n            var clickHandler = _this.increaseMonth;\n            if (_this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker) {\n                clickHandler = _this.increaseYear;\n            }\n            if (allNextDaysDisabled && _this.props.showDisabledMonthNavigation) {\n                classes.push(\"react-datepicker__navigation--next--disabled\");\n                clickHandler = undefined;\n            }\n            var isForYear = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker;\n            var _b = _this.props, _c = _b.nextMonthButtonLabel, nextMonthButtonLabel = _c === void 0 ? Calendar.defaultProps.nextMonthButtonLabel : _c, _d = _b.nextYearButtonLabel, nextYearButtonLabel = _d === void 0 ? Calendar.defaultProps.nextYearButtonLabel : _d;\n            var _e = _this.props, _f = _e.nextMonthAriaLabel, nextMonthAriaLabel = _f === void 0 ? typeof nextMonthButtonLabel === \"string\" ? nextMonthButtonLabel : \"Next Month\" : _f, _g = _e.nextYearAriaLabel, nextYearAriaLabel = _g === void 0 ? typeof nextYearButtonLabel === \"string\" ? nextYearButtonLabel : \"Next Year\" : _g;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"button\", {\n                type: \"button\",\n                className: classes.join(\" \"),\n                onClick: clickHandler,\n                onKeyDown: _this.props.handleOnKeyDown,\n                \"aria-label\": isForYear ? nextYearAriaLabel : nextMonthAriaLabel\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                className: iconClasses.join(\" \")\n            }, isForYear ? nextYearButtonLabel : nextMonthButtonLabel));\n        };\n        _this.renderCurrentMonth = function(date) {\n            if (date === void 0) {\n                date = _this.state.date;\n            }\n            var classes = [\n                \"react-datepicker__current-month\"\n            ];\n            if (_this.props.showYearDropdown) {\n                classes.push(\"react-datepicker__current-month--hasYearDropdown\");\n            }\n            if (_this.props.showMonthDropdown) {\n                classes.push(\"react-datepicker__current-month--hasMonthDropdown\");\n            }\n            if (_this.props.showMonthYearDropdown) {\n                classes.push(\"react-datepicker__current-month--hasMonthYearDropdown\");\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"h2\", {\n                className: classes.join(\" \")\n            }, formatDate(date, _this.props.dateFormat, _this.props.locale));\n        };\n        _this.renderYearDropdown = function(overrideHide) {\n            if (overrideHide === void 0) {\n                overrideHide = false;\n            }\n            if (!_this.props.showYearDropdown || overrideHide) {\n                return;\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(YearDropdown, _assign({}, Calendar.defaultProps, _this.props, {\n                date: _this.state.date,\n                onChange: _this.changeYear,\n                year: (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(_this.state.date)\n            }));\n        };\n        _this.renderMonthDropdown = function(overrideHide) {\n            if (overrideHide === void 0) {\n                overrideHide = false;\n            }\n            if (!_this.props.showMonthDropdown || overrideHide) {\n                return;\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(MonthDropdown, _assign({}, Calendar.defaultProps, _this.props, {\n                month: (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_30__.getMonth)(_this.state.date),\n                onChange: _this.changeMonth\n            }));\n        };\n        _this.renderMonthYearDropdown = function(overrideHide) {\n            if (overrideHide === void 0) {\n                overrideHide = false;\n            }\n            if (!_this.props.showMonthYearDropdown || overrideHide) {\n                return;\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(MonthYearDropdown, _assign({}, Calendar.defaultProps, _this.props, {\n                date: _this.state.date,\n                onChange: _this.changeMonthYear\n            }));\n        };\n        _this.handleTodayButtonClick = function(event) {\n            _this.props.onSelect(getStartOfToday(), event);\n            _this.props.setPreSelection && _this.props.setPreSelection(getStartOfToday());\n        };\n        _this.renderTodayButton = function() {\n            if (!_this.props.todayButton || _this.props.showTimeSelectOnly) {\n                return;\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__today-button\",\n                onClick: _this.handleTodayButtonClick\n            }, _this.props.todayButton);\n        };\n        _this.renderDefaultHeader = function(_a) {\n            var monthDate = _a.monthDate, i = _a.i;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__header \".concat(_this.props.showTimeSelect ? \"react-datepicker__header--has-time-select\" : \"\")\n            }, _this.renderCurrentMonth(monthDate), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__header__dropdown react-datepicker__header__dropdown--\".concat(_this.props.dropdownMode),\n                onFocus: _this.handleDropdownFocus\n            }, _this.renderMonthDropdown(i !== 0), _this.renderMonthYearDropdown(i !== 0), _this.renderYearDropdown(i !== 0)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__day-names\"\n            }, _this.header(monthDate)));\n        };\n        _this.renderCustomHeader = function(headerArgs) {\n            var _a, _b;\n            var monthDate = headerArgs.monthDate, i = headerArgs.i;\n            if (_this.props.showTimeSelect && !_this.state.monthContainer || _this.props.showTimeSelectOnly) {\n                return null;\n            }\n            var prevMonthButtonDisabled = monthDisabledBefore(_this.state.date, _this.props);\n            var nextMonthButtonDisabled = monthDisabledAfter(_this.state.date, _this.props);\n            var prevYearButtonDisabled = yearDisabledBefore(_this.state.date, _this.props);\n            var nextYearButtonDisabled = yearDisabledAfter(_this.state.date, _this.props);\n            var showDayNames = !_this.props.showMonthYearPicker && !_this.props.showQuarterYearPicker && !_this.props.showYearPicker;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__header react-datepicker__header--custom\",\n                onFocus: _this.props.onDropdownFocus\n            }, (_b = (_a = _this.props).renderCustomHeader) === null || _b === void 0 ? void 0 : _b.call(_a, _assign(_assign({}, _this.state), {\n                customHeaderCount: i,\n                monthDate: monthDate,\n                changeMonth: _this.changeMonth,\n                changeYear: _this.changeYear,\n                decreaseMonth: _this.decreaseMonth,\n                increaseMonth: _this.increaseMonth,\n                decreaseYear: _this.decreaseYear,\n                increaseYear: _this.increaseYear,\n                prevMonthButtonDisabled: prevMonthButtonDisabled,\n                nextMonthButtonDisabled: nextMonthButtonDisabled,\n                prevYearButtonDisabled: prevYearButtonDisabled,\n                nextYearButtonDisabled: nextYearButtonDisabled\n            })), showDayNames && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__day-names\"\n            }, _this.header(monthDate)));\n        };\n        _this.renderYearHeader = function(_a) {\n            var monthDate = _a.monthDate;\n            var _b = _this.props, showYearPicker = _b.showYearPicker, _c = _b.yearItemNumber, yearItemNumber = _c === void 0 ? Calendar.defaultProps.yearItemNumber : _c;\n            var _d = getYearsPeriod(monthDate, yearItemNumber), startPeriod = _d.startPeriod, endPeriod = _d.endPeriod;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__header react-datepicker-year-header\"\n            }, showYearPicker ? \"\".concat(startPeriod, \" - \").concat(endPeriod) : (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(monthDate));\n        };\n        _this.renderHeader = function(_a) {\n            var monthDate = _a.monthDate, _b = _a.i, i = _b === void 0 ? 0 : _b;\n            var headerArgs = {\n                monthDate: monthDate,\n                i: i\n            };\n            switch(true){\n                case _this.props.renderCustomHeader !== undefined:\n                    return _this.renderCustomHeader(headerArgs);\n                case _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker:\n                    return _this.renderYearHeader(headerArgs);\n                default:\n                    return _this.renderDefaultHeader(headerArgs);\n            }\n        };\n        _this.renderMonths = function() {\n            var _a, _b;\n            if (_this.props.showTimeSelectOnly || _this.props.showYearPicker) {\n                return;\n            }\n            var monthList = [];\n            var monthsShown = (_a = _this.props.monthsShown) !== null && _a !== void 0 ? _a : Calendar.defaultProps.monthsShown;\n            var monthsToSubtract = _this.props.showPreviousMonths ? monthsShown - 1 : 0;\n            var fromMonthDate = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker ? (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_45__.addYears)(_this.state.date, monthsToSubtract) : (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_37__.subMonths)(_this.state.date, monthsToSubtract);\n            var monthSelectedIn = (_b = _this.props.monthSelectedIn) !== null && _b !== void 0 ? _b : monthsToSubtract;\n            for(var i = 0; i < monthsShown; ++i){\n                var monthsToAdd = i - monthSelectedIn + monthsToSubtract;\n                var monthDate = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker ? (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_45__.addYears)(fromMonthDate, monthsToAdd) : (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_39__.addMonths)(fromMonthDate, monthsToAdd);\n                var monthKey = \"month-\".concat(i);\n                var monthShowsDuplicateDaysEnd = i < monthsShown - 1;\n                var monthShowsDuplicateDaysStart = i > 0;\n                monthList.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    key: monthKey,\n                    ref: function(div) {\n                        _this.monthContainer = div !== null && div !== void 0 ? div : undefined;\n                    },\n                    className: \"react-datepicker__month-container\"\n                }, _this.renderHeader({\n                    monthDate: monthDate,\n                    i: i\n                }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Month, _assign({}, Calendar.defaultProps, _this.props, {\n                    containerRef: _this.containerRef,\n                    ariaLabelPrefix: _this.props.monthAriaLabelPrefix,\n                    day: monthDate,\n                    onDayClick: _this.handleDayClick,\n                    handleOnKeyDown: _this.props.handleOnDayKeyDown,\n                    handleOnMonthKeyDown: _this.props.handleOnKeyDown,\n                    onDayMouseEnter: _this.handleDayMouseEnter,\n                    onMouseLeave: _this.handleMonthMouseLeave,\n                    orderInDisplay: i,\n                    selectingDate: _this.state.selectingDate,\n                    monthShowsDuplicateDaysEnd: monthShowsDuplicateDaysEnd,\n                    monthShowsDuplicateDaysStart: monthShowsDuplicateDaysStart\n                }))));\n            }\n            return monthList;\n        };\n        _this.renderYears = function() {\n            if (_this.props.showTimeSelectOnly) {\n                return;\n            }\n            if (_this.props.showYearPicker) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__year--container\"\n                }, _this.renderHeader({\n                    monthDate: _this.state.date\n                }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Year, _assign({}, Calendar.defaultProps, _this.props, {\n                    selectingDate: _this.state.selectingDate,\n                    date: _this.state.date,\n                    onDayClick: _this.handleDayClick,\n                    clearSelectingDate: _this.clearSelectingDate,\n                    onYearMouseEnter: _this.handleYearMouseEnter,\n                    onYearMouseLeave: _this.handleYearMouseLeave\n                })));\n            }\n            return;\n        };\n        _this.renderTimeSection = function() {\n            if (_this.props.showTimeSelect && (_this.state.monthContainer || _this.props.showTimeSelectOnly)) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Time, _assign({}, Calendar.defaultProps, _this.props, {\n                    onChange: _this.props.onTimeChange,\n                    format: _this.props.timeFormat,\n                    intervals: _this.props.timeIntervals,\n                    monthRef: _this.state.monthContainer\n                }));\n            }\n            return;\n        };\n        _this.renderInputTimeSection = function() {\n            var time = _this.props.selected ? new Date(_this.props.selected) : undefined;\n            var timeValid = time && isValid(time) && Boolean(_this.props.selected);\n            var timeString = timeValid ? \"\".concat(addZero(time.getHours()), \":\").concat(addZero(time.getMinutes())) : \"\";\n            if (_this.props.showTimeInput) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(InputTime, _assign({}, Calendar.defaultProps, _this.props, {\n                    date: time,\n                    timeString: timeString,\n                    onChange: _this.props.onTimeChange\n                }));\n            }\n            return;\n        };\n        _this.renderAriaLiveRegion = function() {\n            var _a;\n            var _b = getYearsPeriod(_this.state.date, (_a = _this.props.yearItemNumber) !== null && _a !== void 0 ? _a : Calendar.defaultProps.yearItemNumber), startPeriod = _b.startPeriod, endPeriod = _b.endPeriod;\n            var ariaLiveMessage;\n            if (_this.props.showYearPicker) {\n                ariaLiveMessage = \"\".concat(startPeriod, \" - \").concat(endPeriod);\n            } else if (_this.props.showMonthYearPicker || _this.props.showQuarterYearPicker) {\n                ariaLiveMessage = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(_this.state.date);\n            } else {\n                ariaLiveMessage = \"\".concat(getMonthInLocale((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_30__.getMonth)(_this.state.date), _this.props.locale), \" \").concat((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(_this.state.date));\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                role: \"alert\",\n                \"aria-live\": \"polite\",\n                className: \"react-datepicker__aria-live\"\n            }, _this.state.isRenderAriaLiveMessage && ariaLiveMessage);\n        };\n        _this.renderChildren = function() {\n            if (_this.props.children) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__children-container\"\n                }, _this.props.children);\n            }\n            return;\n        };\n        _this.containerRef = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        _this.state = {\n            date: _this.getDateInView(),\n            selectingDate: undefined,\n            monthContainer: undefined,\n            isRenderAriaLiveMessage: false\n        };\n        return _this;\n    }\n    Object.defineProperty(Calendar, \"defaultProps\", {\n        get: function() {\n            return {\n                monthsShown: 1,\n                forceShowMonthNavigation: false,\n                timeCaption: \"Time\",\n                previousYearButtonLabel: \"Previous Year\",\n                nextYearButtonLabel: \"Next Year\",\n                previousMonthButtonLabel: \"Previous Month\",\n                nextMonthButtonLabel: \"Next Month\",\n                yearItemNumber: DEFAULT_YEAR_ITEM_NUMBER\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Calendar.prototype.componentDidMount = function() {\n        var _this = this;\n        // monthContainer height is needed in time component\n        // to determine the height for the ul in the time component\n        // setState here so height is given after final component\n        // layout is rendered\n        if (this.props.showTimeSelect) {\n            this.assignMonthContainer = function() {\n                _this.setState({\n                    monthContainer: _this.monthContainer\n                });\n            }();\n        }\n    };\n    Calendar.prototype.componentDidUpdate = function(prevProps) {\n        var _this = this;\n        if (this.props.preSelection && (!isSameDay(this.props.preSelection, prevProps.preSelection) || this.props.monthSelectedIn !== prevProps.monthSelectedIn)) {\n            var hasMonthChanged_1 = !isSameMonth(this.state.date, this.props.preSelection);\n            this.setState({\n                date: this.props.preSelection\n            }, function() {\n                return hasMonthChanged_1 && _this.handleCustomMonthChange(_this.state.date);\n            });\n        } else if (this.props.openToDate && !isSameDay(this.props.openToDate, prevProps.openToDate)) {\n            this.setState({\n                date: this.props.openToDate\n            });\n        }\n    };\n    Calendar.prototype.render = function() {\n        var Container = this.props.container || CalendarContainer;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(ClickOutsideWrapper, {\n            onClickOutside: this.handleClickOutside,\n            style: {\n                display: \"contents\"\n            },\n            ignoreClass: this.props.outsideClickIgnoreClass\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            style: {\n                display: \"contents\"\n            },\n            ref: this.containerRef\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Container, {\n            className: (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker\", this.props.className, {\n                \"react-datepicker--time-only\": this.props.showTimeSelectOnly\n            }),\n            showTime: this.props.showTimeSelect || this.props.showTimeInput,\n            showTimeSelectOnly: this.props.showTimeSelectOnly\n        }, this.renderAriaLiveRegion(), this.renderPreviousButton(), this.renderNextButton(), this.renderMonths(), this.renderYears(), this.renderTodayButton(), this.renderTimeSection(), this.renderInputTimeSection(), this.renderChildren())));\n    };\n    return Calendar;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\n/**\n * `CalendarIcon` is a React component that renders an icon for a calendar.\n * The icon can be a string representing a CSS class, a React node, or a default SVG icon.\n *\n * @component\n * @prop  icon - The icon to be displayed. This can be a string representing a CSS class or a React node.\n * @prop  className - An optional string representing additional CSS classes to be applied to the icon.\n * @prop  onClick - An optional function to be called when the icon is clicked.\n *\n * @example\n * // To use a CSS class as the icon\n * <CalendarIcon icon=\"my-icon-class\" onClick={myClickHandler} />\n *\n * @example\n * // To use a React node as the icon\n * <CalendarIcon icon={<MyIconComponent />} onClick={myClickHandler} />\n *\n * @returns  The `CalendarIcon` component.\n */ var CalendarIcon = function(_a) {\n    var icon = _a.icon, _b = _a.className, className = _b === void 0 ? \"\" : _b, onClick = _a.onClick;\n    var defaultClass = \"react-datepicker__calendar-icon\";\n    if (typeof icon === \"string\") {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"i\", {\n            className: \"\".concat(defaultClass, \" \").concat(icon, \" \").concat(className),\n            \"aria-hidden\": \"true\",\n            onClick: onClick\n        });\n    }\n    if (/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().isValidElement(icon)) {\n        // Because we are checking that typeof icon is string first, we can safely cast icon as React.ReactElement on types level and code level\n        var iconElement_1 = icon;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().cloneElement(iconElement_1, {\n            className: \"\".concat(iconElement_1.props.className || \"\", \" \").concat(defaultClass, \" \").concat(className),\n            onClick: function(event) {\n                if (typeof iconElement_1.props.onClick === \"function\") {\n                    iconElement_1.props.onClick(event);\n                }\n                if (typeof onClick === \"function\") {\n                    onClick(event);\n                }\n            }\n        });\n    }\n    // Default SVG Icon\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"svg\", {\n        className: \"\".concat(defaultClass, \" \").concat(className),\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 448 512\",\n        onClick: onClick\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"path\", {\n        d: \"M96 32V64H48C21.5 64 0 85.5 0 112v48H448V112c0-26.5-21.5-48-48-48H352V32c0-17.7-14.3-32-32-32s-32 14.3-32 32V64H160V32c0-17.7-14.3-32-32-32S96 14.3 96 32zM448 192H0V464c0 26.5 21.5 48 48 48H400c26.5 0 48-21.5 48-48V192z\"\n    }));\n};\n/**\n * `Portal` is a React component that allows you to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * @class\n * @param {PortalProps} props - The properties that define the `Portal` component.\n * @property {React.ReactNode} props.children - The children to be rendered into the `Portal`.\n * @property {string} props.portalId - The id of the DOM node into which the `Portal` will render.\n * @property {ShadowRoot} [props.portalHost] - The DOM node to host the `Portal`.\n */ var Portal = /** @class */ function(_super) {\n    __extends(Portal, _super);\n    function Portal(props) {\n        var _this = _super.call(this, props) || this;\n        _this.portalRoot = null;\n        _this.el = document.createElement(\"div\");\n        return _this;\n    }\n    Portal.prototype.componentDidMount = function() {\n        this.portalRoot = (this.props.portalHost || document).getElementById(this.props.portalId);\n        if (!this.portalRoot) {\n            this.portalRoot = document.createElement(\"div\");\n            this.portalRoot.setAttribute(\"id\", this.props.portalId);\n            (this.props.portalHost || document.body).appendChild(this.portalRoot);\n        }\n        this.portalRoot.appendChild(this.el);\n    };\n    Portal.prototype.componentWillUnmount = function() {\n        if (this.portalRoot) {\n            this.portalRoot.removeChild(this.el);\n        }\n    };\n    Portal.prototype.render = function() {\n        return /*#__PURE__*/ react_dom__WEBPACK_IMPORTED_MODULE_2___default().createPortal(this.props.children, this.el);\n    };\n    return Portal;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\nvar focusableElementsSelector = \"[tabindex], a, button, input, select, textarea\";\nvar focusableFilter = function(node) {\n    if (node instanceof HTMLAnchorElement) {\n        return node.tabIndex !== -1;\n    }\n    return !node.disabled && node.tabIndex !== -1;\n};\n/**\n * `TabLoop` is a React component that manages tabbing behavior for its children.\n *\n * TabLoop prevents the user from tabbing outside of the popper\n * It creates a tabindex loop so that \"Tab\" on the last element will focus the first element\n * and \"Shift Tab\" on the first element will focus the last element\n *\n * @component\n * @example\n * <TabLoop enableTabLoop={true}>\n *   <ChildComponent />\n * </TabLoop>\n *\n * @param props - The properties that define the `TabLoop` component.\n * @param props.children - The child components.\n * @param props.enableTabLoop - Whether to enable the tab loop.\n *\n * @returns The `TabLoop` component.\n */ var TabLoop = /** @class */ function(_super) {\n    __extends(TabLoop, _super);\n    function TabLoop(props) {\n        var _this = _super.call(this, props) || this;\n        /**\n         * `getTabChildren` is a method of the `TabLoop` class that retrieves all tabbable children of the component.\n         *\n         * This method uses the `tabbable` library to find all tabbable elements within the `TabLoop` component.\n         * It then filters out any elements that are not visible.\n         *\n         * @returns An array of all tabbable and visible children of the `TabLoop` component.\n         */ _this.getTabChildren = function() {\n            var _a;\n            return Array.prototype.slice.call((_a = _this.tabLoopRef.current) === null || _a === void 0 ? void 0 : _a.querySelectorAll(focusableElementsSelector), 1, -1).filter(focusableFilter);\n        };\n        _this.handleFocusStart = function() {\n            var tabChildren = _this.getTabChildren();\n            tabChildren && tabChildren.length > 1 && tabChildren[tabChildren.length - 1].focus();\n        };\n        _this.handleFocusEnd = function() {\n            var tabChildren = _this.getTabChildren();\n            tabChildren && tabChildren.length > 1 && tabChildren[0].focus();\n        };\n        _this.tabLoopRef = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        return _this;\n    }\n    TabLoop.prototype.render = function() {\n        var _a;\n        if (!((_a = this.props.enableTabLoop) !== null && _a !== void 0 ? _a : TabLoop.defaultProps.enableTabLoop)) {\n            return this.props.children;\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"react-datepicker__tab-loop\",\n            ref: this.tabLoopRef\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"react-datepicker__tab-loop__start\",\n            tabIndex: 0,\n            onFocus: this.handleFocusStart\n        }), this.props.children, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"react-datepicker__tab-loop__end\",\n            tabIndex: 0,\n            onFocus: this.handleFocusEnd\n        }));\n    };\n    TabLoop.defaultProps = {\n        enableTabLoop: true\n    };\n    return TabLoop;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\n/**\n * `withFloating` is a higher-order component that adds floating behavior to a component.\n *\n * @param Component - The component to enhance.\n *\n * @example\n * const FloatingComponent = withFloating(MyComponent);\n * <FloatingComponent popperModifiers={[]} popperProps={{}} hidePopper={true} />\n *\n * @param popperModifiers - The modifiers to use for the popper.\n * @param popperProps - The props to pass to the popper.\n * @param hidePopper - Whether to hide the popper.\n * @param popperPlacement - The placement of the popper.\n *\n * @returns A new component with floating behavior.\n */ function withFloating(Component) {\n    var WithFloating = function(props) {\n        var _a;\n        var hidePopper = typeof props.hidePopper === \"boolean\" ? props.hidePopper : true;\n        var arrowRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n        var floatingProps = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_60__.useFloating)(_assign({\n            open: !hidePopper,\n            whileElementsMounted: _floating_ui_react__WEBPACK_IMPORTED_MODULE_61__.autoUpdate,\n            placement: props.popperPlacement,\n            middleware: __spreadArray([\n                (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_62__.flip)({\n                    padding: 15\n                }),\n                (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_62__.offset)(10),\n                (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_62__.arrow)({\n                    element: arrowRef\n                })\n            ], (_a = props.popperModifiers) !== null && _a !== void 0 ? _a : [], true)\n        }, props.popperProps));\n        var componentProps = _assign(_assign({}, props), {\n            hidePopper: hidePopper,\n            popperProps: _assign(_assign({}, floatingProps), {\n                arrowRef: arrowRef\n            })\n        });\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Component, _assign({}, componentProps));\n    };\n    return WithFloating;\n}\n// Exported for testing purposes\nvar PopperComponent = /** @class */ function(_super) {\n    __extends(PopperComponent, _super);\n    function PopperComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(PopperComponent, \"defaultProps\", {\n        get: function() {\n            return {\n                hidePopper: true\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    PopperComponent.prototype.render = function() {\n        var _a = this.props, className = _a.className, wrapperClassName = _a.wrapperClassName, _b = _a.hidePopper, hidePopper = _b === void 0 ? PopperComponent.defaultProps.hidePopper : _b, popperComponent = _a.popperComponent, targetComponent = _a.targetComponent, enableTabLoop = _a.enableTabLoop, popperOnKeyDown = _a.popperOnKeyDown, portalId = _a.portalId, portalHost = _a.portalHost, popperProps = _a.popperProps, showArrow = _a.showArrow;\n        var popper = undefined;\n        if (!hidePopper) {\n            var classes = (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker-popper\", className);\n            popper = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(TabLoop, {\n                enableTabLoop: enableTabLoop\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                ref: popperProps.refs.setFloating,\n                style: popperProps.floatingStyles,\n                className: classes,\n                \"data-placement\": popperProps.placement,\n                onKeyDown: popperOnKeyDown\n            }, popperComponent, showArrow && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_floating_ui_react__WEBPACK_IMPORTED_MODULE_60__.FloatingArrow, {\n                ref: popperProps.arrowRef,\n                context: popperProps.context,\n                fill: \"currentColor\",\n                strokeWidth: 1,\n                height: 8,\n                width: 16,\n                style: {\n                    transform: \"translateY(-1px)\"\n                },\n                className: \"react-datepicker__triangle\"\n            })));\n        }\n        if (this.props.popperContainer) {\n            popper = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(this.props.popperContainer, {}, popper);\n        }\n        if (portalId && !hidePopper) {\n            popper = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Portal, {\n                portalId: portalId,\n                portalHost: portalHost\n            }, popper);\n        }\n        var wrapperClasses = (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker-wrapper\", wrapperClassName);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            ref: popperProps.refs.setReference,\n            className: wrapperClasses\n        }, targetComponent), popper);\n    };\n    return PopperComponent;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\nvar PopperComponent$1 = withFloating(PopperComponent);\nvar outsideClickIgnoreClass = \"react-datepicker-ignore-onclickoutside\";\n// Compares dates year+month combinations\nfunction hasPreSelectionChanged(date1, date2) {\n    if (date1 && date2) {\n        return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_30__.getMonth)(date1) !== (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_30__.getMonth)(date2) || (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(date1) !== (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(date2);\n    }\n    return date1 !== date2;\n}\n/**\n * General datepicker component.\n */ var INPUT_ERR_1 = \"Date input not valid.\";\nvar DatePicker = /** @class */ function(_super) {\n    __extends(DatePicker, _super);\n    function DatePicker(props) {\n        var _this = _super.call(this, props) || this;\n        _this.calendar = null;\n        _this.input = null;\n        _this.getPreSelection = function() {\n            return _this.props.openToDate ? _this.props.openToDate : _this.props.selectsEnd && _this.props.startDate ? _this.props.startDate : _this.props.selectsStart && _this.props.endDate ? _this.props.endDate : newDate();\n        };\n        // Convert the date from string format to standard Date format\n        _this.modifyHolidays = function() {\n            var _a;\n            return (_a = _this.props.holidays) === null || _a === void 0 ? void 0 : _a.reduce(function(accumulator, holiday) {\n                var date = new Date(holiday.date);\n                if (!isValid(date)) {\n                    return accumulator;\n                }\n                return __spreadArray(__spreadArray([], accumulator, true), [\n                    _assign(_assign({}, holiday), {\n                        date: date\n                    })\n                ], false);\n            }, []);\n        };\n        _this.calcInitialState = function() {\n            var _a;\n            var defaultPreSelection = _this.getPreSelection();\n            var minDate = getEffectiveMinDate(_this.props);\n            var maxDate = getEffectiveMaxDate(_this.props);\n            var boundedPreSelection = minDate && (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_7__.isBefore)(defaultPreSelection, getStartOfDay(minDate)) ? minDate : maxDate && (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_52__.isAfter)(defaultPreSelection, getEndOfDay(maxDate)) ? maxDate : defaultPreSelection;\n            return {\n                open: _this.props.startOpen || false,\n                preventFocus: false,\n                inputValue: null,\n                preSelection: (_a = _this.props.selectsRange ? _this.props.startDate : _this.props.selected) !== null && _a !== void 0 ? _a : boundedPreSelection,\n                // transforming highlighted days (perhaps nested array)\n                // to flat Map for faster access in day.jsx\n                highlightDates: getHighLightDaysMap(_this.props.highlightDates),\n                focused: false,\n                // used to focus day in inline version after month has changed, but not on\n                // initial render\n                shouldFocusDayInline: false,\n                isRenderAriaLiveMessage: false,\n                wasHidden: false\n            };\n        };\n        _this.resetHiddenStatus = function() {\n            _this.setState(_assign(_assign({}, _this.state), {\n                wasHidden: false\n            }));\n        };\n        _this.setHiddenStatus = function() {\n            _this.setState(_assign(_assign({}, _this.state), {\n                wasHidden: true\n            }));\n        };\n        _this.setHiddenStateOnVisibilityHidden = function() {\n            if (document.visibilityState !== \"hidden\") {\n                return;\n            }\n            _this.setHiddenStatus();\n        };\n        _this.clearPreventFocusTimeout = function() {\n            if (_this.preventFocusTimeout) {\n                clearTimeout(_this.preventFocusTimeout);\n            }\n        };\n        _this.setFocus = function() {\n            var _a, _b;\n            (_b = (_a = _this.input) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.call(_a, {\n                preventScroll: true\n            });\n        };\n        _this.setBlur = function() {\n            var _a, _b;\n            (_b = (_a = _this.input) === null || _a === void 0 ? void 0 : _a.blur) === null || _b === void 0 ? void 0 : _b.call(_a);\n            _this.cancelFocusInput();\n        };\n        _this.deferBlur = function() {\n            requestAnimationFrame(function() {\n                _this.setBlur();\n            });\n        };\n        _this.setOpen = function(open, skipSetBlur) {\n            if (skipSetBlur === void 0) {\n                skipSetBlur = false;\n            }\n            _this.setState({\n                open: open,\n                preSelection: open && _this.state.open ? _this.state.preSelection : _this.calcInitialState().preSelection,\n                lastPreSelectChange: PRESELECT_CHANGE_VIA_NAVIGATE\n            }, function() {\n                if (!open) {\n                    _this.setState(function(prev) {\n                        return {\n                            focused: skipSetBlur ? prev.focused : false\n                        };\n                    }, function() {\n                        !skipSetBlur && _this.deferBlur();\n                        _this.setState({\n                            inputValue: null\n                        });\n                    });\n                }\n            });\n        };\n        _this.inputOk = function() {\n            return (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_48__.isDate)(_this.state.preSelection);\n        };\n        _this.isCalendarOpen = function() {\n            return _this.props.open === undefined ? _this.state.open && !_this.props.disabled && !_this.props.readOnly : _this.props.open;\n        };\n        _this.handleFocus = function(event) {\n            var _a, _b;\n            var isAutoReFocus = _this.state.wasHidden;\n            var isOpenAllowed = isAutoReFocus ? _this.state.open : true;\n            if (isAutoReFocus) {\n                _this.resetHiddenStatus();\n            }\n            if (!_this.state.preventFocus) {\n                (_b = (_a = _this.props).onFocus) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n                if (isOpenAllowed && !_this.props.preventOpenOnFocus && !_this.props.readOnly) {\n                    _this.setOpen(true);\n                }\n            }\n            _this.setState({\n                focused: true\n            });\n        };\n        _this.sendFocusBackToInput = function() {\n            // Clear previous timeout if it exists\n            if (_this.preventFocusTimeout) {\n                _this.clearPreventFocusTimeout();\n            }\n            // close the popper and refocus the input\n            // stop the input from auto opening onFocus\n            // setFocus to the input\n            _this.setState({\n                preventFocus: true\n            }, function() {\n                _this.preventFocusTimeout = setTimeout(function() {\n                    _this.setFocus();\n                    _this.setState({\n                        preventFocus: false\n                    });\n                });\n            });\n        };\n        _this.cancelFocusInput = function() {\n            clearTimeout(_this.inputFocusTimeout);\n            _this.inputFocusTimeout = undefined;\n        };\n        _this.deferFocusInput = function() {\n            _this.cancelFocusInput();\n            _this.inputFocusTimeout = setTimeout(function() {\n                return _this.setFocus();\n            }, 1);\n        };\n        _this.handleDropdownFocus = function() {\n            _this.cancelFocusInput();\n        };\n        _this.handleBlur = function(event) {\n            var _a, _b;\n            if (!_this.state.open || _this.props.withPortal || _this.props.showTimeInput) {\n                (_b = (_a = _this.props).onBlur) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n            }\n            if (_this.state.open && _this.props.open === false) {\n                _this.setOpen(false);\n            }\n            _this.setState({\n                focused: false\n            });\n        };\n        _this.handleCalendarClickOutside = function(event) {\n            var _a, _b;\n            if (!_this.props.inline) {\n                _this.setOpen(false);\n            }\n            (_b = (_a = _this.props).onClickOutside) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n            if (_this.props.withPortal) {\n                event.preventDefault();\n            }\n        };\n        // handleChange is called when user types in the textbox\n        _this.handleChange = function() {\n            var _a, _b, _c, _d, _e;\n            var allArgs = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                allArgs[_i] = arguments[_i];\n            }\n            var event = allArgs[0];\n            if (_this.props.onChangeRaw) {\n                _this.props.onChangeRaw.apply(_this, allArgs);\n                if (!event || typeof event.isDefaultPrevented !== \"function\" || event.isDefaultPrevented()) {\n                    return;\n                }\n            }\n            _this.setState({\n                inputValue: (event === null || event === void 0 ? void 0 : event.target) instanceof HTMLInputElement ? event.target.value : null,\n                lastPreSelectChange: PRESELECT_CHANGE_VIA_INPUT\n            });\n            var _f = _this.props, selectsRange = _f.selectsRange, startDate = _f.startDate, endDate = _f.endDate;\n            var dateFormat = (_a = _this.props.dateFormat) !== null && _a !== void 0 ? _a : DatePicker.defaultProps.dateFormat;\n            var strictParsing = (_b = _this.props.strictParsing) !== null && _b !== void 0 ? _b : DatePicker.defaultProps.strictParsing;\n            var value = (event === null || event === void 0 ? void 0 : event.target) instanceof HTMLInputElement ? event.target.value : \"\";\n            if (selectsRange) {\n                var _g = value.split(dateFormat.includes(\"-\") ? DATE_RANGE_SEPARATOR : \"-\", 2).map(function(val) {\n                    return val.trim();\n                }), valueStart = _g[0], valueEnd = _g[1];\n                var startDateNew = parseDate(valueStart !== null && valueStart !== void 0 ? valueStart : \"\", dateFormat, _this.props.locale, strictParsing);\n                var endDateNew = parseDate(valueEnd !== null && valueEnd !== void 0 ? valueEnd : \"\", dateFormat, _this.props.locale, strictParsing);\n                var startChanged = (startDate === null || startDate === void 0 ? void 0 : startDate.getTime()) !== (startDateNew === null || startDateNew === void 0 ? void 0 : startDateNew.getTime());\n                var endChanged = (endDate === null || endDate === void 0 ? void 0 : endDate.getTime()) !== (endDateNew === null || endDateNew === void 0 ? void 0 : endDateNew.getTime());\n                if (!startChanged && !endChanged) {\n                    return;\n                }\n                if (startDateNew && isDayDisabled(startDateNew, _this.props)) {\n                    return;\n                }\n                if (endDateNew && isDayDisabled(endDateNew, _this.props)) {\n                    return;\n                }\n                (_d = (_c = _this.props).onChange) === null || _d === void 0 ? void 0 : _d.call(_c, [\n                    startDateNew,\n                    endDateNew\n                ], event);\n            } else {\n                // not selectsRange\n                var date = parseDate(value, dateFormat, _this.props.locale, strictParsing, (_e = _this.props.selected) !== null && _e !== void 0 ? _e : undefined);\n                // Update selection if either (1) date was successfully parsed, or (2) input field is empty\n                if (date || !value) {\n                    _this.setSelected(date, event, true);\n                }\n            }\n        };\n        _this.handleSelect = function(date, event, monthSelectedIn) {\n            if (_this.props.readOnly) return;\n            if (_this.props.shouldCloseOnSelect && !_this.props.showTimeSelect) {\n                // Preventing onFocus event to fix issue\n                // https://github.com/Hacker0x01/react-datepicker/issues/628\n                _this.sendFocusBackToInput();\n            }\n            if (_this.props.onChangeRaw) {\n                _this.props.onChangeRaw(event);\n            }\n            _this.setSelected(date, event, false, monthSelectedIn);\n            if (_this.props.showDateSelect) {\n                _this.setState({\n                    isRenderAriaLiveMessage: true\n                });\n            }\n            if (!_this.props.shouldCloseOnSelect || _this.props.showTimeSelect) {\n                _this.setPreSelection(date);\n            } else if (!_this.props.inline) {\n                if (!_this.props.selectsRange) {\n                    _this.setOpen(false);\n                }\n                var _a = _this.props, startDate = _a.startDate, endDate = _a.endDate;\n                if (startDate && !endDate && (_this.props.swapRange || !isDateBefore(date, startDate))) {\n                    _this.setOpen(false);\n                }\n            }\n        };\n        // setSelected is called either from handleChange (user typed date into textbox and it was parsed) or handleSelect (user selected date from calendar using mouse or keyboard)\n        _this.setSelected = function(date, event, keepInput, monthSelectedIn) {\n            var _a, _b;\n            var changedDate = date;\n            // Early return if selected year/month/day is disabled\n            if (_this.props.showYearPicker) {\n                if (changedDate !== null && isYearDisabled((0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(changedDate), _this.props)) {\n                    return;\n                }\n            } else if (_this.props.showMonthYearPicker) {\n                if (changedDate !== null && isMonthDisabled(changedDate, _this.props)) {\n                    return;\n                }\n            } else {\n                if (changedDate !== null && isDayDisabled(changedDate, _this.props)) {\n                    return;\n                }\n            }\n            var _c = _this.props, onChange = _c.onChange, selectsRange = _c.selectsRange, startDate = _c.startDate, endDate = _c.endDate, selectsMultiple = _c.selectsMultiple, selectedDates = _c.selectedDates, minTime = _c.minTime, swapRange = _c.swapRange;\n            if (!isEqual(_this.props.selected, changedDate) || _this.props.allowSameDay || selectsRange || selectsMultiple) {\n                if (changedDate !== null) {\n                    // Preserve previously selected time if only date is currently being changed\n                    if (_this.props.selected && (!keepInput || !_this.props.showTimeSelect && !_this.props.showTimeSelectOnly && !_this.props.showTimeInput)) {\n                        changedDate = setTime(changedDate, {\n                            hour: (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_34__.getHours)(_this.props.selected),\n                            minute: (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_35__.getMinutes)(_this.props.selected),\n                            second: (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_36__.getSeconds)(_this.props.selected)\n                        });\n                    }\n                    // If minTime is present then set the time to minTime\n                    if (!keepInput && (_this.props.showTimeSelect || _this.props.showTimeSelectOnly)) {\n                        if (minTime) {\n                            changedDate = setTime(changedDate, {\n                                hour: minTime.getHours(),\n                                minute: minTime.getMinutes(),\n                                second: minTime.getSeconds()\n                            });\n                        }\n                    }\n                    if (!_this.props.inline) {\n                        _this.setState({\n                            preSelection: changedDate\n                        });\n                    }\n                    if (!_this.props.focusSelectedMonth) {\n                        _this.setState({\n                            monthSelectedIn: monthSelectedIn\n                        });\n                    }\n                }\n                if (selectsRange) {\n                    var noRanges = !startDate && !endDate;\n                    var hasStartRange = startDate && !endDate;\n                    var isRangeFilled = startDate && endDate;\n                    if (noRanges) {\n                        onChange === null || onChange === void 0 ? void 0 : onChange([\n                            changedDate,\n                            null\n                        ], event);\n                    } else if (hasStartRange) {\n                        if (changedDate === null) {\n                            onChange === null || onChange === void 0 ? void 0 : onChange([\n                                null,\n                                null\n                            ], event);\n                        } else if (isDateBefore(changedDate, startDate)) {\n                            if (swapRange) {\n                                onChange === null || onChange === void 0 ? void 0 : onChange([\n                                    changedDate,\n                                    startDate\n                                ], event);\n                            } else {\n                                onChange === null || onChange === void 0 ? void 0 : onChange([\n                                    changedDate,\n                                    null\n                                ], event);\n                            }\n                        } else {\n                            onChange === null || onChange === void 0 ? void 0 : onChange([\n                                startDate,\n                                changedDate\n                            ], event);\n                        }\n                    }\n                    if (isRangeFilled) {\n                        onChange === null || onChange === void 0 ? void 0 : onChange([\n                            changedDate,\n                            null\n                        ], event);\n                    }\n                } else if (selectsMultiple) {\n                    if (changedDate !== null) {\n                        if (!(selectedDates === null || selectedDates === void 0 ? void 0 : selectedDates.length)) {\n                            onChange === null || onChange === void 0 ? void 0 : onChange([\n                                changedDate\n                            ], event);\n                        } else {\n                            var isChangedDateAlreadySelected = selectedDates.some(function(selectedDate) {\n                                return isSameDay(selectedDate, changedDate);\n                            });\n                            if (isChangedDateAlreadySelected) {\n                                var nextDates = selectedDates.filter(function(selectedDate) {\n                                    return !isSameDay(selectedDate, changedDate);\n                                });\n                                onChange === null || onChange === void 0 ? void 0 : onChange(nextDates, event);\n                            } else {\n                                onChange === null || onChange === void 0 ? void 0 : onChange(__spreadArray(__spreadArray([], selectedDates, true), [\n                                    changedDate\n                                ], false), event);\n                            }\n                        }\n                    }\n                } else {\n                    onChange === null || onChange === void 0 ? void 0 : onChange(changedDate, event);\n                }\n            }\n            if (!keepInput) {\n                (_b = (_a = _this.props).onSelect) === null || _b === void 0 ? void 0 : _b.call(_a, changedDate, event);\n                _this.setState({\n                    inputValue: null\n                });\n            }\n        };\n        // When checking preSelection via min/maxDate, times need to be manipulated via getStartOfDay/getEndOfDay\n        _this.setPreSelection = function(date) {\n            if (_this.props.readOnly) return;\n            var hasMinDate = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_48__.isDate)(_this.props.minDate);\n            var hasMaxDate = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_48__.isDate)(_this.props.maxDate);\n            var isValidDateSelection = true;\n            if (date) {\n                var dateStartOfDay = getStartOfDay(date);\n                if (hasMinDate && hasMaxDate) {\n                    // isDayInRange uses getStartOfDay internally, so not necessary to manipulate times here\n                    isValidDateSelection = isDayInRange(date, _this.props.minDate, _this.props.maxDate);\n                } else if (hasMinDate) {\n                    var minDateStartOfDay = getStartOfDay(_this.props.minDate);\n                    isValidDateSelection = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_52__.isAfter)(date, minDateStartOfDay) || isEqual(dateStartOfDay, minDateStartOfDay);\n                } else if (hasMaxDate) {\n                    var maxDateEndOfDay = getEndOfDay(_this.props.maxDate);\n                    isValidDateSelection = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_7__.isBefore)(date, maxDateEndOfDay) || isEqual(dateStartOfDay, maxDateEndOfDay);\n                }\n            }\n            if (isValidDateSelection) {\n                _this.setState({\n                    preSelection: date\n                });\n            }\n        };\n        _this.toggleCalendar = function() {\n            _this.setOpen(!_this.state.open);\n        };\n        _this.handleTimeChange = function(time) {\n            var _a, _b;\n            if (_this.props.selectsRange || _this.props.selectsMultiple) {\n                return;\n            }\n            var selected = _this.props.selected ? _this.props.selected : _this.getPreSelection();\n            var changedDate = _this.props.selected ? time : setTime(selected, {\n                hour: (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_34__.getHours)(time),\n                minute: (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_35__.getMinutes)(time)\n            });\n            _this.setState({\n                preSelection: changedDate\n            });\n            (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, changedDate);\n            if (_this.props.shouldCloseOnSelect && !_this.props.showTimeInput) {\n                _this.sendFocusBackToInput();\n                _this.setOpen(false);\n            }\n            if (_this.props.showTimeInput) {\n                _this.setOpen(true);\n            }\n            if (_this.props.showTimeSelectOnly || _this.props.showTimeSelect) {\n                _this.setState({\n                    isRenderAriaLiveMessage: true\n                });\n            }\n            _this.setState({\n                inputValue: null\n            });\n        };\n        _this.onInputClick = function() {\n            var _a, _b;\n            if (!_this.props.disabled && !_this.props.readOnly) {\n                _this.setOpen(true);\n            }\n            (_b = (_a = _this.props).onInputClick) === null || _b === void 0 ? void 0 : _b.call(_a);\n        };\n        _this.onInputKeyDown = function(event) {\n            var _a, _b, _c, _d, _e, _f;\n            (_b = (_a = _this.props).onKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n            var eventKey = event.key;\n            if (!_this.state.open && !_this.props.inline && !_this.props.preventOpenOnFocus) {\n                if (eventKey === KeyType.ArrowDown || eventKey === KeyType.ArrowUp || eventKey === KeyType.Enter) {\n                    (_c = _this.onInputClick) === null || _c === void 0 ? void 0 : _c.call(_this);\n                }\n                return;\n            }\n            // if calendar is open, these keys will focus the selected item\n            if (_this.state.open) {\n                if (eventKey === KeyType.ArrowDown || eventKey === KeyType.ArrowUp) {\n                    event.preventDefault();\n                    var selectorString = _this.props.showTimeSelectOnly ? \".react-datepicker__time-list-item[tabindex='0']\" : _this.props.showWeekPicker && _this.props.showWeekNumbers ? '.react-datepicker__week-number[tabindex=\"0\"]' : _this.props.showFullMonthYearPicker || _this.props.showMonthYearPicker ? '.react-datepicker__month-text[tabindex=\"0\"]' : '.react-datepicker__day[tabindex=\"0\"]';\n                    var selectedItem = ((_d = _this.calendar) === null || _d === void 0 ? void 0 : _d.containerRef.current) instanceof Element && _this.calendar.containerRef.current.querySelector(selectorString);\n                    selectedItem instanceof HTMLElement && selectedItem.focus({\n                        preventScroll: true\n                    });\n                    return;\n                }\n                var copy = newDate(_this.state.preSelection);\n                if (eventKey === KeyType.Enter) {\n                    event.preventDefault();\n                    event.target.blur();\n                    if (_this.inputOk() && _this.state.lastPreSelectChange === PRESELECT_CHANGE_VIA_NAVIGATE) {\n                        _this.handleSelect(copy, event);\n                        !_this.props.shouldCloseOnSelect && _this.setPreSelection(copy);\n                    } else {\n                        _this.setOpen(false);\n                    }\n                } else if (eventKey === KeyType.Escape) {\n                    event.preventDefault();\n                    event.target.blur();\n                    _this.sendFocusBackToInput();\n                    _this.setOpen(false);\n                } else if (eventKey === KeyType.Tab) {\n                    _this.setOpen(false);\n                }\n                if (!_this.inputOk()) {\n                    (_f = (_e = _this.props).onInputError) === null || _f === void 0 ? void 0 : _f.call(_e, {\n                        code: 1,\n                        msg: INPUT_ERR_1\n                    });\n                }\n            }\n        };\n        _this.onPortalKeyDown = function(event) {\n            var eventKey = event.key;\n            if (eventKey === KeyType.Escape) {\n                event.preventDefault();\n                _this.setState({\n                    preventFocus: true\n                }, function() {\n                    _this.setOpen(false);\n                    setTimeout(function() {\n                        _this.setFocus();\n                        _this.setState({\n                            preventFocus: false\n                        });\n                    });\n                });\n            }\n        };\n        // keyDown events passed down to day.jsx\n        _this.onDayKeyDown = function(event) {\n            var _a, _b, _c, _d, _e, _f;\n            var _g = _this.props, minDate = _g.minDate, maxDate = _g.maxDate, disabledKeyboardNavigation = _g.disabledKeyboardNavigation, showWeekPicker = _g.showWeekPicker, shouldCloseOnSelect = _g.shouldCloseOnSelect, locale = _g.locale, calendarStartDay = _g.calendarStartDay, adjustDateOnChange = _g.adjustDateOnChange, inline = _g.inline;\n            (_b = (_a = _this.props).onKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n            if (disabledKeyboardNavigation) return;\n            var eventKey = event.key;\n            var isShiftKeyActive = event.shiftKey;\n            var copy = newDate(_this.state.preSelection);\n            var calculateNewDate = function(eventKey, date) {\n                var newCalculatedDate = date;\n                switch(eventKey){\n                    case KeyType.ArrowRight:\n                        newCalculatedDate = showWeekPicker ? (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_56__.addWeeks)(date, 1) : (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_55__.addDays)(date, 1);\n                        break;\n                    case KeyType.ArrowLeft:\n                        newCalculatedDate = showWeekPicker ? (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_63__.subWeeks)(date, 1) : (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_64__.subDays)(date, 1);\n                        break;\n                    case KeyType.ArrowUp:\n                        newCalculatedDate = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_63__.subWeeks)(date, 1);\n                        break;\n                    case KeyType.ArrowDown:\n                        newCalculatedDate = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_56__.addWeeks)(date, 1);\n                        break;\n                    case KeyType.PageUp:\n                        newCalculatedDate = isShiftKeyActive ? (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_43__.subYears)(date, 1) : (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_37__.subMonths)(date, 1);\n                        break;\n                    case KeyType.PageDown:\n                        newCalculatedDate = isShiftKeyActive ? (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_45__.addYears)(date, 1) : (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_39__.addMonths)(date, 1);\n                        break;\n                    case KeyType.Home:\n                        newCalculatedDate = getStartOfWeek(date, locale, calendarStartDay);\n                        break;\n                    case KeyType.End:\n                        newCalculatedDate = getEndOfWeek(date);\n                        break;\n                }\n                return newCalculatedDate;\n            };\n            var getNewDate = function(eventKey, date) {\n                var MAX_ITERATIONS = 40;\n                var eventKeyCopy = eventKey;\n                var validDateFound = false;\n                var iterations = 0;\n                var newSelection = calculateNewDate(eventKey, date);\n                while(!validDateFound){\n                    if (iterations >= MAX_ITERATIONS) {\n                        newSelection = date;\n                        break;\n                    }\n                    // if minDate exists and the new selection is before the min date, get the nearest date that isn't disabled\n                    if (minDate && newSelection < minDate) {\n                        eventKeyCopy = KeyType.ArrowRight;\n                        newSelection = isDayDisabled(minDate, _this.props) ? calculateNewDate(eventKeyCopy, newSelection) : minDate;\n                    }\n                    // if maxDate exists and the new selection is after the max date, get the nearest date that isn't disabled\n                    if (maxDate && newSelection > maxDate) {\n                        eventKeyCopy = KeyType.ArrowLeft;\n                        newSelection = isDayDisabled(maxDate, _this.props) ? calculateNewDate(eventKeyCopy, newSelection) : maxDate;\n                    }\n                    if (isDayDisabled(newSelection, _this.props)) {\n                        // if PageUp and Home is pressed to a disabled date, it will try to find the next available date after\n                        if (eventKeyCopy === KeyType.PageUp || eventKeyCopy === KeyType.Home) {\n                            eventKeyCopy = KeyType.ArrowRight;\n                        }\n                        // if PageDown and End is pressed to a disabled date, it will try to find the next available date before\n                        if (eventKeyCopy === KeyType.PageDown || eventKeyCopy === KeyType.End) {\n                            eventKeyCopy = KeyType.ArrowLeft;\n                        }\n                        newSelection = calculateNewDate(eventKeyCopy, newSelection);\n                    } else {\n                        validDateFound = true;\n                    }\n                    iterations++;\n                }\n                return newSelection;\n            };\n            if (eventKey === KeyType.Enter) {\n                event.preventDefault();\n                _this.handleSelect(copy, event);\n                !shouldCloseOnSelect && _this.setPreSelection(copy);\n                return;\n            } else if (eventKey === KeyType.Escape) {\n                event.preventDefault();\n                _this.setOpen(false);\n                if (!_this.inputOk()) {\n                    (_d = (_c = _this.props).onInputError) === null || _d === void 0 ? void 0 : _d.call(_c, {\n                        code: 1,\n                        msg: INPUT_ERR_1\n                    });\n                }\n                return;\n            }\n            var newSelection = null;\n            switch(eventKey){\n                case KeyType.ArrowLeft:\n                case KeyType.ArrowRight:\n                case KeyType.ArrowUp:\n                case KeyType.ArrowDown:\n                case KeyType.PageUp:\n                case KeyType.PageDown:\n                case KeyType.Home:\n                case KeyType.End:\n                    newSelection = getNewDate(eventKey, copy);\n                    break;\n            }\n            if (!newSelection) {\n                (_f = (_e = _this.props).onInputError) === null || _f === void 0 ? void 0 : _f.call(_e, {\n                    code: 1,\n                    msg: INPUT_ERR_1\n                });\n                return;\n            }\n            event.preventDefault();\n            _this.setState({\n                lastPreSelectChange: PRESELECT_CHANGE_VIA_NAVIGATE\n            });\n            if (adjustDateOnChange) {\n                _this.setSelected(newSelection);\n            }\n            _this.setPreSelection(newSelection);\n            // need to figure out whether month has changed to focus day in inline version\n            if (inline) {\n                var prevMonth = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_30__.getMonth)(copy);\n                var newMonth = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_30__.getMonth)(newSelection);\n                var prevYear = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(copy);\n                var newYear = (0,_barrel_optimize_names_addDays_addHours_addMinutes_addMonths_addQuarters_addSeconds_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_differenceInCalendarQuarters_differenceInCalendarYears_differenceInDays_endOfDay_endOfMonth_endOfWeek_endOfYear_format_getDate_getDay_getHours_getISOWeek_getMinutes_getMonth_getQuarter_getSeconds_getTime_getYear_isAfter_isBefore_isDate_isEqual_isSameDay_isSameMonth_isSameQuarter_isSameYear_isValid_isWithinInterval_max_min_parse_parseISO_setHours_setMinutes_setMonth_setQuarter_setSeconds_setYear_startOfDay_startOfMonth_startOfQuarter_startOfWeek_startOfYear_subDays_subMonths_subQuarters_subWeeks_subYears_toDate_date_fns__WEBPACK_IMPORTED_MODULE_29__.getYear)(newSelection);\n                if (prevMonth !== newMonth || prevYear !== newYear) {\n                    // month has changed\n                    _this.setState({\n                        shouldFocusDayInline: true\n                    });\n                } else {\n                    // month hasn't changed\n                    _this.setState({\n                        shouldFocusDayInline: false\n                    });\n                }\n            }\n        };\n        // handle generic key down events in the popper that do not adjust or select dates\n        // ex: while focusing prev and next month buttons\n        _this.onPopperKeyDown = function(event) {\n            var eventKey = event.key;\n            if (eventKey === KeyType.Escape) {\n                event.preventDefault();\n                _this.sendFocusBackToInput();\n                _this.setOpen(false);\n            }\n        };\n        _this.onClearClick = function(event) {\n            if (event) {\n                if (event.preventDefault) {\n                    event.preventDefault();\n                }\n            }\n            _this.sendFocusBackToInput();\n            var _a = _this.props, selectsRange = _a.selectsRange, onChange = _a.onChange;\n            if (selectsRange) {\n                onChange === null || onChange === void 0 ? void 0 : onChange([\n                    null,\n                    null\n                ], event);\n            } else {\n                onChange === null || onChange === void 0 ? void 0 : onChange(null, event);\n            }\n            _this.setState({\n                inputValue: null\n            });\n        };\n        _this.clear = function() {\n            _this.onClearClick();\n        };\n        _this.onScroll = function(event) {\n            if (typeof _this.props.closeOnScroll === \"boolean\" && _this.props.closeOnScroll) {\n                if (event.target === document || event.target === document.documentElement || event.target === document.body) {\n                    _this.setOpen(false);\n                }\n            } else if (typeof _this.props.closeOnScroll === \"function\") {\n                if (_this.props.closeOnScroll(event)) {\n                    _this.setOpen(false);\n                }\n            }\n        };\n        _this.renderCalendar = function() {\n            var _a, _b;\n            if (!_this.props.inline && !_this.isCalendarOpen()) {\n                return null;\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Calendar, _assign({\n                showMonthYearDropdown: undefined,\n                ref: function(elem) {\n                    _this.calendar = elem;\n                }\n            }, _this.props, _this.state, {\n                setOpen: _this.setOpen,\n                dateFormat: (_a = _this.props.dateFormatCalendar) !== null && _a !== void 0 ? _a : DatePicker.defaultProps.dateFormatCalendar,\n                onSelect: _this.handleSelect,\n                onClickOutside: _this.handleCalendarClickOutside,\n                holidays: getHolidaysMap(_this.modifyHolidays()),\n                outsideClickIgnoreClass: outsideClickIgnoreClass,\n                onDropdownFocus: _this.handleDropdownFocus,\n                onTimeChange: _this.handleTimeChange,\n                className: _this.props.calendarClassName,\n                container: _this.props.calendarContainer,\n                handleOnKeyDown: _this.props.onKeyDown,\n                handleOnDayKeyDown: _this.onDayKeyDown,\n                setPreSelection: _this.setPreSelection,\n                dropdownMode: (_b = _this.props.dropdownMode) !== null && _b !== void 0 ? _b : DatePicker.defaultProps.dropdownMode\n            }), _this.props.children);\n        };\n        _this.renderAriaLiveRegion = function() {\n            var _a = _this.props, _b = _a.dateFormat, dateFormat = _b === void 0 ? DatePicker.defaultProps.dateFormat : _b, locale = _a.locale;\n            var isContainsTime = _this.props.showTimeInput || _this.props.showTimeSelect;\n            var longDateFormat = isContainsTime ? \"PPPPp\" : \"PPPP\";\n            var ariaLiveMessage;\n            if (_this.props.selectsRange) {\n                ariaLiveMessage = \"Selected start date: \".concat(safeDateFormat(_this.props.startDate, {\n                    dateFormat: longDateFormat,\n                    locale: locale\n                }), \". \").concat(_this.props.endDate ? \"End date: \" + safeDateFormat(_this.props.endDate, {\n                    dateFormat: longDateFormat,\n                    locale: locale\n                }) : \"\");\n            } else {\n                if (_this.props.showTimeSelectOnly) {\n                    ariaLiveMessage = \"Selected time: \".concat(safeDateFormat(_this.props.selected, {\n                        dateFormat: dateFormat,\n                        locale: locale\n                    }));\n                } else if (_this.props.showYearPicker) {\n                    ariaLiveMessage = \"Selected year: \".concat(safeDateFormat(_this.props.selected, {\n                        dateFormat: \"yyyy\",\n                        locale: locale\n                    }));\n                } else if (_this.props.showMonthYearPicker) {\n                    ariaLiveMessage = \"Selected month: \".concat(safeDateFormat(_this.props.selected, {\n                        dateFormat: \"MMMM yyyy\",\n                        locale: locale\n                    }));\n                } else if (_this.props.showQuarterYearPicker) {\n                    ariaLiveMessage = \"Selected quarter: \".concat(safeDateFormat(_this.props.selected, {\n                        dateFormat: \"yyyy, QQQ\",\n                        locale: locale\n                    }));\n                } else {\n                    ariaLiveMessage = \"Selected date: \".concat(safeDateFormat(_this.props.selected, {\n                        dateFormat: longDateFormat,\n                        locale: locale\n                    }));\n                }\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                role: \"alert\",\n                \"aria-live\": \"polite\",\n                className: \"react-datepicker__aria-live\"\n            }, ariaLiveMessage);\n        };\n        _this.renderDateInput = function() {\n            var _a, _b;\n            var _c;\n            var className = (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(_this.props.className, (_a = {}, _a[outsideClickIgnoreClass] = _this.state.open, _a));\n            var customInput = _this.props.customInput || /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"input\", {\n                type: \"text\"\n            });\n            var customInputRef = _this.props.customInputRef || \"ref\";\n            var _d = _this.props, _e = _d.dateFormat, dateFormat = _e === void 0 ? DatePicker.defaultProps.dateFormat : _e, locale = _d.locale;\n            var inputValue = typeof _this.props.value === \"string\" ? _this.props.value : typeof _this.state.inputValue === \"string\" ? _this.state.inputValue : _this.props.selectsRange ? safeDateRangeFormat(_this.props.startDate, _this.props.endDate, {\n                dateFormat: dateFormat,\n                locale: locale\n            }) : _this.props.selectsMultiple ? safeMultipleDatesFormat((_c = _this.props.selectedDates) !== null && _c !== void 0 ? _c : [], {\n                dateFormat: dateFormat,\n                locale: locale\n            }) : safeDateFormat(_this.props.selected, {\n                dateFormat: dateFormat,\n                locale: locale\n            });\n            return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.cloneElement)(customInput, (_b = {}, _b[customInputRef] = function(input) {\n                _this.input = input;\n            }, _b.value = inputValue, _b.onBlur = _this.handleBlur, _b.onChange = _this.handleChange, _b.onClick = _this.onInputClick, _b.onFocus = _this.handleFocus, _b.onKeyDown = _this.onInputKeyDown, _b.id = _this.props.id, _b.name = _this.props.name, _b.form = _this.props.form, _b.autoFocus = _this.props.autoFocus, _b.placeholder = _this.props.placeholderText, _b.disabled = _this.props.disabled, _b.autoComplete = _this.props.autoComplete, _b.className = (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(customInput.props.className, className), _b.title = _this.props.title, _b.readOnly = _this.props.readOnly, _b.required = _this.props.required, _b.tabIndex = _this.props.tabIndex, _b[\"aria-describedby\"] = _this.props.ariaDescribedBy, _b[\"aria-invalid\"] = _this.props.ariaInvalid, _b[\"aria-labelledby\"] = _this.props.ariaLabelledBy, _b[\"aria-required\"] = _this.props.ariaRequired, _b));\n        };\n        _this.renderClearButton = function() {\n            var _a = _this.props, isClearable = _a.isClearable, disabled = _a.disabled, selected = _a.selected, startDate = _a.startDate, endDate = _a.endDate, clearButtonTitle = _a.clearButtonTitle, _b = _a.clearButtonClassName, clearButtonClassName = _b === void 0 ? \"\" : _b, _c = _a.ariaLabelClose, ariaLabelClose = _c === void 0 ? \"Close\" : _c, selectedDates = _a.selectedDates, readOnly = _a.readOnly;\n            if (isClearable && !readOnly && (selected != null || startDate != null || endDate != null || (selectedDates === null || selectedDates === void 0 ? void 0 : selectedDates.length))) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"button\", {\n                    type: \"button\",\n                    className: (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker__close-icon\", clearButtonClassName, {\n                        \"react-datepicker__close-icon--disabled\": disabled\n                    }),\n                    disabled: disabled,\n                    \"aria-label\": ariaLabelClose,\n                    onClick: _this.onClearClick,\n                    title: clearButtonTitle,\n                    tabIndex: -1\n                });\n            } else {\n                return null;\n            }\n        };\n        _this.state = _this.calcInitialState();\n        _this.preventFocusTimeout = undefined;\n        return _this;\n    }\n    Object.defineProperty(DatePicker, \"defaultProps\", {\n        get: function() {\n            return {\n                allowSameDay: false,\n                dateFormat: \"MM/dd/yyyy\",\n                dateFormatCalendar: \"LLLL yyyy\",\n                disabled: false,\n                disabledKeyboardNavigation: false,\n                dropdownMode: \"scroll\",\n                preventOpenOnFocus: false,\n                monthsShown: 1,\n                readOnly: false,\n                withPortal: false,\n                selectsDisabledDaysInRange: false,\n                shouldCloseOnSelect: true,\n                showTimeSelect: false,\n                showTimeInput: false,\n                showPreviousMonths: false,\n                showMonthYearPicker: false,\n                showFullMonthYearPicker: false,\n                showTwoColumnMonthYearPicker: false,\n                showFourColumnMonthYearPicker: false,\n                showYearPicker: false,\n                showQuarterYearPicker: false,\n                showWeekPicker: false,\n                strictParsing: false,\n                swapRange: false,\n                timeIntervals: 30,\n                timeCaption: \"Time\",\n                previousMonthAriaLabel: \"Previous Month\",\n                previousMonthButtonLabel: \"Previous Month\",\n                nextMonthAriaLabel: \"Next Month\",\n                nextMonthButtonLabel: \"Next Month\",\n                previousYearAriaLabel: \"Previous Year\",\n                previousYearButtonLabel: \"Previous Year\",\n                nextYearAriaLabel: \"Next Year\",\n                nextYearButtonLabel: \"Next Year\",\n                timeInputLabel: \"Time\",\n                enableTabLoop: true,\n                yearItemNumber: DEFAULT_YEAR_ITEM_NUMBER,\n                focusSelectedMonth: false,\n                showPopperArrow: true,\n                excludeScrollbar: true,\n                customTimeInput: null,\n                calendarStartDay: undefined,\n                toggleCalendarOnIconClick: false,\n                usePointerEvent: false\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    DatePicker.prototype.componentDidMount = function() {\n        window.addEventListener(\"scroll\", this.onScroll, true);\n        document.addEventListener(\"visibilitychange\", this.setHiddenStateOnVisibilityHidden);\n    };\n    DatePicker.prototype.componentDidUpdate = function(prevProps, prevState) {\n        var _a, _b, _c, _d;\n        if (prevProps.inline && hasPreSelectionChanged(prevProps.selected, this.props.selected)) {\n            this.setPreSelection(this.props.selected);\n        }\n        if (this.state.monthSelectedIn !== undefined && prevProps.monthsShown !== this.props.monthsShown) {\n            this.setState({\n                monthSelectedIn: 0\n            });\n        }\n        if (prevProps.highlightDates !== this.props.highlightDates) {\n            this.setState({\n                highlightDates: getHighLightDaysMap(this.props.highlightDates)\n            });\n        }\n        if (!prevState.focused && !isEqual(prevProps.selected, this.props.selected)) {\n            this.setState({\n                inputValue: null\n            });\n        }\n        if (prevState.open !== this.state.open) {\n            if (prevState.open === false && this.state.open === true) {\n                (_b = (_a = this.props).onCalendarOpen) === null || _b === void 0 ? void 0 : _b.call(_a);\n            }\n            if (prevState.open === true && this.state.open === false) {\n                (_d = (_c = this.props).onCalendarClose) === null || _d === void 0 ? void 0 : _d.call(_c);\n            }\n        }\n    };\n    DatePicker.prototype.componentWillUnmount = function() {\n        this.clearPreventFocusTimeout();\n        window.removeEventListener(\"scroll\", this.onScroll, true);\n        document.removeEventListener(\"visibilitychange\", this.setHiddenStateOnVisibilityHidden);\n    };\n    DatePicker.prototype.renderInputContainer = function() {\n        var _a = this.props, showIcon = _a.showIcon, icon = _a.icon, calendarIconClassname = _a.calendarIconClassname, calendarIconClassName = _a.calendarIconClassName, toggleCalendarOnIconClick = _a.toggleCalendarOnIconClick;\n        var open = this.state.open;\n        if (calendarIconClassname) {\n            console.warn(\"calendarIconClassname props is deprecated. should use calendarIconClassName props.\");\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"react-datepicker__input-container\".concat(showIcon ? \" react-datepicker__view-calendar-icon\" : \"\")\n        }, showIcon && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CalendarIcon, _assign({\n            icon: icon,\n            className: (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(calendarIconClassName, !calendarIconClassName && calendarIconClassname, open && \"react-datepicker-ignore-onclickoutside\")\n        }, toggleCalendarOnIconClick ? {\n            onClick: this.toggleCalendar\n        } : null)), this.state.isRenderAriaLiveMessage && this.renderAriaLiveRegion(), this.renderDateInput(), this.renderClearButton());\n    };\n    DatePicker.prototype.render = function() {\n        var calendar = this.renderCalendar();\n        if (this.props.inline) return calendar;\n        if (this.props.withPortal) {\n            var portalContainer = this.state.open ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(TabLoop, {\n                enableTabLoop: this.props.enableTabLoop\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__portal\",\n                tabIndex: -1,\n                onKeyDown: this.onPortalKeyDown\n            }, calendar)) : null;\n            if (this.state.open && this.props.portalId) {\n                portalContainer = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Portal, _assign({\n                    portalId: this.props.portalId\n                }, this.props), portalContainer);\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", null, this.renderInputContainer(), portalContainer);\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(PopperComponent$1, _assign({}, this.props, {\n            className: this.props.popperClassName,\n            hidePopper: !this.isCalendarOpen(),\n            targetComponent: this.renderInputContainer(),\n            popperComponent: calendar,\n            popperOnKeyDown: this.onPopperKeyDown,\n            showArrow: this.props.showPopperArrow\n        }));\n    };\n    return DatePicker;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\nvar PRESELECT_CHANGE_VIA_INPUT = \"input\";\nvar PRESELECT_CHANGE_VIA_NAVIGATE = \"navigate\";\n //# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datepicker/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datepicker/dist/react-datepicker.css":
/*!*****************************************************************!*\
  !*** ./node_modules/react-datepicker/dist/react-datepicker.css ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"ca1b8028e84f\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXBpY2tlci9kaXN0L3JlYWN0LWRhdGVwaWNrZXIuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVwdWVzdG9zLWFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcGlja2VyL2Rpc3QvcmVhY3QtZGF0ZXBpY2tlci5jc3M/NGY3NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcImNhMWI4MDI4ZTg0ZlwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datepicker/dist/react-datepicker.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datepicker/node_modules/@floating-ui/react/dist/floating-ui.react.mjs":
/*!**************************************************************************************************!*\
  !*** ./node_modules/react-datepicker/node_modules/@floating-ui/react/dist/floating-ui.react.mjs ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var react__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Composite: () => (/* binding */ Composite),\n/* harmony export */   CompositeItem: () => (/* binding */ CompositeItem),\n/* harmony export */   FloatingArrow: () => (/* binding */ FloatingArrow),\n/* harmony export */   FloatingDelayGroup: () => (/* binding */ FloatingDelayGroup),\n/* harmony export */   FloatingFocusManager: () => (/* binding */ FloatingFocusManager),\n/* harmony export */   FloatingList: () => (/* binding */ FloatingList),\n/* harmony export */   FloatingNode: () => (/* binding */ FloatingNode),\n/* harmony export */   FloatingOverlay: () => (/* binding */ FloatingOverlay),\n/* harmony export */   FloatingPortal: () => (/* binding */ FloatingPortal),\n/* harmony export */   FloatingTree: () => (/* binding */ FloatingTree),\n/* harmony export */   NextFloatingDelayGroup: () => (/* binding */ NextFloatingDelayGroup),\n/* harmony export */   arrow: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.arrow),\n/* harmony export */   autoPlacement: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.autoPlacement),\n/* harmony export */   autoUpdate: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.autoUpdate),\n/* harmony export */   computePosition: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.computePosition),\n/* harmony export */   detectOverflow: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.detectOverflow),\n/* harmony export */   flip: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.flip),\n/* harmony export */   getOverflowAncestors: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.getOverflowAncestors),\n/* harmony export */   hide: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.hide),\n/* harmony export */   inline: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.inline),\n/* harmony export */   inner: () => (/* binding */ inner),\n/* harmony export */   limitShift: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.limitShift),\n/* harmony export */   offset: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.offset),\n/* harmony export */   platform: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.platform),\n/* harmony export */   safePolygon: () => (/* binding */ safePolygon),\n/* harmony export */   shift: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.shift),\n/* harmony export */   size: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.size),\n/* harmony export */   useClick: () => (/* binding */ useClick),\n/* harmony export */   useClientPoint: () => (/* binding */ useClientPoint),\n/* harmony export */   useDelayGroup: () => (/* binding */ useDelayGroup),\n/* harmony export */   useDelayGroupContext: () => (/* binding */ useDelayGroupContext),\n/* harmony export */   useDismiss: () => (/* binding */ useDismiss),\n/* harmony export */   useFloating: () => (/* binding */ useFloating),\n/* harmony export */   useFloatingNodeId: () => (/* binding */ useFloatingNodeId),\n/* harmony export */   useFloatingParentNodeId: () => (/* binding */ useFloatingParentNodeId),\n/* harmony export */   useFloatingPortalNode: () => (/* binding */ useFloatingPortalNode),\n/* harmony export */   useFloatingRootContext: () => (/* binding */ useFloatingRootContext),\n/* harmony export */   useFloatingTree: () => (/* binding */ useFloatingTree),\n/* harmony export */   useFocus: () => (/* binding */ useFocus),\n/* harmony export */   useHover: () => (/* binding */ useHover),\n/* harmony export */   useId: () => (/* binding */ useId),\n/* harmony export */   useInnerOffset: () => (/* binding */ useInnerOffset),\n/* harmony export */   useInteractions: () => (/* binding */ useInteractions),\n/* harmony export */   useListItem: () => (/* binding */ useListItem),\n/* harmony export */   useListNavigation: () => (/* binding */ useListNavigation),\n/* harmony export */   useMergeRefs: () => (/* binding */ useMergeRefs),\n/* harmony export */   useNextDelayGroup: () => (/* binding */ useNextDelayGroup),\n/* harmony export */   useRole: () => (/* binding */ useRole),\n/* harmony export */   useTransitionStatus: () => (/* binding */ useTransitionStatus),\n/* harmony export */   useTransitionStyles: () => (/* binding */ useTransitionStyles),\n/* harmony export */   useTypeahead: () => (/* binding */ useTypeahead)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @floating-ui/react/utils */ \"(ssr)/./node_modules/react-datepicker/node_modules/@floating-ui/react/dist/floating-ui.react.utils.mjs\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @floating-ui/react-dom */ \"(ssr)/./node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs\");\n/* harmony import */ var tabbable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tabbable */ \"(ssr)/./node_modules/tabbable/dist/index.esm.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @floating-ui/react-dom */ \"(ssr)/./node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs\");\n/* harmony import */ var _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @floating-ui/react-dom */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var _floating_ui_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @floating-ui/utils */ \"(ssr)/./node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs\");\n\n\n\n\n\n\n\n\n\n/**\n * Merges an array of refs into a single memoized callback ref or `null`.\n * @see https://floating-ui.com/docs/react-utils#usemergerefs\n */ function useMergeRefs(refs) {\n    const cleanupRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(undefined);\n    const refEffect = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((instance)=>{\n        const cleanups = refs.map((ref)=>{\n            if (ref == null) {\n                return;\n            }\n            if (typeof ref === \"function\") {\n                const refCallback = ref;\n                const refCleanup = refCallback(instance);\n                return typeof refCleanup === \"function\" ? refCleanup : ()=>{\n                    refCallback(null);\n                };\n            }\n            ref.current = instance;\n            return ()=>{\n                ref.current = null;\n            };\n        });\n        return ()=>{\n            cleanups.forEach((refCleanup)=>refCleanup == null ? void 0 : refCleanup());\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, refs);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (refs.every((ref)=>ref == null)) {\n            return null;\n        }\n        return (value)=>{\n            if (cleanupRef.current) {\n                cleanupRef.current();\n                cleanupRef.current = undefined;\n            }\n            if (value != null) {\n                cleanupRef.current = refEffect(value);\n            }\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, refs);\n}\nfunction sortByDocumentPosition(a, b) {\n    const position = a.compareDocumentPosition(b);\n    if (position & Node.DOCUMENT_POSITION_FOLLOWING || position & Node.DOCUMENT_POSITION_CONTAINED_BY) {\n        return -1;\n    }\n    if (position & Node.DOCUMENT_POSITION_PRECEDING || position & Node.DOCUMENT_POSITION_CONTAINS) {\n        return 1;\n    }\n    return 0;\n}\nconst FloatingListContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    register: ()=>{},\n    unregister: ()=>{},\n    map: /*#__PURE__*/ new Map(),\n    elementsRef: {\n        current: []\n    }\n});\n/**\n * Provides context for a list of items within the floating element.\n * @see https://floating-ui.com/docs/FloatingList\n */ function FloatingList(props) {\n    const { children, elementsRef, labelsRef } = props;\n    const [nodes, setNodes] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>new Set());\n    const register = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((node)=>{\n        setNodes((prevSet)=>new Set(prevSet).add(node));\n    }, []);\n    const unregister = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((node)=>{\n        setNodes((prevSet)=>{\n            const set = new Set(prevSet);\n            set.delete(node);\n            return set;\n        });\n    }, []);\n    const map = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const newMap = new Map();\n        const sortedNodes = Array.from(nodes.keys()).sort(sortByDocumentPosition);\n        sortedNodes.forEach((node, index)=>{\n            newMap.set(node, index);\n        });\n        return newMap;\n    }, [\n        nodes\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FloatingListContext.Provider, {\n        value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n                register,\n                unregister,\n                map,\n                elementsRef,\n                labelsRef\n            }), [\n            register,\n            unregister,\n            map,\n            elementsRef,\n            labelsRef\n        ]),\n        children: children\n    });\n}\n/**\n * Used to register a list item and its index (DOM position) in the\n * `FloatingList`.\n * @see https://floating-ui.com/docs/FloatingList#uselistitem\n */ function useListItem(props) {\n    if (props === void 0) {\n        props = {};\n    }\n    const { label } = props;\n    const { register, unregister, map, elementsRef, labelsRef } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(FloatingListContext);\n    const [index, setIndex] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    const componentRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((node)=>{\n        componentRef.current = node;\n        if (index !== null) {\n            elementsRef.current[index] = node;\n            if (labelsRef) {\n                var _node$textContent;\n                const isLabelDefined = label !== undefined;\n                labelsRef.current[index] = isLabelDefined ? label : (_node$textContent = node == null ? void 0 : node.textContent) != null ? _node$textContent : null;\n            }\n        }\n    }, [\n        index,\n        elementsRef,\n        labelsRef,\n        label\n    ]);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        const node = componentRef.current;\n        if (node) {\n            register(node);\n            return ()=>{\n                unregister(node);\n            };\n        }\n    }, [\n        register,\n        unregister\n    ]);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        const index = componentRef.current ? map.get(componentRef.current) : null;\n        if (index != null) {\n            setIndex(index);\n        }\n    }, [\n        map\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            ref,\n            index: index == null ? -1 : index\n        }), [\n        index,\n        ref\n    ]);\n}\nconst FOCUSABLE_ATTRIBUTE = \"data-floating-ui-focusable\";\nconst ACTIVE_KEY = \"active\";\nconst SELECTED_KEY = \"selected\";\nconst ARROW_LEFT = \"ArrowLeft\";\nconst ARROW_RIGHT = \"ArrowRight\";\nconst ARROW_UP = \"ArrowUp\";\nconst ARROW_DOWN = \"ArrowDown\";\nfunction renderJsx(render, computedProps) {\n    if (typeof render === \"function\") {\n        return render(computedProps);\n    }\n    if (render) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(render, computedProps);\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        ...computedProps\n    });\n}\nconst CompositeContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    activeIndex: 0,\n    onNavigate: ()=>{}\n});\nconst horizontalKeys = [\n    ARROW_LEFT,\n    ARROW_RIGHT\n];\nconst verticalKeys = [\n    ARROW_UP,\n    ARROW_DOWN\n];\nconst allKeys = [\n    ...horizontalKeys,\n    ...verticalKeys\n];\n/**\n * Creates a single tab stop whose items are navigated by arrow keys, which\n * provides list navigation outside of floating element contexts.\n *\n * This is useful to enable navigation of a list of items that aren’t part of a\n * floating element. A menubar is an example of a composite, with each reference\n * element being an item.\n * @see https://floating-ui.com/docs/Composite\n */ const Composite = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function Composite(props, forwardedRef) {\n    const { render, orientation = \"both\", loop = true, rtl = false, cols = 1, disabledIndices, activeIndex: externalActiveIndex, onNavigate: externalSetActiveIndex, itemSizes, dense = false, ...domProps } = props;\n    const [internalActiveIndex, internalSetActiveIndex] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0);\n    const activeIndex = externalActiveIndex != null ? externalActiveIndex : internalActiveIndex;\n    const onNavigate = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)(externalSetActiveIndex != null ? externalSetActiveIndex : internalSetActiveIndex);\n    const elementsRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef([]);\n    const renderElementProps = render && typeof render !== \"function\" ? render.props : {};\n    const contextValue = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            activeIndex,\n            onNavigate\n        }), [\n        activeIndex,\n        onNavigate\n    ]);\n    const isGrid = cols > 1;\n    function handleKeyDown(event) {\n        if (!allKeys.includes(event.key)) return;\n        let nextIndex = activeIndex;\n        const minIndex = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getMinListIndex)(elementsRef, disabledIndices);\n        const maxIndex = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getMaxListIndex)(elementsRef, disabledIndices);\n        const horizontalEndKey = rtl ? ARROW_LEFT : ARROW_RIGHT;\n        const horizontalStartKey = rtl ? ARROW_RIGHT : ARROW_LEFT;\n        if (isGrid) {\n            const sizes = itemSizes || Array.from({\n                length: elementsRef.current.length\n            }, ()=>({\n                    width: 1,\n                    height: 1\n                }));\n            // To calculate movements on the grid, we use hypothetical cell indices\n            // as if every item was 1x1, then convert back to real indices.\n            const cellMap = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.createGridCellMap)(sizes, cols, dense);\n            const minGridIndex = cellMap.findIndex((index)=>index != null && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isListIndexDisabled)(elementsRef, index, disabledIndices));\n            // last enabled index\n            const maxGridIndex = cellMap.reduce((foundIndex, index, cellIndex)=>index != null && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isListIndexDisabled)(elementsRef, index, disabledIndices) ? cellIndex : foundIndex, -1);\n            const maybeNextIndex = cellMap[(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getGridNavigatedIndex)({\n                current: cellMap.map((itemIndex)=>itemIndex ? elementsRef.current[itemIndex] : null)\n            }, {\n                event,\n                orientation,\n                loop,\n                rtl,\n                cols,\n                // treat undefined (empty grid spaces) as disabled indices so we\n                // don't end up in them\n                disabledIndices: (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getGridCellIndices)([\n                    ...(typeof disabledIndices !== \"function\" ? disabledIndices : null) || elementsRef.current.map((_, index)=>(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isListIndexDisabled)(elementsRef, index, disabledIndices) ? index : undefined),\n                    undefined\n                ], cellMap),\n                minIndex: minGridIndex,\n                maxIndex: maxGridIndex,\n                prevIndex: (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getGridCellIndexOfCorner)(activeIndex > maxIndex ? minIndex : activeIndex, sizes, cellMap, cols, // use a corner matching the edge closest to the direction we're\n                // moving in so we don't end up in the same item. Prefer\n                // top/left over bottom/right.\n                event.key === ARROW_DOWN ? \"bl\" : event.key === horizontalEndKey ? \"tr\" : \"tl\")\n            })];\n            if (maybeNextIndex != null) {\n                nextIndex = maybeNextIndex;\n            }\n        }\n        const toEndKeys = {\n            horizontal: [\n                horizontalEndKey\n            ],\n            vertical: [\n                ARROW_DOWN\n            ],\n            both: [\n                horizontalEndKey,\n                ARROW_DOWN\n            ]\n        }[orientation];\n        const toStartKeys = {\n            horizontal: [\n                horizontalStartKey\n            ],\n            vertical: [\n                ARROW_UP\n            ],\n            both: [\n                horizontalStartKey,\n                ARROW_UP\n            ]\n        }[orientation];\n        const preventedKeys = isGrid ? allKeys : ({\n            horizontal: horizontalKeys,\n            vertical: verticalKeys,\n            both: allKeys\n        })[orientation];\n        if (nextIndex === activeIndex && [\n            ...toEndKeys,\n            ...toStartKeys\n        ].includes(event.key)) {\n            if (loop && nextIndex === maxIndex && toEndKeys.includes(event.key)) {\n                nextIndex = minIndex;\n            } else if (loop && nextIndex === minIndex && toStartKeys.includes(event.key)) {\n                nextIndex = maxIndex;\n            } else {\n                nextIndex = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.findNonDisabledListIndex)(elementsRef, {\n                    startingIndex: nextIndex,\n                    decrement: toStartKeys.includes(event.key),\n                    disabledIndices\n                });\n            }\n        }\n        if (nextIndex !== activeIndex && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isIndexOutOfListBounds)(elementsRef, nextIndex)) {\n            var _elementsRef$current$;\n            event.stopPropagation();\n            if (preventedKeys.includes(event.key)) {\n                event.preventDefault();\n            }\n            onNavigate(nextIndex);\n            (_elementsRef$current$ = elementsRef.current[nextIndex]) == null || _elementsRef$current$.focus();\n        }\n    }\n    const computedProps = {\n        ...domProps,\n        ...renderElementProps,\n        ref: forwardedRef,\n        \"aria-orientation\": orientation === \"both\" ? undefined : orientation,\n        onKeyDown (e) {\n            domProps.onKeyDown == null || domProps.onKeyDown(e);\n            renderElementProps.onKeyDown == null || renderElementProps.onKeyDown(e);\n            handleKeyDown(e);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CompositeContext.Provider, {\n        value: contextValue,\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FloatingList, {\n            elementsRef: elementsRef,\n            children: renderJsx(render, computedProps)\n        })\n    });\n});\n/**\n * @see https://floating-ui.com/docs/Composite\n */ const CompositeItem = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function CompositeItem(props, forwardedRef) {\n    const { render, ...domProps } = props;\n    const renderElementProps = render && typeof render !== \"function\" ? render.props : {};\n    const { activeIndex, onNavigate } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(CompositeContext);\n    const { ref, index } = useListItem();\n    const mergedRef = useMergeRefs([\n        ref,\n        forwardedRef,\n        renderElementProps.ref\n    ]);\n    const isActive = activeIndex === index;\n    const computedProps = {\n        ...domProps,\n        ...renderElementProps,\n        ref: mergedRef,\n        tabIndex: isActive ? 0 : -1,\n        \"data-active\": isActive ? \"\" : undefined,\n        onFocus (e) {\n            domProps.onFocus == null || domProps.onFocus(e);\n            renderElementProps.onFocus == null || renderElementProps.onFocus(e);\n            onNavigate(index);\n        }\n    };\n    return renderJsx(render, computedProps);\n});\n// https://github.com/mui/material-ui/issues/41190#issuecomment-2040873379\nconst SafeReact = {\n    .../*#__PURE__*/ (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(react__WEBPACK_IMPORTED_MODULE_0__, 2)))\n};\nlet serverHandoffComplete = false;\nlet count = 0;\nconst genId = ()=>// on <React 18\n    \"floating-ui-\" + Math.random().toString(36).slice(2, 6) + count++;\nfunction useFloatingId() {\n    const [id, setId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>serverHandoffComplete ? genId() : undefined);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (id == null) {\n            setId(genId());\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        serverHandoffComplete = true;\n    }, []);\n    return id;\n}\nconst useReactId = SafeReact.useId;\n/**\n * Uses React 18's built-in `useId()` when available, or falls back to a\n * slightly less performant (requiring a double render) implementation for\n * earlier React versions.\n * @see https://floating-ui.com/docs/react-utils#useid\n */ const useId = useReactId || useFloatingId;\nlet devMessageSet;\nif (true) {\n    devMessageSet = /*#__PURE__*/ new Set();\n}\nfunction warn() {\n    var _devMessageSet;\n    for(var _len = arguments.length, messages = new Array(_len), _key = 0; _key < _len; _key++){\n        messages[_key] = arguments[_key];\n    }\n    const message = \"Floating UI: \" + messages.join(\" \");\n    if (!((_devMessageSet = devMessageSet) != null && _devMessageSet.has(message))) {\n        var _devMessageSet2;\n        (_devMessageSet2 = devMessageSet) == null || _devMessageSet2.add(message);\n        console.warn(message);\n    }\n}\nfunction error() {\n    var _devMessageSet3;\n    for(var _len2 = arguments.length, messages = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n        messages[_key2] = arguments[_key2];\n    }\n    const message = \"Floating UI: \" + messages.join(\" \");\n    if (!((_devMessageSet3 = devMessageSet) != null && _devMessageSet3.has(message))) {\n        var _devMessageSet4;\n        (_devMessageSet4 = devMessageSet) == null || _devMessageSet4.add(message);\n        console.error(message);\n    }\n}\n/**\n * Renders a pointing arrow triangle.\n * @see https://floating-ui.com/docs/FloatingArrow\n */ const FloatingArrow = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function FloatingArrow(props, ref) {\n    const { context: { placement, elements: { floating }, middlewareData: { arrow, shift } }, width = 14, height = 7, tipRadius = 0, strokeWidth = 0, staticOffset, stroke, d, style: { transform, ...restStyle } = {}, ...rest } = props;\n    if (true) {\n        if (!ref) {\n            warn(\"The `ref` prop is required for `FloatingArrow`.\");\n        }\n    }\n    const clipPathId = useId();\n    const [isRTL, setIsRTL] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    // https://github.com/floating-ui/floating-ui/issues/2932\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (!floating) return;\n        const isRTL = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.getComputedStyle)(floating).direction === \"rtl\";\n        if (isRTL) {\n            setIsRTL(true);\n        }\n    }, [\n        floating\n    ]);\n    if (!floating) {\n        return null;\n    }\n    const [side, alignment] = placement.split(\"-\");\n    const isVerticalSide = side === \"top\" || side === \"bottom\";\n    let computedStaticOffset = staticOffset;\n    if (isVerticalSide && shift != null && shift.x || !isVerticalSide && shift != null && shift.y) {\n        computedStaticOffset = null;\n    }\n    // Strokes must be double the border width, this ensures the stroke's width\n    // works as you'd expect.\n    const computedStrokeWidth = strokeWidth * 2;\n    const halfStrokeWidth = computedStrokeWidth / 2;\n    const svgX = width / 2 * (tipRadius / -8 + 1);\n    const svgY = height / 2 * tipRadius / 4;\n    const isCustomShape = !!d;\n    const yOffsetProp = computedStaticOffset && alignment === \"end\" ? \"bottom\" : \"top\";\n    let xOffsetProp = computedStaticOffset && alignment === \"end\" ? \"right\" : \"left\";\n    if (computedStaticOffset && isRTL) {\n        xOffsetProp = alignment === \"end\" ? \"left\" : \"right\";\n    }\n    const arrowX = (arrow == null ? void 0 : arrow.x) != null ? computedStaticOffset || arrow.x : \"\";\n    const arrowY = (arrow == null ? void 0 : arrow.y) != null ? computedStaticOffset || arrow.y : \"\";\n    const dValue = d || \"M0,0\" + (\" H\" + width) + (\" L\" + (width - svgX) + \",\" + (height - svgY)) + (\" Q\" + width / 2 + \",\" + height + \" \" + svgX + \",\" + (height - svgY)) + \" Z\";\n    const rotation = {\n        top: isCustomShape ? \"rotate(180deg)\" : \"\",\n        left: isCustomShape ? \"rotate(90deg)\" : \"rotate(-90deg)\",\n        bottom: isCustomShape ? \"\" : \"rotate(180deg)\",\n        right: isCustomShape ? \"rotate(-90deg)\" : \"rotate(90deg)\"\n    }[side];\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"svg\", {\n        ...rest,\n        \"aria-hidden\": true,\n        ref: ref,\n        width: isCustomShape ? width : width + computedStrokeWidth,\n        height: width,\n        viewBox: \"0 0 \" + width + \" \" + (height > width ? height : width),\n        style: {\n            position: \"absolute\",\n            pointerEvents: \"none\",\n            [xOffsetProp]: arrowX,\n            [yOffsetProp]: arrowY,\n            [side]: isVerticalSide || isCustomShape ? \"100%\" : \"calc(100% - \" + computedStrokeWidth / 2 + \"px)\",\n            transform: [\n                rotation,\n                transform\n            ].filter((t)=>!!t).join(\" \"),\n            ...restStyle\n        },\n        children: [\n            computedStrokeWidth > 0 && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"path\", {\n                clipPath: \"url(#\" + clipPathId + \")\",\n                fill: \"none\",\n                stroke: stroke,\n                strokeWidth: computedStrokeWidth + (d ? 0 : 1),\n                d: dValue\n            }),\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"path\", {\n                stroke: computedStrokeWidth && !d ? rest.fill : \"none\",\n                d: dValue\n            }),\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"clipPath\", {\n                id: clipPathId,\n                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"rect\", {\n                    x: -halfStrokeWidth,\n                    y: halfStrokeWidth * (isCustomShape ? -1 : 1),\n                    width: width + computedStrokeWidth,\n                    height: width\n                })\n            })\n        ]\n    });\n});\nfunction createEventEmitter() {\n    const map = new Map();\n    return {\n        emit (event, data) {\n            var _map$get;\n            (_map$get = map.get(event)) == null || _map$get.forEach((listener)=>listener(data));\n        },\n        on (event, listener) {\n            if (!map.has(event)) {\n                map.set(event, new Set());\n            }\n            map.get(event).add(listener);\n        },\n        off (event, listener) {\n            var _map$get2;\n            (_map$get2 = map.get(event)) == null || _map$get2.delete(listener);\n        }\n    };\n}\nconst FloatingNodeContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nconst FloatingTreeContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\n/**\n * Returns the parent node id for nested floating elements, if available.\n * Returns `null` for top-level floating elements.\n */ const useFloatingParentNodeId = ()=>{\n    var _React$useContext;\n    return ((_React$useContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;\n};\n/**\n * Returns the nearest floating tree context, if available.\n */ const useFloatingTree = ()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(FloatingTreeContext);\n/**\n * Registers a node into the `FloatingTree`, returning its id.\n * @see https://floating-ui.com/docs/FloatingTree\n */ function useFloatingNodeId(customParentId) {\n    const id = useId();\n    const tree = useFloatingTree();\n    const reactParentId = useFloatingParentNodeId();\n    const parentId = customParentId || reactParentId;\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (!id) return;\n        const node = {\n            id,\n            parentId\n        };\n        tree == null || tree.addNode(node);\n        return ()=>{\n            tree == null || tree.removeNode(node);\n        };\n    }, [\n        tree,\n        id,\n        parentId\n    ]);\n    return id;\n}\n/**\n * Provides parent node context for nested floating elements.\n * @see https://floating-ui.com/docs/FloatingTree\n */ function FloatingNode(props) {\n    const { children, id } = props;\n    const parentId = useFloatingParentNodeId();\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FloatingNodeContext.Provider, {\n        value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n                id,\n                parentId\n            }), [\n            id,\n            parentId\n        ]),\n        children: children\n    });\n}\n/**\n * Provides context for nested floating elements when they are not children of\n * each other on the DOM.\n * This is not necessary in all cases, except when there must be explicit communication between parent and child floating elements. It is necessary for:\n * - The `bubbles` option in the `useDismiss()` Hook\n * - Nested virtual list navigation\n * - Nested floating elements that each open on hover\n * - Custom communication between parent and child floating elements\n * @see https://floating-ui.com/docs/FloatingTree\n */ function FloatingTree(props) {\n    const { children } = props;\n    const nodesRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef([]);\n    const addNode = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((node)=>{\n        nodesRef.current = [\n            ...nodesRef.current,\n            node\n        ];\n    }, []);\n    const removeNode = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((node)=>{\n        nodesRef.current = nodesRef.current.filter((n)=>n !== node);\n    }, []);\n    const [events] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>createEventEmitter());\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FloatingTreeContext.Provider, {\n        value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n                nodesRef,\n                addNode,\n                removeNode,\n                events\n            }), [\n            addNode,\n            removeNode,\n            events\n        ]),\n        children: children\n    });\n}\nfunction createAttribute(name) {\n    return \"data-floating-ui-\" + name;\n}\nfunction clearTimeoutIfSet(timeoutRef) {\n    if (timeoutRef.current !== -1) {\n        clearTimeout(timeoutRef.current);\n        timeoutRef.current = -1;\n    }\n}\nconst safePolygonIdentifier = /*#__PURE__*/ createAttribute(\"safe-polygon\");\nfunction getDelay(value, prop, pointerType) {\n    if (pointerType && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isMouseLikePointerType)(pointerType)) {\n        return 0;\n    }\n    if (typeof value === \"number\") {\n        return value;\n    }\n    if (typeof value === \"function\") {\n        const result = value();\n        if (typeof result === \"number\") {\n            return result;\n        }\n        return result == null ? void 0 : result[prop];\n    }\n    return value == null ? void 0 : value[prop];\n}\nfunction getRestMs(value) {\n    if (typeof value === \"function\") {\n        return value();\n    }\n    return value;\n}\n/**\n * Opens the floating element while hovering over the reference element, like\n * CSS `:hover`.\n * @see https://floating-ui.com/docs/useHover\n */ function useHover(context, props) {\n    if (props === void 0) {\n        props = {};\n    }\n    const { open, onOpenChange, dataRef, events, elements } = context;\n    const { enabled = true, delay = 0, handleClose = null, mouseOnly = false, restMs = 0, move = true } = props;\n    const tree = useFloatingTree();\n    const parentId = useFloatingParentNodeId();\n    const handleCloseRef = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useLatestRef)(handleClose);\n    const delayRef = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useLatestRef)(delay);\n    const openRef = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useLatestRef)(open);\n    const restMsRef = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useLatestRef)(restMs);\n    const pointerTypeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n    const timeoutRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(-1);\n    const handlerRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n    const restTimeoutRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(-1);\n    const blockMouseMoveRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(true);\n    const performedPointerEventsMutationRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const unbindMouseMoveRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(()=>{});\n    const restTimeoutPendingRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const isHoverOpen = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)(()=>{\n        var _dataRef$current$open;\n        const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;\n        return (type == null ? void 0 : type.includes(\"mouse\")) && type !== \"mousedown\";\n    });\n    // When closing before opening, clear the delay timeouts to cancel it\n    // from showing.\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!enabled) return;\n        function onOpenChange(_ref) {\n            let { open } = _ref;\n            if (!open) {\n                clearTimeoutIfSet(timeoutRef);\n                clearTimeoutIfSet(restTimeoutRef);\n                blockMouseMoveRef.current = true;\n                restTimeoutPendingRef.current = false;\n            }\n        }\n        events.on(\"openchange\", onOpenChange);\n        return ()=>{\n            events.off(\"openchange\", onOpenChange);\n        };\n    }, [\n        enabled,\n        events\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!enabled) return;\n        if (!handleCloseRef.current) return;\n        if (!open) return;\n        function onLeave(event) {\n            if (isHoverOpen()) {\n                onOpenChange(false, event, \"hover\");\n            }\n        }\n        const html = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getDocument)(elements.floating).documentElement;\n        html.addEventListener(\"mouseleave\", onLeave);\n        return ()=>{\n            html.removeEventListener(\"mouseleave\", onLeave);\n        };\n    }, [\n        elements.floating,\n        open,\n        onOpenChange,\n        enabled,\n        handleCloseRef,\n        isHoverOpen\n    ]);\n    const closeWithDelay = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(event, runElseBranch, reason) {\n        if (runElseBranch === void 0) {\n            runElseBranch = true;\n        }\n        if (reason === void 0) {\n            reason = \"hover\";\n        }\n        const closeDelay = getDelay(delayRef.current, \"close\", pointerTypeRef.current);\n        if (closeDelay && !handlerRef.current) {\n            clearTimeoutIfSet(timeoutRef);\n            timeoutRef.current = window.setTimeout(()=>onOpenChange(false, event, reason), closeDelay);\n        } else if (runElseBranch) {\n            clearTimeoutIfSet(timeoutRef);\n            onOpenChange(false, event, reason);\n        }\n    }, [\n        delayRef,\n        onOpenChange\n    ]);\n    const cleanupMouseMoveHandler = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)(()=>{\n        unbindMouseMoveRef.current();\n        handlerRef.current = undefined;\n    });\n    const clearPointerEvents = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)(()=>{\n        if (performedPointerEventsMutationRef.current) {\n            const body = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getDocument)(elements.floating).body;\n            body.style.pointerEvents = \"\";\n            body.removeAttribute(safePolygonIdentifier);\n            performedPointerEventsMutationRef.current = false;\n        }\n    });\n    const isClickLikeOpenEvent = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)(()=>{\n        return dataRef.current.openEvent ? [\n            \"click\",\n            \"mousedown\"\n        ].includes(dataRef.current.openEvent.type) : false;\n    });\n    // Registering the mouse events on the reference directly to bypass React's\n    // delegation system. If the cursor was on a disabled element and then entered\n    // the reference (no gap), `mouseenter` doesn't fire in the delegation system.\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!enabled) return;\n        function onReferenceMouseEnter(event) {\n            clearTimeoutIfSet(timeoutRef);\n            blockMouseMoveRef.current = false;\n            if (mouseOnly && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isMouseLikePointerType)(pointerTypeRef.current) || getRestMs(restMsRef.current) > 0 && !getDelay(delayRef.current, \"open\")) {\n                return;\n            }\n            const openDelay = getDelay(delayRef.current, \"open\", pointerTypeRef.current);\n            if (openDelay) {\n                timeoutRef.current = window.setTimeout(()=>{\n                    if (!openRef.current) {\n                        onOpenChange(true, event, \"hover\");\n                    }\n                }, openDelay);\n            } else if (!open) {\n                onOpenChange(true, event, \"hover\");\n            }\n        }\n        function onReferenceMouseLeave(event) {\n            if (isClickLikeOpenEvent()) {\n                clearPointerEvents();\n                return;\n            }\n            unbindMouseMoveRef.current();\n            const doc = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getDocument)(elements.floating);\n            clearTimeoutIfSet(restTimeoutRef);\n            restTimeoutPendingRef.current = false;\n            if (handleCloseRef.current && dataRef.current.floatingContext) {\n                // Prevent clearing `onScrollMouseLeave` timeout.\n                if (!open) {\n                    clearTimeoutIfSet(timeoutRef);\n                }\n                handlerRef.current = handleCloseRef.current({\n                    ...dataRef.current.floatingContext,\n                    tree,\n                    x: event.clientX,\n                    y: event.clientY,\n                    onClose () {\n                        clearPointerEvents();\n                        cleanupMouseMoveHandler();\n                        if (!isClickLikeOpenEvent()) {\n                            closeWithDelay(event, true, \"safe-polygon\");\n                        }\n                    }\n                });\n                const handler = handlerRef.current;\n                doc.addEventListener(\"mousemove\", handler);\n                unbindMouseMoveRef.current = ()=>{\n                    doc.removeEventListener(\"mousemove\", handler);\n                };\n                return;\n            }\n            // Allow interactivity without `safePolygon` on touch devices. With a\n            // pointer, a short close delay is an alternative, so it should work\n            // consistently.\n            const shouldClose = pointerTypeRef.current === \"touch\" ? !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.contains)(elements.floating, event.relatedTarget) : true;\n            if (shouldClose) {\n                closeWithDelay(event);\n            }\n        }\n        // Ensure the floating element closes after scrolling even if the pointer\n        // did not move.\n        // https://github.com/floating-ui/floating-ui/discussions/1692\n        function onScrollMouseLeave(event) {\n            if (isClickLikeOpenEvent()) return;\n            if (!dataRef.current.floatingContext) return;\n            handleCloseRef.current == null || handleCloseRef.current({\n                ...dataRef.current.floatingContext,\n                tree,\n                x: event.clientX,\n                y: event.clientY,\n                onClose () {\n                    clearPointerEvents();\n                    cleanupMouseMoveHandler();\n                    if (!isClickLikeOpenEvent()) {\n                        closeWithDelay(event);\n                    }\n                }\n            })(event);\n        }\n        function onFloatingMouseEnter() {\n            clearTimeoutIfSet(timeoutRef);\n        }\n        function onFloatingMouseLeave(event) {\n            if (!isClickLikeOpenEvent()) {\n                closeWithDelay(event, false);\n            }\n        }\n        if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isElement)(elements.domReference)) {\n            const reference = elements.domReference;\n            const floating = elements.floating;\n            if (open) {\n                reference.addEventListener(\"mouseleave\", onScrollMouseLeave);\n            }\n            if (move) {\n                reference.addEventListener(\"mousemove\", onReferenceMouseEnter, {\n                    once: true\n                });\n            }\n            reference.addEventListener(\"mouseenter\", onReferenceMouseEnter);\n            reference.addEventListener(\"mouseleave\", onReferenceMouseLeave);\n            if (floating) {\n                floating.addEventListener(\"mouseleave\", onScrollMouseLeave);\n                floating.addEventListener(\"mouseenter\", onFloatingMouseEnter);\n                floating.addEventListener(\"mouseleave\", onFloatingMouseLeave);\n            }\n            return ()=>{\n                if (open) {\n                    reference.removeEventListener(\"mouseleave\", onScrollMouseLeave);\n                }\n                if (move) {\n                    reference.removeEventListener(\"mousemove\", onReferenceMouseEnter);\n                }\n                reference.removeEventListener(\"mouseenter\", onReferenceMouseEnter);\n                reference.removeEventListener(\"mouseleave\", onReferenceMouseLeave);\n                if (floating) {\n                    floating.removeEventListener(\"mouseleave\", onScrollMouseLeave);\n                    floating.removeEventListener(\"mouseenter\", onFloatingMouseEnter);\n                    floating.removeEventListener(\"mouseleave\", onFloatingMouseLeave);\n                }\n            };\n        }\n    }, [\n        elements,\n        enabled,\n        context,\n        mouseOnly,\n        move,\n        closeWithDelay,\n        cleanupMouseMoveHandler,\n        clearPointerEvents,\n        onOpenChange,\n        open,\n        openRef,\n        tree,\n        delayRef,\n        handleCloseRef,\n        dataRef,\n        isClickLikeOpenEvent,\n        restMsRef\n    ]);\n    // Block pointer-events of every element other than the reference and floating\n    // while the floating element is open and has a `handleClose` handler. Also\n    // handles nested floating elements.\n    // https://github.com/floating-ui/floating-ui/issues/1722\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        var _handleCloseRef$curre;\n        if (!enabled) return;\n        if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && (_handleCloseRef$curre = _handleCloseRef$curre.__options) != null && _handleCloseRef$curre.blockPointerEvents && isHoverOpen()) {\n            performedPointerEventsMutationRef.current = true;\n            const floatingEl = elements.floating;\n            if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isElement)(elements.domReference) && floatingEl) {\n                var _tree$nodesRef$curren;\n                const body = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getDocument)(elements.floating).body;\n                body.setAttribute(safePolygonIdentifier, \"\");\n                const ref = elements.domReference;\n                const parentFloating = tree == null || (_tree$nodesRef$curren = tree.nodesRef.current.find((node)=>node.id === parentId)) == null || (_tree$nodesRef$curren = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren.elements.floating;\n                if (parentFloating) {\n                    parentFloating.style.pointerEvents = \"\";\n                }\n                body.style.pointerEvents = \"none\";\n                ref.style.pointerEvents = \"auto\";\n                floatingEl.style.pointerEvents = \"auto\";\n                return ()=>{\n                    body.style.pointerEvents = \"\";\n                    ref.style.pointerEvents = \"\";\n                    floatingEl.style.pointerEvents = \"\";\n                };\n            }\n        }\n    }, [\n        enabled,\n        open,\n        parentId,\n        elements,\n        tree,\n        handleCloseRef,\n        isHoverOpen\n    ]);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (!open) {\n            pointerTypeRef.current = undefined;\n            restTimeoutPendingRef.current = false;\n            cleanupMouseMoveHandler();\n            clearPointerEvents();\n        }\n    }, [\n        open,\n        cleanupMouseMoveHandler,\n        clearPointerEvents\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        return ()=>{\n            cleanupMouseMoveHandler();\n            clearTimeoutIfSet(timeoutRef);\n            clearTimeoutIfSet(restTimeoutRef);\n            clearPointerEvents();\n        };\n    }, [\n        enabled,\n        elements.domReference,\n        cleanupMouseMoveHandler,\n        clearPointerEvents\n    ]);\n    const reference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        function setPointerRef(event) {\n            pointerTypeRef.current = event.pointerType;\n        }\n        return {\n            onPointerDown: setPointerRef,\n            onPointerEnter: setPointerRef,\n            onMouseMove (event) {\n                const { nativeEvent } = event;\n                function handleMouseMove() {\n                    if (!blockMouseMoveRef.current && !openRef.current) {\n                        onOpenChange(true, nativeEvent, \"hover\");\n                    }\n                }\n                if (mouseOnly && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isMouseLikePointerType)(pointerTypeRef.current)) {\n                    return;\n                }\n                if (open || getRestMs(restMsRef.current) === 0) {\n                    return;\n                }\n                // Ignore insignificant movements to account for tremors.\n                if (restTimeoutPendingRef.current && event.movementX ** 2 + event.movementY ** 2 < 2) {\n                    return;\n                }\n                clearTimeoutIfSet(restTimeoutRef);\n                if (pointerTypeRef.current === \"touch\") {\n                    handleMouseMove();\n                } else {\n                    restTimeoutPendingRef.current = true;\n                    restTimeoutRef.current = window.setTimeout(handleMouseMove, getRestMs(restMsRef.current));\n                }\n            }\n        };\n    }, [\n        mouseOnly,\n        onOpenChange,\n        open,\n        openRef,\n        restMsRef\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>enabled ? {\n            reference\n        } : {}, [\n        enabled,\n        reference\n    ]);\n}\nconst NOOP = ()=>{};\nconst FloatingDelayGroupContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    delay: 0,\n    initialDelay: 0,\n    timeoutMs: 0,\n    currentId: null,\n    setCurrentId: NOOP,\n    setState: NOOP,\n    isInstantPhase: false\n});\n/**\n * @deprecated\n * Use the return value of `useDelayGroup()` instead.\n */ const useDelayGroupContext = ()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(FloatingDelayGroupContext);\n/**\n * Provides context for a group of floating elements that should share a\n * `delay`.\n * @see https://floating-ui.com/docs/FloatingDelayGroup\n */ function FloatingDelayGroup(props) {\n    const { children, delay, timeoutMs = 0 } = props;\n    const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer((prev, next)=>({\n            ...prev,\n            ...next\n        }), {\n        delay,\n        timeoutMs,\n        initialDelay: delay,\n        currentId: null,\n        isInstantPhase: false\n    });\n    const initialCurrentIdRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const setCurrentId = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((currentId)=>{\n        setState({\n            currentId\n        });\n    }, []);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (state.currentId) {\n            if (initialCurrentIdRef.current === null) {\n                initialCurrentIdRef.current = state.currentId;\n            } else if (!state.isInstantPhase) {\n                setState({\n                    isInstantPhase: true\n                });\n            }\n        } else {\n            if (state.isInstantPhase) {\n                setState({\n                    isInstantPhase: false\n                });\n            }\n            initialCurrentIdRef.current = null;\n        }\n    }, [\n        state.currentId,\n        state.isInstantPhase\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FloatingDelayGroupContext.Provider, {\n        value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n                ...state,\n                setState,\n                setCurrentId\n            }), [\n            state,\n            setCurrentId\n        ]),\n        children: children\n    });\n}\n/**\n * Enables grouping when called inside a component that's a child of a\n * `FloatingDelayGroup`.\n * @see https://floating-ui.com/docs/FloatingDelayGroup\n */ function useDelayGroup(context, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    const { open, onOpenChange, floatingId } = context;\n    const { id: optionId, enabled = true } = options;\n    const id = optionId != null ? optionId : floatingId;\n    const groupContext = useDelayGroupContext();\n    const { currentId, setCurrentId, initialDelay, setState, timeoutMs } = groupContext;\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (!enabled) return;\n        if (!currentId) return;\n        setState({\n            delay: {\n                open: 1,\n                close: getDelay(initialDelay, \"close\")\n            }\n        });\n        if (currentId !== id) {\n            onOpenChange(false);\n        }\n    }, [\n        enabled,\n        id,\n        onOpenChange,\n        setState,\n        currentId,\n        initialDelay\n    ]);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        function unset() {\n            onOpenChange(false);\n            setState({\n                delay: initialDelay,\n                currentId: null\n            });\n        }\n        if (!enabled) return;\n        if (!currentId) return;\n        if (!open && currentId === id) {\n            if (timeoutMs) {\n                const timeout = window.setTimeout(unset, timeoutMs);\n                return ()=>{\n                    clearTimeout(timeout);\n                };\n            }\n            unset();\n        }\n    }, [\n        enabled,\n        open,\n        setState,\n        currentId,\n        id,\n        onOpenChange,\n        initialDelay,\n        timeoutMs\n    ]);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (!enabled) return;\n        if (setCurrentId === NOOP || !open) return;\n        setCurrentId(id);\n    }, [\n        enabled,\n        open,\n        setCurrentId,\n        id\n    ]);\n    return groupContext;\n}\nconst NextFloatingDelayGroupContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    hasProvider: false,\n    timeoutMs: 0,\n    delayRef: {\n        current: 0\n    },\n    initialDelayRef: {\n        current: 0\n    },\n    timeoutIdRef: {\n        current: -1\n    },\n    currentIdRef: {\n        current: null\n    },\n    currentContextRef: {\n        current: null\n    }\n});\n/**\n * Experimental next version of `FloatingDelayGroup` to become the default\n * in the future. This component is not yet stable.\n * Provides context for a group of floating elements that should share a\n * `delay`. Unlike `FloatingDelayGroup`, `useNextDelayGroup` with this\n * component does not cause a re-render of unrelated consumers of the\n * context when the delay changes.\n * @see https://floating-ui.com/docs/FloatingDelayGroup\n */ function NextFloatingDelayGroup(props) {\n    const { children, delay, timeoutMs = 0 } = props;\n    const delayRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(delay);\n    const initialDelayRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(delay);\n    const currentIdRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const currentContextRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const timeoutIdRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(-1);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(NextFloatingDelayGroupContext.Provider, {\n        value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n                hasProvider: true,\n                delayRef,\n                initialDelayRef,\n                currentIdRef,\n                timeoutMs,\n                currentContextRef,\n                timeoutIdRef\n            }), [\n            timeoutMs\n        ]),\n        children: children\n    });\n}\n/**\n * Enables grouping when called inside a component that's a child of a\n * `NextFloatingDelayGroup`.\n * @see https://floating-ui.com/docs/FloatingDelayGroup\n */ function useNextDelayGroup(context, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    const { open, onOpenChange, floatingId } = context;\n    const { enabled = true } = options;\n    const groupContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(NextFloatingDelayGroupContext);\n    const { currentIdRef, delayRef, timeoutMs, initialDelayRef, currentContextRef, hasProvider, timeoutIdRef } = groupContext;\n    const [isInstantPhase, setIsInstantPhase] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        function unset() {\n            var _currentContextRef$cu;\n            setIsInstantPhase(false);\n            (_currentContextRef$cu = currentContextRef.current) == null || _currentContextRef$cu.setIsInstantPhase(false);\n            currentIdRef.current = null;\n            currentContextRef.current = null;\n            delayRef.current = initialDelayRef.current;\n        }\n        if (!enabled) return;\n        if (!currentIdRef.current) return;\n        if (!open && currentIdRef.current === floatingId) {\n            setIsInstantPhase(false);\n            if (timeoutMs) {\n                timeoutIdRef.current = window.setTimeout(unset, timeoutMs);\n                return ()=>{\n                    clearTimeout(timeoutIdRef.current);\n                };\n            }\n            unset();\n        }\n    }, [\n        enabled,\n        open,\n        floatingId,\n        currentIdRef,\n        delayRef,\n        timeoutMs,\n        initialDelayRef,\n        currentContextRef,\n        timeoutIdRef\n    ]);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (!enabled) return;\n        if (!open) return;\n        const prevContext = currentContextRef.current;\n        const prevId = currentIdRef.current;\n        currentContextRef.current = {\n            onOpenChange,\n            setIsInstantPhase\n        };\n        currentIdRef.current = floatingId;\n        delayRef.current = {\n            open: 0,\n            close: getDelay(initialDelayRef.current, \"close\")\n        };\n        if (prevId !== null && prevId !== floatingId) {\n            clearTimeoutIfSet(timeoutIdRef);\n            setIsInstantPhase(true);\n            prevContext == null || prevContext.setIsInstantPhase(true);\n            prevContext == null || prevContext.onOpenChange(false);\n        } else {\n            setIsInstantPhase(false);\n            prevContext == null || prevContext.setIsInstantPhase(false);\n        }\n    }, [\n        enabled,\n        open,\n        floatingId,\n        onOpenChange,\n        currentIdRef,\n        delayRef,\n        timeoutMs,\n        initialDelayRef,\n        currentContextRef,\n        timeoutIdRef\n    ]);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        return ()=>{\n            currentContextRef.current = null;\n        };\n    }, [\n        currentContextRef\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            hasProvider,\n            delayRef,\n            isInstantPhase\n        }), [\n        hasProvider,\n        delayRef,\n        isInstantPhase\n    ]);\n}\nlet rafId = 0;\nfunction enqueueFocus(el, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    const { preventScroll = false, cancelPrevious = true, sync = false } = options;\n    cancelPrevious && cancelAnimationFrame(rafId);\n    const exec = ()=>el == null ? void 0 : el.focus({\n            preventScroll\n        });\n    if (sync) {\n        exec();\n    } else {\n        rafId = requestAnimationFrame(exec);\n    }\n}\nfunction contains(parent, child) {\n    if (!parent || !child) {\n        return false;\n    }\n    const rootNode = child.getRootNode == null ? void 0 : child.getRootNode();\n    // First, attempt with faster native method\n    if (parent.contains(child)) {\n        return true;\n    }\n    // then fallback to custom implementation with Shadow DOM support\n    if (rootNode && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isShadowRoot)(rootNode)) {\n        let next = child;\n        while(next){\n            if (parent === next) {\n                return true;\n            }\n            // @ts-ignore\n            next = next.parentNode || next.host;\n        }\n    }\n    // Give up, the result is false\n    return false;\n}\nfunction getTarget(event) {\n    if (\"composedPath\" in event) {\n        return event.composedPath()[0];\n    }\n    // TS thinks `event` is of type never as it assumes all browsers support\n    // `composedPath()`, but browsers without shadow DOM don't.\n    return event.target;\n}\nfunction getDocument(node) {\n    return (node == null ? void 0 : node.ownerDocument) || document;\n}\n// Modified to add conditional `aria-hidden` support:\n// https://github.com/theKashey/aria-hidden/blob/9220c8f4a4fd35f63bee5510a9f41a37264382d4/src/index.ts\nconst counters = {\n    inert: /*#__PURE__*/ new WeakMap(),\n    \"aria-hidden\": /*#__PURE__*/ new WeakMap(),\n    none: /*#__PURE__*/ new WeakMap()\n};\nfunction getCounterMap(control) {\n    if (control === \"inert\") return counters.inert;\n    if (control === \"aria-hidden\") return counters[\"aria-hidden\"];\n    return counters.none;\n}\nlet uncontrolledElementsSet = /*#__PURE__*/ new WeakSet();\nlet markerMap = {};\nlet lockCount$1 = 0;\nconst supportsInert = ()=>typeof HTMLElement !== \"undefined\" && \"inert\" in HTMLElement.prototype;\nconst unwrapHost = (node)=>node && (node.host || unwrapHost(node.parentNode));\nconst correctElements = (parent, targets)=>targets.map((target)=>{\n        if (parent.contains(target)) {\n            return target;\n        }\n        const correctedTarget = unwrapHost(target);\n        if (parent.contains(correctedTarget)) {\n            return correctedTarget;\n        }\n        return null;\n    }).filter((x)=>x != null);\nfunction applyAttributeToOthers(uncorrectedAvoidElements, body, ariaHidden, inert) {\n    const markerName = \"data-floating-ui-inert\";\n    const controlAttribute = inert ? \"inert\" : ariaHidden ? \"aria-hidden\" : null;\n    const avoidElements = correctElements(body, uncorrectedAvoidElements);\n    const elementsToKeep = new Set();\n    const elementsToStop = new Set(avoidElements);\n    const hiddenElements = [];\n    if (!markerMap[markerName]) {\n        markerMap[markerName] = new WeakMap();\n    }\n    const markerCounter = markerMap[markerName];\n    avoidElements.forEach(keep);\n    deep(body);\n    elementsToKeep.clear();\n    function keep(el) {\n        if (!el || elementsToKeep.has(el)) {\n            return;\n        }\n        elementsToKeep.add(el);\n        el.parentNode && keep(el.parentNode);\n    }\n    function deep(parent) {\n        if (!parent || elementsToStop.has(parent)) {\n            return;\n        }\n        [].forEach.call(parent.children, (node)=>{\n            if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.getNodeName)(node) === \"script\") return;\n            if (elementsToKeep.has(node)) {\n                deep(node);\n            } else {\n                const attr = controlAttribute ? node.getAttribute(controlAttribute) : null;\n                const alreadyHidden = attr !== null && attr !== \"false\";\n                const counterMap = getCounterMap(controlAttribute);\n                const counterValue = (counterMap.get(node) || 0) + 1;\n                const markerValue = (markerCounter.get(node) || 0) + 1;\n                counterMap.set(node, counterValue);\n                markerCounter.set(node, markerValue);\n                hiddenElements.push(node);\n                if (counterValue === 1 && alreadyHidden) {\n                    uncontrolledElementsSet.add(node);\n                }\n                if (markerValue === 1) {\n                    node.setAttribute(markerName, \"\");\n                }\n                if (!alreadyHidden && controlAttribute) {\n                    node.setAttribute(controlAttribute, controlAttribute === \"inert\" ? \"\" : \"true\");\n                }\n            }\n        });\n    }\n    lockCount$1++;\n    return ()=>{\n        hiddenElements.forEach((element)=>{\n            const counterMap = getCounterMap(controlAttribute);\n            const currentCounterValue = counterMap.get(element) || 0;\n            const counterValue = currentCounterValue - 1;\n            const markerValue = (markerCounter.get(element) || 0) - 1;\n            counterMap.set(element, counterValue);\n            markerCounter.set(element, markerValue);\n            if (!counterValue) {\n                if (!uncontrolledElementsSet.has(element) && controlAttribute) {\n                    element.removeAttribute(controlAttribute);\n                }\n                uncontrolledElementsSet.delete(element);\n            }\n            if (!markerValue) {\n                element.removeAttribute(markerName);\n            }\n        });\n        lockCount$1--;\n        if (!lockCount$1) {\n            counters.inert = new WeakMap();\n            counters[\"aria-hidden\"] = new WeakMap();\n            counters.none = new WeakMap();\n            uncontrolledElementsSet = new WeakSet();\n            markerMap = {};\n        }\n    };\n}\nfunction markOthers(avoidElements, ariaHidden, inert) {\n    if (ariaHidden === void 0) {\n        ariaHidden = false;\n    }\n    if (inert === void 0) {\n        inert = false;\n    }\n    const body = getDocument(avoidElements[0]).body;\n    return applyAttributeToOthers(avoidElements.concat(Array.from(body.querySelectorAll(\"[aria-live]\"))), body, ariaHidden, inert);\n}\nconst HIDDEN_STYLES = {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: \"1px\",\n    margin: \"-1px\",\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"fixed\",\n    whiteSpace: \"nowrap\",\n    width: \"1px\",\n    top: 0,\n    left: 0\n};\nconst FocusGuard = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function FocusGuard(props, ref) {\n    const [role, setRole] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isSafari)()) {\n            // Unlike other screen readers such as NVDA and JAWS, the virtual cursor\n            // on VoiceOver does trigger the onFocus event, so we can use the focus\n            // trap element. On Safari, only buttons trigger the onFocus event.\n            // NB: \"group\" role in the Sandbox no longer appears to work, must be a\n            // button role.\n            setRole(\"button\");\n        }\n    }, []);\n    const restProps = {\n        ref,\n        tabIndex: 0,\n        // Role is only for VoiceOver\n        role,\n        \"aria-hidden\": role ? undefined : true,\n        [createAttribute(\"focus-guard\")]: \"\",\n        style: HIDDEN_STYLES\n    };\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n        ...props,\n        ...restProps\n    });\n});\nconst PortalContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nconst attr = /*#__PURE__*/ createAttribute(\"portal\");\n/**\n * @see https://floating-ui.com/docs/FloatingPortal#usefloatingportalnode\n */ function useFloatingPortalNode(props) {\n    if (props === void 0) {\n        props = {};\n    }\n    const { id, root } = props;\n    const uniqueId = useId();\n    const portalContext = usePortalContext();\n    const [portalNode, setPortalNode] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    const portalNodeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        return ()=>{\n            portalNode == null || portalNode.remove();\n            // Allow the subsequent layout effects to create a new node on updates.\n            // The portal node will still be cleaned up on unmount.\n            // https://github.com/floating-ui/floating-ui/issues/2454\n            queueMicrotask(()=>{\n                portalNodeRef.current = null;\n            });\n        };\n    }, [\n        portalNode\n    ]);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        // Wait for the uniqueId to be generated before creating the portal node in\n        // React <18 (using `useFloatingId` instead of the native `useId`).\n        // https://github.com/floating-ui/floating-ui/issues/2778\n        if (!uniqueId) return;\n        if (portalNodeRef.current) return;\n        const existingIdRoot = id ? document.getElementById(id) : null;\n        if (!existingIdRoot) return;\n        const subRoot = document.createElement(\"div\");\n        subRoot.id = uniqueId;\n        subRoot.setAttribute(attr, \"\");\n        existingIdRoot.appendChild(subRoot);\n        portalNodeRef.current = subRoot;\n        setPortalNode(subRoot);\n    }, [\n        id,\n        uniqueId\n    ]);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        // Wait for the root to exist before creating the portal node. The root must\n        // be stored in state, not a ref, for this to work reactively.\n        if (root === null) return;\n        if (!uniqueId) return;\n        if (portalNodeRef.current) return;\n        let container = root || (portalContext == null ? void 0 : portalContext.portalNode);\n        if (container && !(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isElement)(container)) container = container.current;\n        container = container || document.body;\n        let idWrapper = null;\n        if (id) {\n            idWrapper = document.createElement(\"div\");\n            idWrapper.id = id;\n            container.appendChild(idWrapper);\n        }\n        const subRoot = document.createElement(\"div\");\n        subRoot.id = uniqueId;\n        subRoot.setAttribute(attr, \"\");\n        container = idWrapper || container;\n        container.appendChild(subRoot);\n        portalNodeRef.current = subRoot;\n        setPortalNode(subRoot);\n    }, [\n        id,\n        root,\n        uniqueId,\n        portalContext\n    ]);\n    return portalNode;\n}\n/**\n * Portals the floating element into a given container element — by default,\n * outside of the app root and into the body.\n * This is necessary to ensure the floating element can appear outside any\n * potential parent containers that cause clipping (such as `overflow: hidden`),\n * while retaining its location in the React tree.\n * @see https://floating-ui.com/docs/FloatingPortal\n */ function FloatingPortal(props) {\n    const { children, id, root, preserveTabOrder = true } = props;\n    const portalNode = useFloatingPortalNode({\n        id,\n        root\n    });\n    const [focusManagerState, setFocusManagerState] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    const beforeOutsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const afterOutsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const beforeInsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const afterInsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const modal = focusManagerState == null ? void 0 : focusManagerState.modal;\n    const open = focusManagerState == null ? void 0 : focusManagerState.open;\n    const shouldRenderGuards = // The FocusManager and therefore floating element are currently open/\n    // rendered.\n    !!focusManagerState && // Guards are only for non-modal focus management.\n    !focusManagerState.modal && // Don't render if unmount is transitioning.\n    focusManagerState.open && preserveTabOrder && !!(root || portalNode);\n    // https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/TabbablePortal.tsx\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!portalNode || !preserveTabOrder || modal) {\n            return;\n        }\n        // Make sure elements inside the portal element are tabbable only when the\n        // portal has already been focused, either by tabbing into a focus trap\n        // element outside or using the mouse.\n        function onFocus(event) {\n            if (portalNode && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isOutsideEvent)(event)) {\n                const focusing = event.type === \"focusin\";\n                const manageFocus = focusing ? _floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.enableFocusInside : _floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.disableFocusInside;\n                manageFocus(portalNode);\n            }\n        }\n        // Listen to the event on the capture phase so they run before the focus\n        // trap elements onFocus prop is called.\n        portalNode.addEventListener(\"focusin\", onFocus, true);\n        portalNode.addEventListener(\"focusout\", onFocus, true);\n        return ()=>{\n            portalNode.removeEventListener(\"focusin\", onFocus, true);\n            portalNode.removeEventListener(\"focusout\", onFocus, true);\n        };\n    }, [\n        portalNode,\n        preserveTabOrder,\n        modal\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!portalNode) return;\n        if (open) return;\n        (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.enableFocusInside)(portalNode);\n    }, [\n        open,\n        portalNode\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(PortalContext.Provider, {\n        value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n                preserveTabOrder,\n                beforeOutsideRef,\n                afterOutsideRef,\n                beforeInsideRef,\n                afterInsideRef,\n                portalNode,\n                setFocusManagerState\n            }), [\n            preserveTabOrder,\n            portalNode\n        ]),\n        children: [\n            shouldRenderGuards && portalNode && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FocusGuard, {\n                \"data-type\": \"outside\",\n                ref: beforeOutsideRef,\n                onFocus: (event)=>{\n                    if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isOutsideEvent)(event, portalNode)) {\n                        var _beforeInsideRef$curr;\n                        (_beforeInsideRef$curr = beforeInsideRef.current) == null || _beforeInsideRef$curr.focus();\n                    } else {\n                        const domReference = focusManagerState ? focusManagerState.domReference : null;\n                        const prevTabbable = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getPreviousTabbable)(domReference);\n                        prevTabbable == null || prevTabbable.focus();\n                    }\n                }\n            }),\n            shouldRenderGuards && portalNode && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n                \"aria-owns\": portalNode.id,\n                style: HIDDEN_STYLES\n            }),\n            portalNode && /*#__PURE__*/ react_dom__WEBPACK_IMPORTED_MODULE_2__.createPortal(children, portalNode),\n            shouldRenderGuards && portalNode && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FocusGuard, {\n                \"data-type\": \"outside\",\n                ref: afterOutsideRef,\n                onFocus: (event)=>{\n                    if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isOutsideEvent)(event, portalNode)) {\n                        var _afterInsideRef$curre;\n                        (_afterInsideRef$curre = afterInsideRef.current) == null || _afterInsideRef$curre.focus();\n                    } else {\n                        const domReference = focusManagerState ? focusManagerState.domReference : null;\n                        const nextTabbable = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getNextTabbable)(domReference);\n                        nextTabbable == null || nextTabbable.focus();\n                        (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false, event.nativeEvent, \"focus-out\"));\n                    }\n                }\n            })\n        ]\n    });\n}\nconst usePortalContext = ()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(PortalContext);\nfunction useLiteMergeRefs(refs) {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return (value)=>{\n            refs.forEach((ref)=>{\n                if (ref) {\n                    ref.current = value;\n                }\n            });\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, refs);\n}\nconst LIST_LIMIT = 20;\nlet previouslyFocusedElements = [];\nfunction addPreviouslyFocusedElement(element) {\n    previouslyFocusedElements = previouslyFocusedElements.filter((el)=>el.isConnected);\n    if (element && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.getNodeName)(element) !== \"body\") {\n        previouslyFocusedElements.push(element);\n        if (previouslyFocusedElements.length > LIST_LIMIT) {\n            previouslyFocusedElements = previouslyFocusedElements.slice(-20);\n        }\n    }\n}\nfunction getPreviouslyFocusedElement() {\n    return previouslyFocusedElements.slice().reverse().find((el)=>el.isConnected);\n}\nfunction getFirstTabbableElement(container) {\n    const tabbableOptions = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getTabbableOptions)();\n    if ((0,tabbable__WEBPACK_IMPORTED_MODULE_7__.isTabbable)(container, tabbableOptions)) {\n        return container;\n    }\n    return (0,tabbable__WEBPACK_IMPORTED_MODULE_7__.tabbable)(container, tabbableOptions)[0] || container;\n}\nfunction handleTabIndex(floatingFocusElement, orderRef) {\n    var _floatingFocusElement;\n    if (!orderRef.current.includes(\"floating\") && !((_floatingFocusElement = floatingFocusElement.getAttribute(\"role\")) != null && _floatingFocusElement.includes(\"dialog\"))) {\n        return;\n    }\n    const options = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getTabbableOptions)();\n    const focusableElements = (0,tabbable__WEBPACK_IMPORTED_MODULE_7__.focusable)(floatingFocusElement, options);\n    const tabbableContent = focusableElements.filter((element)=>{\n        const dataTabIndex = element.getAttribute(\"data-tabindex\") || \"\";\n        return (0,tabbable__WEBPACK_IMPORTED_MODULE_7__.isTabbable)(element, options) || element.hasAttribute(\"data-tabindex\") && !dataTabIndex.startsWith(\"-\");\n    });\n    const tabIndex = floatingFocusElement.getAttribute(\"tabindex\");\n    if (orderRef.current.includes(\"floating\") || tabbableContent.length === 0) {\n        if (tabIndex !== \"0\") {\n            floatingFocusElement.setAttribute(\"tabindex\", \"0\");\n        }\n    } else if (tabIndex !== \"-1\" || floatingFocusElement.hasAttribute(\"data-tabindex\") && floatingFocusElement.getAttribute(\"data-tabindex\") !== \"-1\") {\n        floatingFocusElement.setAttribute(\"tabindex\", \"-1\");\n        floatingFocusElement.setAttribute(\"data-tabindex\", \"-1\");\n    }\n}\nconst VisuallyHiddenDismiss = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function VisuallyHiddenDismiss(props, ref) {\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"button\", {\n        ...props,\n        type: \"button\",\n        ref: ref,\n        tabIndex: -1,\n        style: HIDDEN_STYLES\n    });\n});\n/**\n * Provides focus management for the floating element.\n * @see https://floating-ui.com/docs/FloatingFocusManager\n */ function FloatingFocusManager(props) {\n    const { context, children, disabled = false, order = [\n        \"content\"\n    ], guards: _guards = true, initialFocus = 0, returnFocus = true, restoreFocus = false, modal = true, visuallyHiddenDismiss = false, closeOnFocusOut = true, outsideElementsInert = false, getInsideElements: _getInsideElements = ()=>[] } = props;\n    const { open, onOpenChange, events, dataRef, elements: { domReference, floating } } = context;\n    const getNodeId = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)(()=>{\n        var _dataRef$current$floa;\n        return (_dataRef$current$floa = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa.nodeId;\n    });\n    const getInsideElements = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)(_getInsideElements);\n    const ignoreInitialFocus = typeof initialFocus === \"number\" && initialFocus < 0;\n    // If the reference is a combobox and is typeable (e.g. input/textarea),\n    // there are different focus semantics. The guards should not be rendered, but\n    // aria-hidden should be applied to all nodes still. Further, the visually\n    // hidden dismiss button should only appear at the end of the list, not the\n    // start.\n    const isUntrappedTypeableCombobox = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isTypeableCombobox)(domReference) && ignoreInitialFocus;\n    // Force the guards to be rendered if the `inert` attribute is not supported.\n    const inertSupported = supportsInert();\n    const guards = inertSupported ? _guards : true;\n    const useInert = !guards || inertSupported && outsideElementsInert;\n    const orderRef = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useLatestRef)(order);\n    const initialFocusRef = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useLatestRef)(initialFocus);\n    const returnFocusRef = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useLatestRef)(returnFocus);\n    const tree = useFloatingTree();\n    const portalContext = usePortalContext();\n    const startDismissButtonRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const endDismissButtonRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const preventReturnFocusRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const isPointerDownRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const tabbableIndexRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(-1);\n    const isInsidePortal = portalContext != null;\n    const floatingFocusElement = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getFloatingFocusElement)(floating);\n    const getTabbableContent = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)(function(container) {\n        if (container === void 0) {\n            container = floatingFocusElement;\n        }\n        return container ? (0,tabbable__WEBPACK_IMPORTED_MODULE_7__.tabbable)(container, (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getTabbableOptions)()) : [];\n    });\n    const getTabbableElements = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)((container)=>{\n        const content = getTabbableContent(container);\n        return orderRef.current.map((type)=>{\n            if (domReference && type === \"reference\") {\n                return domReference;\n            }\n            if (floatingFocusElement && type === \"floating\") {\n                return floatingFocusElement;\n            }\n            return content;\n        }).filter(Boolean).flat();\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (disabled) return;\n        if (!modal) return;\n        function onKeyDown(event) {\n            if (event.key === \"Tab\") {\n                // The focus guards have nothing to focus, so we need to stop the event.\n                if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.contains)(floatingFocusElement, (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.activeElement)((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getDocument)(floatingFocusElement))) && getTabbableContent().length === 0 && !isUntrappedTypeableCombobox) {\n                    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.stopEvent)(event);\n                }\n                const els = getTabbableElements();\n                const target = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getTarget)(event);\n                if (orderRef.current[0] === \"reference\" && target === domReference) {\n                    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.stopEvent)(event);\n                    if (event.shiftKey) {\n                        enqueueFocus(els[els.length - 1]);\n                    } else {\n                        enqueueFocus(els[1]);\n                    }\n                }\n                if (orderRef.current[1] === \"floating\" && target === floatingFocusElement && event.shiftKey) {\n                    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.stopEvent)(event);\n                    enqueueFocus(els[0]);\n                }\n            }\n        }\n        const doc = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getDocument)(floatingFocusElement);\n        doc.addEventListener(\"keydown\", onKeyDown);\n        return ()=>{\n            doc.removeEventListener(\"keydown\", onKeyDown);\n        };\n    }, [\n        disabled,\n        domReference,\n        floatingFocusElement,\n        modal,\n        orderRef,\n        isUntrappedTypeableCombobox,\n        getTabbableContent,\n        getTabbableElements\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (disabled) return;\n        if (!floating) return;\n        function handleFocusIn(event) {\n            const target = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getTarget)(event);\n            const tabbableContent = getTabbableContent();\n            const tabbableIndex = tabbableContent.indexOf(target);\n            if (tabbableIndex !== -1) {\n                tabbableIndexRef.current = tabbableIndex;\n            }\n        }\n        floating.addEventListener(\"focusin\", handleFocusIn);\n        return ()=>{\n            floating.removeEventListener(\"focusin\", handleFocusIn);\n        };\n    }, [\n        disabled,\n        floating,\n        getTabbableContent\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (disabled) return;\n        if (!closeOnFocusOut) return;\n        // In Safari, buttons lose focus when pressing them.\n        function handlePointerDown() {\n            isPointerDownRef.current = true;\n            setTimeout(()=>{\n                isPointerDownRef.current = false;\n            });\n        }\n        function handleFocusOutside(event) {\n            const relatedTarget = event.relatedTarget;\n            const currentTarget = event.currentTarget;\n            const target = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getTarget)(event);\n            queueMicrotask(()=>{\n                const nodeId = getNodeId();\n                const movedToUnrelatedNode = !((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.contains)(domReference, relatedTarget) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.contains)(floating, relatedTarget) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.contains)(relatedTarget, floating) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.contains)(portalContext == null ? void 0 : portalContext.portalNode, relatedTarget) || relatedTarget != null && relatedTarget.hasAttribute(createAttribute(\"focus-guard\")) || tree && ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getNodeChildren)(tree.nodesRef.current, nodeId).find((node)=>{\n                    var _node$context, _node$context2;\n                    return (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.contains)((_node$context = node.context) == null ? void 0 : _node$context.elements.floating, relatedTarget) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.contains)((_node$context2 = node.context) == null ? void 0 : _node$context2.elements.domReference, relatedTarget);\n                }) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getNodeAncestors)(tree.nodesRef.current, nodeId).find((node)=>{\n                    var _node$context3, _node$context4, _node$context5;\n                    return [\n                        (_node$context3 = node.context) == null ? void 0 : _node$context3.elements.floating,\n                        (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getFloatingFocusElement)((_node$context4 = node.context) == null ? void 0 : _node$context4.elements.floating)\n                    ].includes(relatedTarget) || ((_node$context5 = node.context) == null ? void 0 : _node$context5.elements.domReference) === relatedTarget;\n                })));\n                if (currentTarget === domReference && floatingFocusElement) {\n                    handleTabIndex(floatingFocusElement, orderRef);\n                }\n                // Restore focus to the previous tabbable element index to prevent\n                // focus from being lost outside the floating tree.\n                if (restoreFocus && currentTarget !== domReference && !(target != null && target.isConnected) && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.activeElement)((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getDocument)(floatingFocusElement)) === (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getDocument)(floatingFocusElement).body) {\n                    // Let `FloatingPortal` effect knows that focus is still inside the\n                    // floating tree.\n                    if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isHTMLElement)(floatingFocusElement)) {\n                        floatingFocusElement.focus();\n                    }\n                    const prevTabbableIndex = tabbableIndexRef.current;\n                    const tabbableContent = getTabbableContent();\n                    const nodeToFocus = tabbableContent[prevTabbableIndex] || tabbableContent[tabbableContent.length - 1] || floatingFocusElement;\n                    if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isHTMLElement)(nodeToFocus)) {\n                        nodeToFocus.focus();\n                    }\n                }\n                // https://github.com/floating-ui/floating-ui/issues/3060\n                if (dataRef.current.insideReactTree) {\n                    dataRef.current.insideReactTree = false;\n                    return;\n                }\n                // Focus did not move inside the floating tree, and there are no tabbable\n                // portal guards to handle closing.\n                if ((isUntrappedTypeableCombobox ? true : !modal) && relatedTarget && movedToUnrelatedNode && !isPointerDownRef.current && // Fix React 18 Strict Mode returnFocus due to double rendering.\n                relatedTarget !== getPreviouslyFocusedElement()) {\n                    preventReturnFocusRef.current = true;\n                    onOpenChange(false, event, \"focus-out\");\n                }\n            });\n        }\n        if (floating && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isHTMLElement)(domReference)) {\n            domReference.addEventListener(\"focusout\", handleFocusOutside);\n            domReference.addEventListener(\"pointerdown\", handlePointerDown);\n            floating.addEventListener(\"focusout\", handleFocusOutside);\n            return ()=>{\n                domReference.removeEventListener(\"focusout\", handleFocusOutside);\n                domReference.removeEventListener(\"pointerdown\", handlePointerDown);\n                floating.removeEventListener(\"focusout\", handleFocusOutside);\n            };\n        }\n    }, [\n        disabled,\n        domReference,\n        floating,\n        floatingFocusElement,\n        modal,\n        tree,\n        portalContext,\n        onOpenChange,\n        closeOnFocusOut,\n        restoreFocus,\n        getTabbableContent,\n        isUntrappedTypeableCombobox,\n        getNodeId,\n        orderRef,\n        dataRef\n    ]);\n    const beforeGuardRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const afterGuardRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const mergedBeforeGuardRef = useLiteMergeRefs([\n        beforeGuardRef,\n        portalContext == null ? void 0 : portalContext.beforeInsideRef\n    ]);\n    const mergedAfterGuardRef = useLiteMergeRefs([\n        afterGuardRef,\n        portalContext == null ? void 0 : portalContext.afterInsideRef\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var _portalContext$portal, _ancestors$find;\n        if (disabled) return;\n        if (!floating) return;\n        // Don't hide portals nested within the parent portal.\n        const portalNodes = Array.from((portalContext == null || (_portalContext$portal = portalContext.portalNode) == null ? void 0 : _portalContext$portal.querySelectorAll(\"[\" + createAttribute(\"portal\") + \"]\")) || []);\n        const ancestors = tree ? (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getNodeAncestors)(tree.nodesRef.current, getNodeId()) : [];\n        const ancestorFloatingNodes = tree && !modal ? ancestors.map((node)=>{\n            var _node$context6;\n            return (_node$context6 = node.context) == null ? void 0 : _node$context6.elements.floating;\n        }) : [];\n        const rootAncestorComboboxDomReference = (_ancestors$find = ancestors.find((node)=>{\n            var _node$context7;\n            return (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isTypeableCombobox)(((_node$context7 = node.context) == null ? void 0 : _node$context7.elements.domReference) || null);\n        })) == null || (_ancestors$find = _ancestors$find.context) == null ? void 0 : _ancestors$find.elements.domReference;\n        const insideElements = [\n            floating,\n            rootAncestorComboboxDomReference,\n            ...portalNodes,\n            ...ancestorFloatingNodes,\n            ...getInsideElements(),\n            startDismissButtonRef.current,\n            endDismissButtonRef.current,\n            beforeGuardRef.current,\n            afterGuardRef.current,\n            portalContext == null ? void 0 : portalContext.beforeOutsideRef.current,\n            portalContext == null ? void 0 : portalContext.afterOutsideRef.current,\n            orderRef.current.includes(\"reference\") || isUntrappedTypeableCombobox ? domReference : null\n        ].filter((x)=>x != null);\n        const cleanup = modal || isUntrappedTypeableCombobox ? markOthers(insideElements, !useInert, useInert) : markOthers(insideElements);\n        return ()=>{\n            cleanup();\n        };\n    }, [\n        disabled,\n        domReference,\n        floating,\n        modal,\n        orderRef,\n        portalContext,\n        isUntrappedTypeableCombobox,\n        guards,\n        useInert,\n        tree,\n        getNodeId,\n        getInsideElements\n    ]);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (disabled || !(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isHTMLElement)(floatingFocusElement)) return;\n        const doc = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getDocument)(floatingFocusElement);\n        const previouslyFocusedElement = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.activeElement)(doc);\n        // Wait for any layout effect state setters to execute to set `tabIndex`.\n        queueMicrotask(()=>{\n            const focusableElements = getTabbableElements(floatingFocusElement);\n            const initialFocusValue = initialFocusRef.current;\n            const elToFocus = (typeof initialFocusValue === \"number\" ? focusableElements[initialFocusValue] : initialFocusValue.current) || floatingFocusElement;\n            const focusAlreadyInsideFloatingEl = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.contains)(floatingFocusElement, previouslyFocusedElement);\n            if (!ignoreInitialFocus && !focusAlreadyInsideFloatingEl && open) {\n                enqueueFocus(elToFocus, {\n                    preventScroll: elToFocus === floatingFocusElement\n                });\n            }\n        });\n    }, [\n        disabled,\n        open,\n        floatingFocusElement,\n        ignoreInitialFocus,\n        getTabbableElements,\n        initialFocusRef\n    ]);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (disabled || !floatingFocusElement) return;\n        const doc = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getDocument)(floatingFocusElement);\n        const previouslyFocusedElement = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.activeElement)(doc);\n        addPreviouslyFocusedElement(previouslyFocusedElement);\n        // Dismissing via outside press should always ignore `returnFocus` to\n        // prevent unwanted scrolling.\n        function onOpenChange(_ref) {\n            let { reason, event, nested } = _ref;\n            if ([\n                \"hover\",\n                \"safe-polygon\"\n            ].includes(reason) && event.type === \"mouseleave\") {\n                preventReturnFocusRef.current = true;\n            }\n            if (reason !== \"outside-press\") return;\n            if (nested) {\n                preventReturnFocusRef.current = false;\n            } else if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isVirtualClick)(event) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isVirtualPointerEvent)(event)) {\n                preventReturnFocusRef.current = false;\n            } else {\n                let isPreventScrollSupported = false;\n                document.createElement(\"div\").focus({\n                    get preventScroll () {\n                        isPreventScrollSupported = true;\n                        return false;\n                    }\n                });\n                if (isPreventScrollSupported) {\n                    preventReturnFocusRef.current = false;\n                } else {\n                    preventReturnFocusRef.current = true;\n                }\n            }\n        }\n        events.on(\"openchange\", onOpenChange);\n        const fallbackEl = doc.createElement(\"span\");\n        fallbackEl.setAttribute(\"tabindex\", \"-1\");\n        fallbackEl.setAttribute(\"aria-hidden\", \"true\");\n        Object.assign(fallbackEl.style, HIDDEN_STYLES);\n        if (isInsidePortal && domReference) {\n            domReference.insertAdjacentElement(\"afterend\", fallbackEl);\n        }\n        function getReturnElement() {\n            if (typeof returnFocusRef.current === \"boolean\") {\n                const el = domReference || getPreviouslyFocusedElement();\n                return el && el.isConnected ? el : fallbackEl;\n            }\n            return returnFocusRef.current.current || fallbackEl;\n        }\n        return ()=>{\n            events.off(\"openchange\", onOpenChange);\n            const activeEl = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.activeElement)(doc);\n            const isFocusInsideFloatingTree = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.contains)(floating, activeEl) || tree && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getNodeChildren)(tree.nodesRef.current, getNodeId()).some((node)=>{\n                var _node$context8;\n                return (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.contains)((_node$context8 = node.context) == null ? void 0 : _node$context8.elements.floating, activeEl);\n            });\n            const returnElement = getReturnElement();\n            queueMicrotask(()=>{\n                // This is `returnElement`, if it's tabbable, or its first tabbable child.\n                const tabbableReturnElement = getFirstTabbableElement(returnElement);\n                if (// eslint-disable-next-line react-hooks/exhaustive-deps\n                returnFocusRef.current && !preventReturnFocusRef.current && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isHTMLElement)(tabbableReturnElement) && // If the focus moved somewhere else after mount, avoid returning focus\n                // since it likely entered a different element which should be\n                // respected: https://github.com/floating-ui/floating-ui/issues/2607\n                (tabbableReturnElement !== activeEl && activeEl !== doc.body ? isFocusInsideFloatingTree : true)) {\n                    tabbableReturnElement.focus({\n                        preventScroll: true\n                    });\n                }\n                fallbackEl.remove();\n            });\n        };\n    }, [\n        disabled,\n        floating,\n        floatingFocusElement,\n        returnFocusRef,\n        dataRef,\n        events,\n        tree,\n        isInsidePortal,\n        domReference,\n        getNodeId\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        // The `returnFocus` cleanup behavior is inside a microtask; ensure we\n        // wait for it to complete before resetting the flag.\n        queueMicrotask(()=>{\n            preventReturnFocusRef.current = false;\n        });\n    }, [\n        disabled\n    ]);\n    // Synchronize the `context` & `modal` value to the FloatingPortal context.\n    // It will decide whether or not it needs to render its own guards.\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (disabled) return;\n        if (!portalContext) return;\n        portalContext.setFocusManagerState({\n            modal,\n            closeOnFocusOut,\n            open,\n            onOpenChange,\n            domReference\n        });\n        return ()=>{\n            portalContext.setFocusManagerState(null);\n        };\n    }, [\n        disabled,\n        portalContext,\n        modal,\n        open,\n        onOpenChange,\n        closeOnFocusOut,\n        domReference\n    ]);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (disabled) return;\n        if (!floatingFocusElement) return;\n        handleTabIndex(floatingFocusElement, orderRef);\n    }, [\n        disabled,\n        floatingFocusElement,\n        orderRef\n    ]);\n    function renderDismissButton(location) {\n        if (disabled || !visuallyHiddenDismiss || !modal) {\n            return null;\n        }\n        return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(VisuallyHiddenDismiss, {\n            ref: location === \"start\" ? startDismissButtonRef : endDismissButtonRef,\n            onClick: (event)=>onOpenChange(false, event.nativeEvent),\n            children: typeof visuallyHiddenDismiss === \"string\" ? visuallyHiddenDismiss : \"Dismiss\"\n        });\n    }\n    const shouldRenderGuards = !disabled && guards && (modal ? !isUntrappedTypeableCombobox : true) && (isInsidePortal || modal);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n        children: [\n            shouldRenderGuards && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FocusGuard, {\n                \"data-type\": \"inside\",\n                ref: mergedBeforeGuardRef,\n                onFocus: (event)=>{\n                    if (modal) {\n                        const els = getTabbableElements();\n                        enqueueFocus(order[0] === \"reference\" ? els[0] : els[els.length - 1]);\n                    } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {\n                        preventReturnFocusRef.current = false;\n                        if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isOutsideEvent)(event, portalContext.portalNode)) {\n                            const nextTabbable = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getNextTabbable)(domReference);\n                            nextTabbable == null || nextTabbable.focus();\n                        } else {\n                            var _portalContext$before;\n                            (_portalContext$before = portalContext.beforeOutsideRef.current) == null || _portalContext$before.focus();\n                        }\n                    }\n                }\n            }),\n            !isUntrappedTypeableCombobox && renderDismissButton(\"start\"),\n            children,\n            renderDismissButton(\"end\"),\n            shouldRenderGuards && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FocusGuard, {\n                \"data-type\": \"inside\",\n                ref: mergedAfterGuardRef,\n                onFocus: (event)=>{\n                    if (modal) {\n                        enqueueFocus(getTabbableElements()[0]);\n                    } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {\n                        if (closeOnFocusOut) {\n                            preventReturnFocusRef.current = true;\n                        }\n                        if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isOutsideEvent)(event, portalContext.portalNode)) {\n                            const prevTabbable = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getPreviousTabbable)(domReference);\n                            prevTabbable == null || prevTabbable.focus();\n                        } else {\n                            var _portalContext$afterO;\n                            (_portalContext$afterO = portalContext.afterOutsideRef.current) == null || _portalContext$afterO.focus();\n                        }\n                    }\n                }\n            })\n        ]\n    });\n}\nlet lockCount = 0;\nconst scrollbarProperty = \"--floating-ui-scrollbar-width\";\nfunction enableScrollLock() {\n    const platform = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getPlatform)();\n    const isIOS = /iP(hone|ad|od)|iOS/.test(platform) || // iPads can claim to be MacIntel\n    platform === \"MacIntel\" && navigator.maxTouchPoints > 1;\n    const bodyStyle = document.body.style;\n    // RTL <body> scrollbar\n    const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;\n    const paddingProp = scrollbarX ? \"paddingLeft\" : \"paddingRight\";\n    const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;\n    const scrollX = bodyStyle.left ? parseFloat(bodyStyle.left) : window.scrollX;\n    const scrollY = bodyStyle.top ? parseFloat(bodyStyle.top) : window.scrollY;\n    bodyStyle.overflow = \"hidden\";\n    bodyStyle.setProperty(scrollbarProperty, scrollbarWidth + \"px\");\n    if (scrollbarWidth) {\n        bodyStyle[paddingProp] = scrollbarWidth + \"px\";\n    }\n    // Only iOS doesn't respect `overflow: hidden` on document.body, and this\n    // technique has fewer side effects.\n    if (isIOS) {\n        var _window$visualViewpor, _window$visualViewpor2;\n        // iOS 12 does not support `visualViewport`.\n        const offsetLeft = ((_window$visualViewpor = window.visualViewport) == null ? void 0 : _window$visualViewpor.offsetLeft) || 0;\n        const offsetTop = ((_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetTop) || 0;\n        Object.assign(bodyStyle, {\n            position: \"fixed\",\n            top: -(scrollY - Math.floor(offsetTop)) + \"px\",\n            left: -(scrollX - Math.floor(offsetLeft)) + \"px\",\n            right: \"0\"\n        });\n    }\n    return ()=>{\n        Object.assign(bodyStyle, {\n            overflow: \"\",\n            [paddingProp]: \"\"\n        });\n        bodyStyle.removeProperty(scrollbarProperty);\n        if (isIOS) {\n            Object.assign(bodyStyle, {\n                position: \"\",\n                top: \"\",\n                left: \"\",\n                right: \"\"\n            });\n            window.scrollTo(scrollX, scrollY);\n        }\n    };\n}\nlet cleanup = ()=>{};\n/**\n * Provides base styling for a fixed overlay element to dim content or block\n * pointer events behind a floating element.\n * It's a regular `<div>`, so it can be styled via any CSS solution you prefer.\n * @see https://floating-ui.com/docs/FloatingOverlay\n */ const FloatingOverlay = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function FloatingOverlay(props, ref) {\n    const { lockScroll = false, ...rest } = props;\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (!lockScroll) return;\n        lockCount++;\n        if (lockCount === 1) {\n            cleanup = enableScrollLock();\n        }\n        return ()=>{\n            lockCount--;\n            if (lockCount === 0) {\n                cleanup();\n            }\n        };\n    }, [\n        lockScroll\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        ref: ref,\n        ...rest,\n        style: {\n            position: \"fixed\",\n            overflow: \"auto\",\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            ...rest.style\n        }\n    });\n});\nfunction isButtonTarget(event) {\n    return (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isHTMLElement)(event.target) && event.target.tagName === \"BUTTON\";\n}\nfunction isAnchorTarget(event) {\n    return (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isHTMLElement)(event.target) && event.target.tagName === \"A\";\n}\nfunction isSpaceIgnored(element) {\n    return (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isTypeableElement)(element);\n}\n/**\n * Opens or closes the floating element when clicking the reference element.\n * @see https://floating-ui.com/docs/useClick\n */ function useClick(context, props) {\n    if (props === void 0) {\n        props = {};\n    }\n    const { open, onOpenChange, dataRef, elements: { domReference } } = context;\n    const { enabled = true, event: eventOption = \"click\", toggle = true, ignoreMouse = false, keyboardHandlers = true, stickIfOpen = true } = props;\n    const pointerTypeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n    const didKeyDownRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const reference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            onPointerDown (event) {\n                pointerTypeRef.current = event.pointerType;\n            },\n            onMouseDown (event) {\n                const pointerType = pointerTypeRef.current;\n                // Ignore all buttons except for the \"main\" button.\n                // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n                if (event.button !== 0) return;\n                if (eventOption === \"click\") return;\n                if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isMouseLikePointerType)(pointerType, true) && ignoreMouse) return;\n                if (open && toggle && (dataRef.current.openEvent && stickIfOpen ? dataRef.current.openEvent.type === \"mousedown\" : true)) {\n                    onOpenChange(false, event.nativeEvent, \"click\");\n                } else {\n                    // Prevent stealing focus from the floating element\n                    event.preventDefault();\n                    onOpenChange(true, event.nativeEvent, \"click\");\n                }\n            },\n            onClick (event) {\n                const pointerType = pointerTypeRef.current;\n                if (eventOption === \"mousedown\" && pointerTypeRef.current) {\n                    pointerTypeRef.current = undefined;\n                    return;\n                }\n                if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isMouseLikePointerType)(pointerType, true) && ignoreMouse) return;\n                if (open && toggle && (dataRef.current.openEvent && stickIfOpen ? dataRef.current.openEvent.type === \"click\" : true)) {\n                    onOpenChange(false, event.nativeEvent, \"click\");\n                } else {\n                    onOpenChange(true, event.nativeEvent, \"click\");\n                }\n            },\n            onKeyDown (event) {\n                pointerTypeRef.current = undefined;\n                if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event)) {\n                    return;\n                }\n                if (event.key === \" \" && !isSpaceIgnored(domReference)) {\n                    // Prevent scrolling\n                    event.preventDefault();\n                    didKeyDownRef.current = true;\n                }\n                if (isAnchorTarget(event)) {\n                    return;\n                }\n                if (event.key === \"Enter\") {\n                    if (open && toggle) {\n                        onOpenChange(false, event.nativeEvent, \"click\");\n                    } else {\n                        onOpenChange(true, event.nativeEvent, \"click\");\n                    }\n                }\n            },\n            onKeyUp (event) {\n                if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event) || isSpaceIgnored(domReference)) {\n                    return;\n                }\n                if (event.key === \" \" && didKeyDownRef.current) {\n                    didKeyDownRef.current = false;\n                    if (open && toggle) {\n                        onOpenChange(false, event.nativeEvent, \"click\");\n                    } else {\n                        onOpenChange(true, event.nativeEvent, \"click\");\n                    }\n                }\n            }\n        }), [\n        dataRef,\n        domReference,\n        eventOption,\n        ignoreMouse,\n        keyboardHandlers,\n        onOpenChange,\n        open,\n        stickIfOpen,\n        toggle\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>enabled ? {\n            reference\n        } : {}, [\n        enabled,\n        reference\n    ]);\n}\nfunction createVirtualElement(domElement, data) {\n    let offsetX = null;\n    let offsetY = null;\n    let isAutoUpdateEvent = false;\n    return {\n        contextElement: domElement || undefined,\n        getBoundingClientRect () {\n            var _data$dataRef$current;\n            const domRect = (domElement == null ? void 0 : domElement.getBoundingClientRect()) || {\n                width: 0,\n                height: 0,\n                x: 0,\n                y: 0\n            };\n            const isXAxis = data.axis === \"x\" || data.axis === \"both\";\n            const isYAxis = data.axis === \"y\" || data.axis === \"both\";\n            const canTrackCursorOnAutoUpdate = [\n                \"mouseenter\",\n                \"mousemove\"\n            ].includes(((_data$dataRef$current = data.dataRef.current.openEvent) == null ? void 0 : _data$dataRef$current.type) || \"\") && data.pointerType !== \"touch\";\n            let width = domRect.width;\n            let height = domRect.height;\n            let x = domRect.x;\n            let y = domRect.y;\n            if (offsetX == null && data.x && isXAxis) {\n                offsetX = domRect.x - data.x;\n            }\n            if (offsetY == null && data.y && isYAxis) {\n                offsetY = domRect.y - data.y;\n            }\n            x -= offsetX || 0;\n            y -= offsetY || 0;\n            width = 0;\n            height = 0;\n            if (!isAutoUpdateEvent || canTrackCursorOnAutoUpdate) {\n                width = data.axis === \"y\" ? domRect.width : 0;\n                height = data.axis === \"x\" ? domRect.height : 0;\n                x = isXAxis && data.x != null ? data.x : x;\n                y = isYAxis && data.y != null ? data.y : y;\n            } else if (isAutoUpdateEvent && !canTrackCursorOnAutoUpdate) {\n                height = data.axis === \"x\" ? domRect.height : height;\n                width = data.axis === \"y\" ? domRect.width : width;\n            }\n            isAutoUpdateEvent = true;\n            return {\n                width,\n                height,\n                x,\n                y,\n                top: y,\n                right: x + width,\n                bottom: y + height,\n                left: x\n            };\n        }\n    };\n}\nfunction isMouseBasedEvent(event) {\n    return event != null && event.clientX != null;\n}\n/**\n * Positions the floating element relative to a client point (in the viewport),\n * such as the mouse position. By default, it follows the mouse cursor.\n * @see https://floating-ui.com/docs/useClientPoint\n */ function useClientPoint(context, props) {\n    if (props === void 0) {\n        props = {};\n    }\n    const { open, dataRef, elements: { floating, domReference }, refs } = context;\n    const { enabled = true, axis = \"both\", x = null, y = null } = props;\n    const initialRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const cleanupListenerRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const [pointerType, setPointerType] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n    const [reactive, setReactive] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n    const setReference = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)((x, y)=>{\n        if (initialRef.current) return;\n        // Prevent setting if the open event was not a mouse-like one\n        // (e.g. focus to open, then hover over the reference element).\n        // Only apply if the event exists.\n        if (dataRef.current.openEvent && !isMouseBasedEvent(dataRef.current.openEvent)) {\n            return;\n        }\n        refs.setPositionReference(createVirtualElement(domReference, {\n            x,\n            y,\n            axis,\n            dataRef,\n            pointerType\n        }));\n    });\n    const handleReferenceEnterOrMove = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)((event)=>{\n        if (x != null || y != null) return;\n        if (!open) {\n            setReference(event.clientX, event.clientY);\n        } else if (!cleanupListenerRef.current) {\n            // If there's no cleanup, there's no listener, but we want to ensure\n            // we add the listener if the cursor landed on the floating element and\n            // then back on the reference (i.e. it's interactive).\n            setReactive([]);\n        }\n    });\n    // If the pointer is a mouse-like pointer, we want to continue following the\n    // mouse even if the floating element is transitioning out. On touch\n    // devices, this is undesirable because the floating element will move to\n    // the dismissal touch point.\n    const openCheck = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isMouseLikePointerType)(pointerType) ? floating : open;\n    const addListener = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        // Explicitly specified `x`/`y` coordinates shouldn't add a listener.\n        if (!openCheck || !enabled || x != null || y != null) return;\n        const win = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.getWindow)(floating);\n        function handleMouseMove(event) {\n            const target = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getTarget)(event);\n            if (!(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.contains)(floating, target)) {\n                setReference(event.clientX, event.clientY);\n            } else {\n                win.removeEventListener(\"mousemove\", handleMouseMove);\n                cleanupListenerRef.current = null;\n            }\n        }\n        if (!dataRef.current.openEvent || isMouseBasedEvent(dataRef.current.openEvent)) {\n            win.addEventListener(\"mousemove\", handleMouseMove);\n            const cleanup = ()=>{\n                win.removeEventListener(\"mousemove\", handleMouseMove);\n                cleanupListenerRef.current = null;\n            };\n            cleanupListenerRef.current = cleanup;\n            return cleanup;\n        }\n        refs.setPositionReference(domReference);\n    }, [\n        openCheck,\n        enabled,\n        x,\n        y,\n        floating,\n        dataRef,\n        refs,\n        domReference,\n        setReference\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        return addListener();\n    }, [\n        addListener,\n        reactive\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (enabled && !floating) {\n            initialRef.current = false;\n        }\n    }, [\n        enabled,\n        floating\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!enabled && open) {\n            initialRef.current = true;\n        }\n    }, [\n        enabled,\n        open\n    ]);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (enabled && (x != null || y != null)) {\n            initialRef.current = false;\n            setReference(x, y);\n        }\n    }, [\n        enabled,\n        x,\n        y,\n        setReference\n    ]);\n    const reference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        function setPointerTypeRef(_ref) {\n            let { pointerType } = _ref;\n            setPointerType(pointerType);\n        }\n        return {\n            onPointerDown: setPointerTypeRef,\n            onPointerEnter: setPointerTypeRef,\n            onMouseMove: handleReferenceEnterOrMove,\n            onMouseEnter: handleReferenceEnterOrMove\n        };\n    }, [\n        handleReferenceEnterOrMove\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>enabled ? {\n            reference\n        } : {}, [\n        enabled,\n        reference\n    ]);\n}\nconst bubbleHandlerKeys = {\n    pointerdown: \"onPointerDown\",\n    mousedown: \"onMouseDown\",\n    click: \"onClick\"\n};\nconst captureHandlerKeys = {\n    pointerdown: \"onPointerDownCapture\",\n    mousedown: \"onMouseDownCapture\",\n    click: \"onClickCapture\"\n};\nconst normalizeProp = (normalizable)=>{\n    var _normalizable$escapeK, _normalizable$outside;\n    return {\n        escapeKey: typeof normalizable === \"boolean\" ? normalizable : (_normalizable$escapeK = normalizable == null ? void 0 : normalizable.escapeKey) != null ? _normalizable$escapeK : false,\n        outsidePress: typeof normalizable === \"boolean\" ? normalizable : (_normalizable$outside = normalizable == null ? void 0 : normalizable.outsidePress) != null ? _normalizable$outside : true\n    };\n};\n/**\n * Closes the floating element when a dismissal is requested — by default, when\n * the user presses the `escape` key or outside of the floating element.\n * @see https://floating-ui.com/docs/useDismiss\n */ function useDismiss(context, props) {\n    if (props === void 0) {\n        props = {};\n    }\n    const { open, onOpenChange, elements, dataRef } = context;\n    const { enabled = true, escapeKey = true, outsidePress: unstable_outsidePress = true, outsidePressEvent = \"pointerdown\", referencePress = false, referencePressEvent = \"pointerdown\", ancestorScroll = false, bubbles, capture } = props;\n    const tree = useFloatingTree();\n    const outsidePressFn = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)(typeof unstable_outsidePress === \"function\" ? unstable_outsidePress : ()=>false);\n    const outsidePress = typeof unstable_outsidePress === \"function\" ? outsidePressFn : unstable_outsidePress;\n    const endedOrStartedInsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const { escapeKey: escapeKeyBubbles, outsidePress: outsidePressBubbles } = normalizeProp(bubbles);\n    const { escapeKey: escapeKeyCapture, outsidePress: outsidePressCapture } = normalizeProp(capture);\n    const isComposingRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const blurTimeoutRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(-1);\n    const closeOnEscapeKeyDown = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)((event)=>{\n        var _dataRef$current$floa;\n        if (!open || !enabled || !escapeKey || event.key !== \"Escape\") {\n            return;\n        }\n        // Wait until IME is settled. Pressing `Escape` while composing should\n        // close the compose menu, but not the floating element.\n        if (isComposingRef.current) {\n            return;\n        }\n        const nodeId = (_dataRef$current$floa = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa.nodeId;\n        const children = tree ? (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getNodeChildren)(tree.nodesRef.current, nodeId) : [];\n        if (!escapeKeyBubbles) {\n            event.stopPropagation();\n            if (children.length > 0) {\n                let shouldDismiss = true;\n                children.forEach((child)=>{\n                    var _child$context;\n                    if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {\n                        shouldDismiss = false;\n                        return;\n                    }\n                });\n                if (!shouldDismiss) {\n                    return;\n                }\n            }\n        }\n        onOpenChange(false, (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isReactEvent)(event) ? event.nativeEvent : event, \"escape-key\");\n    });\n    const closeOnEscapeKeyDownCapture = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)((event)=>{\n        var _getTarget2;\n        const callback = ()=>{\n            var _getTarget;\n            closeOnEscapeKeyDown(event);\n            (_getTarget = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getTarget)(event)) == null || _getTarget.removeEventListener(\"keydown\", callback);\n        };\n        (_getTarget2 = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getTarget)(event)) == null || _getTarget2.addEventListener(\"keydown\", callback);\n    });\n    const closeOnPressOutside = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)((event)=>{\n        var _dataRef$current$floa2;\n        // Given developers can stop the propagation of the synthetic event,\n        // we can only be confident with a positive value.\n        const insideReactTree = dataRef.current.insideReactTree;\n        dataRef.current.insideReactTree = false;\n        // When click outside is lazy (`click` event), handle dragging.\n        // Don't close if:\n        // - The click started inside the floating element.\n        // - The click ended inside the floating element.\n        const endedOrStartedInside = endedOrStartedInsideRef.current;\n        endedOrStartedInsideRef.current = false;\n        if (outsidePressEvent === \"click\" && endedOrStartedInside) {\n            return;\n        }\n        if (insideReactTree) {\n            return;\n        }\n        if (typeof outsidePress === \"function\" && !outsidePress(event)) {\n            return;\n        }\n        const target = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getTarget)(event);\n        const inertSelector = \"[\" + createAttribute(\"inert\") + \"]\";\n        const markers = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getDocument)(elements.floating).querySelectorAll(inertSelector);\n        let targetRootAncestor = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isElement)(target) ? target : null;\n        while(targetRootAncestor && !(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isLastTraversableNode)(targetRootAncestor)){\n            const nextParent = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.getParentNode)(targetRootAncestor);\n            if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isLastTraversableNode)(nextParent) || !(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isElement)(nextParent)) {\n                break;\n            }\n            targetRootAncestor = nextParent;\n        }\n        // Check if the click occurred on a third-party element injected after the\n        // floating element rendered.\n        if (markers.length && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isElement)(target) && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isRootElement)(target) && // Clicked on a direct ancestor (e.g. FloatingOverlay).\n        !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.contains)(target, elements.floating) && // If the target root element contains none of the markers, then the\n        // element was injected after the floating element rendered.\n        Array.from(markers).every((marker)=>!(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.contains)(targetRootAncestor, marker))) {\n            return;\n        }\n        // Check if the click occurred on the scrollbar\n        if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isHTMLElement)(target) && floating) {\n            const lastTraversableNode = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isLastTraversableNode)(target);\n            const style = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.getComputedStyle)(target);\n            const scrollRe = /auto|scroll/;\n            const isScrollableX = lastTraversableNode || scrollRe.test(style.overflowX);\n            const isScrollableY = lastTraversableNode || scrollRe.test(style.overflowY);\n            const canScrollX = isScrollableX && target.clientWidth > 0 && target.scrollWidth > target.clientWidth;\n            const canScrollY = isScrollableY && target.clientHeight > 0 && target.scrollHeight > target.clientHeight;\n            const isRTL = style.direction === \"rtl\";\n            // Check click position relative to scrollbar.\n            // In some browsers it is possible to change the <body> (or window)\n            // scrollbar to the left side, but is very rare and is difficult to\n            // check for. Plus, for modal dialogs with backdrops, it is more\n            // important that the backdrop is checked but not so much the window.\n            const pressedVerticalScrollbar = canScrollY && (isRTL ? event.offsetX <= target.offsetWidth - target.clientWidth : event.offsetX > target.clientWidth);\n            const pressedHorizontalScrollbar = canScrollX && event.offsetY > target.clientHeight;\n            if (pressedVerticalScrollbar || pressedHorizontalScrollbar) {\n                return;\n            }\n        }\n        const nodeId = (_dataRef$current$floa2 = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa2.nodeId;\n        const targetIsInsideChildren = tree && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getNodeChildren)(tree.nodesRef.current, nodeId).some((node)=>{\n            var _node$context;\n            return (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isEventTargetWithin)(event, (_node$context = node.context) == null ? void 0 : _node$context.elements.floating);\n        });\n        if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isEventTargetWithin)(event, elements.floating) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isEventTargetWithin)(event, elements.domReference) || targetIsInsideChildren) {\n            return;\n        }\n        const children = tree ? (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getNodeChildren)(tree.nodesRef.current, nodeId) : [];\n        if (children.length > 0) {\n            let shouldDismiss = true;\n            children.forEach((child)=>{\n                var _child$context2;\n                if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {\n                    shouldDismiss = false;\n                    return;\n                }\n            });\n            if (!shouldDismiss) {\n                return;\n            }\n        }\n        onOpenChange(false, event, \"outside-press\");\n    });\n    const closeOnPressOutsideCapture = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)((event)=>{\n        var _getTarget4;\n        const callback = ()=>{\n            var _getTarget3;\n            closeOnPressOutside(event);\n            (_getTarget3 = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getTarget)(event)) == null || _getTarget3.removeEventListener(outsidePressEvent, callback);\n        };\n        (_getTarget4 = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getTarget)(event)) == null || _getTarget4.addEventListener(outsidePressEvent, callback);\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!open || !enabled) {\n            return;\n        }\n        dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;\n        dataRef.current.__outsidePressBubbles = outsidePressBubbles;\n        let compositionTimeout = -1;\n        function onScroll(event) {\n            onOpenChange(false, event, \"ancestor-scroll\");\n        }\n        function handleCompositionStart() {\n            window.clearTimeout(compositionTimeout);\n            isComposingRef.current = true;\n        }\n        function handleCompositionEnd() {\n            // Safari fires `compositionend` before `keydown`, so we need to wait\n            // until the next tick to set `isComposing` to `false`.\n            // https://bugs.webkit.org/show_bug.cgi?id=165004\n            compositionTimeout = window.setTimeout(()=>{\n                isComposingRef.current = false;\n            }, // 0ms or 1ms don't work in Safari. 5ms appears to consistently work.\n            // Only apply to WebKit for the test to remain 0ms.\n            (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isWebKit)() ? 5 : 0);\n        }\n        const doc = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getDocument)(elements.floating);\n        if (escapeKey) {\n            doc.addEventListener(\"keydown\", escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);\n            doc.addEventListener(\"compositionstart\", handleCompositionStart);\n            doc.addEventListener(\"compositionend\", handleCompositionEnd);\n        }\n        outsidePress && doc.addEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);\n        let ancestors = [];\n        if (ancestorScroll) {\n            if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isElement)(elements.domReference)) {\n                ancestors = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.getOverflowAncestors)(elements.domReference);\n            }\n            if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isElement)(elements.floating)) {\n                ancestors = ancestors.concat((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.getOverflowAncestors)(elements.floating));\n            }\n            if (!(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isElement)(elements.reference) && elements.reference && elements.reference.contextElement) {\n                ancestors = ancestors.concat((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.getOverflowAncestors)(elements.reference.contextElement));\n            }\n        }\n        // Ignore the visual viewport for scrolling dismissal (allow pinch-zoom)\n        ancestors = ancestors.filter((ancestor)=>{\n            var _doc$defaultView;\n            return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);\n        });\n        ancestors.forEach((ancestor)=>{\n            ancestor.addEventListener(\"scroll\", onScroll, {\n                passive: true\n            });\n        });\n        return ()=>{\n            if (escapeKey) {\n                doc.removeEventListener(\"keydown\", escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);\n                doc.removeEventListener(\"compositionstart\", handleCompositionStart);\n                doc.removeEventListener(\"compositionend\", handleCompositionEnd);\n            }\n            outsidePress && doc.removeEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);\n            ancestors.forEach((ancestor)=>{\n                ancestor.removeEventListener(\"scroll\", onScroll);\n            });\n            window.clearTimeout(compositionTimeout);\n        };\n    }, [\n        dataRef,\n        elements,\n        escapeKey,\n        outsidePress,\n        outsidePressEvent,\n        open,\n        onOpenChange,\n        ancestorScroll,\n        enabled,\n        escapeKeyBubbles,\n        outsidePressBubbles,\n        closeOnEscapeKeyDown,\n        escapeKeyCapture,\n        closeOnEscapeKeyDownCapture,\n        closeOnPressOutside,\n        outsidePressCapture,\n        closeOnPressOutsideCapture\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        dataRef.current.insideReactTree = false;\n    }, [\n        dataRef,\n        outsidePress,\n        outsidePressEvent\n    ]);\n    const reference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            onKeyDown: closeOnEscapeKeyDown,\n            ...referencePress && {\n                [bubbleHandlerKeys[referencePressEvent]]: (event)=>{\n                    onOpenChange(false, event.nativeEvent, \"reference-press\");\n                },\n                ...referencePressEvent !== \"click\" && {\n                    onClick (event) {\n                        onOpenChange(false, event.nativeEvent, \"reference-press\");\n                    }\n                }\n            }\n        }), [\n        closeOnEscapeKeyDown,\n        onOpenChange,\n        referencePress,\n        referencePressEvent\n    ]);\n    const floating = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            onKeyDown: closeOnEscapeKeyDown,\n            onMouseDown () {\n                endedOrStartedInsideRef.current = true;\n            },\n            onMouseUp () {\n                endedOrStartedInsideRef.current = true;\n            },\n            [captureHandlerKeys[outsidePressEvent]]: ()=>{\n                dataRef.current.insideReactTree = true;\n            },\n            onBlurCapture () {\n                if (tree) return;\n                clearTimeoutIfSet(blurTimeoutRef);\n                dataRef.current.insideReactTree = true;\n                blurTimeoutRef.current = window.setTimeout(()=>{\n                    dataRef.current.insideReactTree = false;\n                });\n            }\n        }), [\n        closeOnEscapeKeyDown,\n        outsidePressEvent,\n        dataRef,\n        tree\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>enabled ? {\n            reference,\n            floating\n        } : {}, [\n        enabled,\n        reference,\n        floating\n    ]);\n}\nfunction useFloatingRootContext(options) {\n    const { open = false, onOpenChange: onOpenChangeProp, elements: elementsProp } = options;\n    const floatingId = useId();\n    const dataRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef({});\n    const [events] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>createEventEmitter());\n    const nested = useFloatingParentNodeId() != null;\n    if (true) {\n        const optionDomReference = elementsProp.reference;\n        if (optionDomReference && !(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isElement)(optionDomReference)) {\n            error(\"Cannot pass a virtual element to the `elements.reference` option,\", \"as it must be a real DOM element. Use `refs.setPositionReference()`\", \"instead.\");\n        }\n    }\n    const [positionReference, setPositionReference] = react__WEBPACK_IMPORTED_MODULE_0__.useState(elementsProp.reference);\n    const onOpenChange = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)((open, event, reason)=>{\n        dataRef.current.openEvent = open ? event : undefined;\n        events.emit(\"openchange\", {\n            open,\n            event,\n            reason,\n            nested\n        });\n        onOpenChangeProp == null || onOpenChangeProp(open, event, reason);\n    });\n    const refs = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            setPositionReference\n        }), []);\n    const elements = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            reference: positionReference || elementsProp.reference || null,\n            floating: elementsProp.floating || null,\n            domReference: elementsProp.reference\n        }), [\n        positionReference,\n        elementsProp.reference,\n        elementsProp.floating\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            dataRef,\n            open,\n            onOpenChange,\n            elements,\n            events,\n            floatingId,\n            refs\n        }), [\n        open,\n        onOpenChange,\n        elements,\n        events,\n        floatingId,\n        refs\n    ]);\n}\n/**\n * Provides data to position a floating element and context to add interactions.\n * @see https://floating-ui.com/docs/useFloating\n */ function useFloating(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    const { nodeId } = options;\n    const internalRootContext = useFloatingRootContext({\n        ...options,\n        elements: {\n            reference: null,\n            floating: null,\n            ...options.elements\n        }\n    });\n    const rootContext = options.rootContext || internalRootContext;\n    const computedElements = rootContext.elements;\n    const [_domReference, setDomReference] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    const [positionReference, _setPositionReference] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    const optionDomReference = computedElements == null ? void 0 : computedElements.domReference;\n    const domReference = optionDomReference || _domReference;\n    const domReferenceRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const tree = useFloatingTree();\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (domReference) {\n            domReferenceRef.current = domReference;\n        }\n    }, [\n        domReference\n    ]);\n    const position = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.useFloating)({\n        ...options,\n        elements: {\n            ...computedElements,\n            ...positionReference && {\n                reference: positionReference\n            }\n        }\n    });\n    const setPositionReference = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((node)=>{\n        const computedPositionReference = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isElement)(node) ? {\n            getBoundingClientRect: ()=>node.getBoundingClientRect(),\n            getClientRects: ()=>node.getClientRects(),\n            contextElement: node\n        } : node;\n        // Store the positionReference in state if the DOM reference is specified externally via the\n        // `elements.reference` option. This ensures that it won't be overridden on future renders.\n        _setPositionReference(computedPositionReference);\n        position.refs.setReference(computedPositionReference);\n    }, [\n        position.refs\n    ]);\n    const setReference = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((node)=>{\n        if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isElement)(node) || node === null) {\n            domReferenceRef.current = node;\n            setDomReference(node);\n        }\n        // Backwards-compatibility for passing a virtual element to `reference`\n        // after it has set the DOM reference.\n        if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isElement)(position.refs.reference.current) || position.refs.reference.current === null || // Don't allow setting virtual elements using the old technique back to\n        // `null` to support `positionReference` + an unstable `reference`\n        // callback ref.\n        node !== null && !(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isElement)(node)) {\n            position.refs.setReference(node);\n        }\n    }, [\n        position.refs\n    ]);\n    const refs = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            ...position.refs,\n            setReference,\n            setPositionReference,\n            domReference: domReferenceRef\n        }), [\n        position.refs,\n        setReference,\n        setPositionReference\n    ]);\n    const elements = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            ...position.elements,\n            domReference: domReference\n        }), [\n        position.elements,\n        domReference\n    ]);\n    const context = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            ...position,\n            ...rootContext,\n            refs,\n            elements,\n            nodeId\n        }), [\n        position,\n        refs,\n        elements,\n        nodeId,\n        rootContext\n    ]);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        rootContext.dataRef.current.floatingContext = context;\n        const node = tree == null ? void 0 : tree.nodesRef.current.find((node)=>node.id === nodeId);\n        if (node) {\n            node.context = context;\n        }\n    });\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            ...position,\n            context,\n            refs,\n            elements\n        }), [\n        position,\n        refs,\n        elements,\n        context\n    ]);\n}\nfunction isMacSafari() {\n    return (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isMac)() && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isSafari)();\n}\n/**\n * Opens the floating element while the reference element has focus, like CSS\n * `:focus`.\n * @see https://floating-ui.com/docs/useFocus\n */ function useFocus(context, props) {\n    if (props === void 0) {\n        props = {};\n    }\n    const { open, onOpenChange, events, dataRef, elements } = context;\n    const { enabled = true, visibleOnly = true } = props;\n    const blockFocusRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const timeoutRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(-1);\n    const keyboardModalityRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(true);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!enabled) return;\n        const win = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.getWindow)(elements.domReference);\n        // If the reference was focused and the user left the tab/window, and the\n        // floating element was not open, the focus should be blocked when they\n        // return to the tab/window.\n        function onBlur() {\n            if (!open && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isHTMLElement)(elements.domReference) && elements.domReference === (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.activeElement)((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getDocument)(elements.domReference))) {\n                blockFocusRef.current = true;\n            }\n        }\n        function onKeyDown() {\n            keyboardModalityRef.current = true;\n        }\n        function onPointerDown() {\n            keyboardModalityRef.current = false;\n        }\n        win.addEventListener(\"blur\", onBlur);\n        if (isMacSafari()) {\n            win.addEventListener(\"keydown\", onKeyDown, true);\n            win.addEventListener(\"pointerdown\", onPointerDown, true);\n        }\n        return ()=>{\n            win.removeEventListener(\"blur\", onBlur);\n            if (isMacSafari()) {\n                win.removeEventListener(\"keydown\", onKeyDown, true);\n                win.removeEventListener(\"pointerdown\", onPointerDown, true);\n            }\n        };\n    }, [\n        elements.domReference,\n        open,\n        enabled\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!enabled) return;\n        function onOpenChange(_ref) {\n            let { reason } = _ref;\n            if (reason === \"reference-press\" || reason === \"escape-key\") {\n                blockFocusRef.current = true;\n            }\n        }\n        events.on(\"openchange\", onOpenChange);\n        return ()=>{\n            events.off(\"openchange\", onOpenChange);\n        };\n    }, [\n        events,\n        enabled\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        return ()=>{\n            clearTimeoutIfSet(timeoutRef);\n        };\n    }, []);\n    const reference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            onMouseLeave () {\n                blockFocusRef.current = false;\n            },\n            onFocus (event) {\n                if (blockFocusRef.current) return;\n                const target = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getTarget)(event.nativeEvent);\n                if (visibleOnly && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isElement)(target)) {\n                    // Safari fails to match `:focus-visible` if focus was initially\n                    // outside the document.\n                    if (isMacSafari() && !event.relatedTarget) {\n                        if (!keyboardModalityRef.current && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isTypeableElement)(target)) {\n                            return;\n                        }\n                    } else if (!(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.matchesFocusVisible)(target)) {\n                        return;\n                    }\n                }\n                onOpenChange(true, event.nativeEvent, \"focus\");\n            },\n            onBlur (event) {\n                blockFocusRef.current = false;\n                const relatedTarget = event.relatedTarget;\n                const nativeEvent = event.nativeEvent;\n                // Hit the non-modal focus management portal guard. Focus will be\n                // moved into the floating element immediately after.\n                const movedToFocusGuard = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isElement)(relatedTarget) && relatedTarget.hasAttribute(createAttribute(\"focus-guard\")) && relatedTarget.getAttribute(\"data-type\") === \"outside\";\n                // Wait for the window blur listener to fire.\n                timeoutRef.current = window.setTimeout(()=>{\n                    var _dataRef$current$floa;\n                    const activeEl = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.activeElement)(elements.domReference ? elements.domReference.ownerDocument : document);\n                    // Focus left the page, keep it open.\n                    if (!relatedTarget && activeEl === elements.domReference) return;\n                    // When focusing the reference element (e.g. regular click), then\n                    // clicking into the floating element, prevent it from hiding.\n                    // Note: it must be focusable, e.g. `tabindex=\"-1\"`.\n                    // We can not rely on relatedTarget to point to the correct element\n                    // as it will only point to the shadow host of the newly focused element\n                    // and not the element that actually has received focus if it is located\n                    // inside a shadow root.\n                    if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.contains)((_dataRef$current$floa = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa.refs.floating.current, activeEl) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.contains)(elements.domReference, activeEl) || movedToFocusGuard) {\n                        return;\n                    }\n                    onOpenChange(false, nativeEvent, \"focus\");\n                });\n            }\n        }), [\n        dataRef,\n        elements.domReference,\n        onOpenChange,\n        visibleOnly\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>enabled ? {\n            reference\n        } : {}, [\n        enabled,\n        reference\n    ]);\n}\nfunction mergeProps(userProps, propsList, elementKey) {\n    const map = new Map();\n    const isItem = elementKey === \"item\";\n    let domUserProps = userProps;\n    if (isItem && userProps) {\n        const { [ACTIVE_KEY]: _, [SELECTED_KEY]: __, ...validProps } = userProps;\n        domUserProps = validProps;\n    }\n    return {\n        ...elementKey === \"floating\" && {\n            tabIndex: -1,\n            [FOCUSABLE_ATTRIBUTE]: \"\"\n        },\n        ...domUserProps,\n        ...propsList.map((value)=>{\n            const propsOrGetProps = value ? value[elementKey] : null;\n            if (typeof propsOrGetProps === \"function\") {\n                return userProps ? propsOrGetProps(userProps) : null;\n            }\n            return propsOrGetProps;\n        }).concat(userProps).reduce((acc, props)=>{\n            if (!props) {\n                return acc;\n            }\n            Object.entries(props).forEach((_ref)=>{\n                let [key, value] = _ref;\n                if (isItem && [\n                    ACTIVE_KEY,\n                    SELECTED_KEY\n                ].includes(key)) {\n                    return;\n                }\n                if (key.indexOf(\"on\") === 0) {\n                    if (!map.has(key)) {\n                        map.set(key, []);\n                    }\n                    if (typeof value === \"function\") {\n                        var _map$get;\n                        (_map$get = map.get(key)) == null || _map$get.push(value);\n                        acc[key] = function() {\n                            var _map$get2;\n                            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                                args[_key] = arguments[_key];\n                            }\n                            return (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.map((fn)=>fn(...args)).find((val)=>val !== undefined);\n                        };\n                    }\n                } else {\n                    acc[key] = value;\n                }\n            });\n            return acc;\n        }, {})\n    };\n}\n/**\n * Merges an array of interaction hooks' props into prop getters, allowing\n * event handler functions to be composed together without overwriting one\n * another.\n * @see https://floating-ui.com/docs/useInteractions\n */ function useInteractions(propsList) {\n    if (propsList === void 0) {\n        propsList = [];\n    }\n    const referenceDeps = propsList.map((key)=>key == null ? void 0 : key.reference);\n    const floatingDeps = propsList.map((key)=>key == null ? void 0 : key.floating);\n    const itemDeps = propsList.map((key)=>key == null ? void 0 : key.item);\n    const getReferenceProps = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((userProps)=>mergeProps(userProps, propsList, \"reference\"), // eslint-disable-next-line react-hooks/exhaustive-deps\n    referenceDeps);\n    const getFloatingProps = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((userProps)=>mergeProps(userProps, propsList, \"floating\"), // eslint-disable-next-line react-hooks/exhaustive-deps\n    floatingDeps);\n    const getItemProps = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((userProps)=>mergeProps(userProps, propsList, \"item\"), // eslint-disable-next-line react-hooks/exhaustive-deps\n    itemDeps);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            getReferenceProps,\n            getFloatingProps,\n            getItemProps\n        }), [\n        getReferenceProps,\n        getFloatingProps,\n        getItemProps\n    ]);\n}\nconst ESCAPE = \"Escape\";\nfunction doSwitch(orientation, vertical, horizontal) {\n    switch(orientation){\n        case \"vertical\":\n            return vertical;\n        case \"horizontal\":\n            return horizontal;\n        default:\n            return vertical || horizontal;\n    }\n}\nfunction isMainOrientationKey(key, orientation) {\n    const vertical = key === ARROW_UP || key === ARROW_DOWN;\n    const horizontal = key === ARROW_LEFT || key === ARROW_RIGHT;\n    return doSwitch(orientation, vertical, horizontal);\n}\nfunction isMainOrientationToEndKey(key, orientation, rtl) {\n    const vertical = key === ARROW_DOWN;\n    const horizontal = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\n    return doSwitch(orientation, vertical, horizontal) || key === \"Enter\" || key === \" \" || key === \"\";\n}\nfunction isCrossOrientationOpenKey(key, orientation, rtl) {\n    const vertical = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\n    const horizontal = key === ARROW_DOWN;\n    return doSwitch(orientation, vertical, horizontal);\n}\nfunction isCrossOrientationCloseKey(key, orientation, rtl, cols) {\n    const vertical = rtl ? key === ARROW_RIGHT : key === ARROW_LEFT;\n    const horizontal = key === ARROW_UP;\n    if (orientation === \"both\" || orientation === \"horizontal\" && cols && cols > 1) {\n        return key === ESCAPE;\n    }\n    return doSwitch(orientation, vertical, horizontal);\n}\n/**\n * Adds arrow key-based navigation of a list of items, either using real DOM\n * focus or virtual focus.\n * @see https://floating-ui.com/docs/useListNavigation\n */ function useListNavigation(context, props) {\n    const { open, onOpenChange, elements, floatingId } = context;\n    const { listRef, activeIndex, onNavigate: unstable_onNavigate = ()=>{}, enabled = true, selectedIndex = null, allowEscape = false, loop = false, nested = false, rtl = false, virtual = false, focusItemOnOpen = \"auto\", focusItemOnHover = true, openOnArrowKeyDown = true, disabledIndices = undefined, orientation = \"vertical\", parentOrientation, cols = 1, scrollItemIntoView = true, virtualItemRef, itemSizes, dense = false } = props;\n    if (true) {\n        if (allowEscape) {\n            if (!loop) {\n                warn(\"`useListNavigation` looping must be enabled to allow escaping.\");\n            }\n            if (!virtual) {\n                warn(\"`useListNavigation` must be virtual to allow escaping.\");\n            }\n        }\n        if (orientation === \"vertical\" && cols > 1) {\n            warn(\"In grid list navigation mode (`cols` > 1), the `orientation` should\", 'be either \"horizontal\" or \"both\".');\n        }\n    }\n    const floatingFocusElement = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getFloatingFocusElement)(elements.floating);\n    const floatingFocusElementRef = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useLatestRef)(floatingFocusElement);\n    const parentId = useFloatingParentNodeId();\n    const tree = useFloatingTree();\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        context.dataRef.current.orientation = orientation;\n    }, [\n        context,\n        orientation\n    ]);\n    const onNavigate = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)(()=>{\n        unstable_onNavigate(indexRef.current === -1 ? null : indexRef.current);\n    });\n    const typeableComboboxReference = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isTypeableCombobox)(elements.domReference);\n    const focusItemOnOpenRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(focusItemOnOpen);\n    const indexRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(selectedIndex != null ? selectedIndex : -1);\n    const keyRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const isPointerModalityRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(true);\n    const previousOnNavigateRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(onNavigate);\n    const previousMountedRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(!!elements.floating);\n    const previousOpenRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(open);\n    const forceSyncFocusRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const forceScrollIntoViewRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const disabledIndicesRef = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useLatestRef)(disabledIndices);\n    const latestOpenRef = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useLatestRef)(open);\n    const scrollItemIntoViewRef = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useLatestRef)(scrollItemIntoView);\n    const selectedIndexRef = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useLatestRef)(selectedIndex);\n    const [activeId, setActiveId] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n    const [virtualId, setVirtualId] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n    const focusItem = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)(()=>{\n        function runFocus(item) {\n            if (virtual) {\n                var _item$id;\n                if ((_item$id = item.id) != null && _item$id.endsWith(\"-fui-option\")) {\n                    item.id = floatingId + \"-\" + Math.random().toString(16).slice(2, 10);\n                }\n                setActiveId(item.id);\n                tree == null || tree.events.emit(\"virtualfocus\", item);\n                if (virtualItemRef) {\n                    virtualItemRef.current = item;\n                }\n            } else {\n                enqueueFocus(item, {\n                    sync: forceSyncFocusRef.current,\n                    preventScroll: true\n                });\n            }\n        }\n        const initialItem = listRef.current[indexRef.current];\n        const forceScrollIntoView = forceScrollIntoViewRef.current;\n        if (initialItem) {\n            runFocus(initialItem);\n        }\n        const scheduler = forceSyncFocusRef.current ? (v)=>v() : requestAnimationFrame;\n        scheduler(()=>{\n            const waitedItem = listRef.current[indexRef.current] || initialItem;\n            if (!waitedItem) return;\n            if (!initialItem) {\n                runFocus(waitedItem);\n            }\n            const scrollIntoViewOptions = scrollItemIntoViewRef.current;\n            const shouldScrollIntoView = scrollIntoViewOptions && item && (forceScrollIntoView || !isPointerModalityRef.current);\n            if (shouldScrollIntoView) {\n                // JSDOM doesn't support `.scrollIntoView()` but it's widely supported\n                // by all browsers.\n                waitedItem.scrollIntoView == null || waitedItem.scrollIntoView(typeof scrollIntoViewOptions === \"boolean\" ? {\n                    block: \"nearest\",\n                    inline: \"nearest\"\n                } : scrollIntoViewOptions);\n            }\n        });\n    });\n    // Sync `selectedIndex` to be the `activeIndex` upon opening the floating\n    // element. Also, reset `activeIndex` upon closing the floating element.\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (!enabled) return;\n        if (open && elements.floating) {\n            if (focusItemOnOpenRef.current && selectedIndex != null) {\n                // Regardless of the pointer modality, we want to ensure the selected\n                // item comes into view when the floating element is opened.\n                forceScrollIntoViewRef.current = true;\n                indexRef.current = selectedIndex;\n                onNavigate();\n            }\n        } else if (previousMountedRef.current) {\n            // Since the user can specify `onNavigate` conditionally\n            // (onNavigate: open ? setActiveIndex : setSelectedIndex),\n            // we store and call the previous function.\n            indexRef.current = -1;\n            previousOnNavigateRef.current();\n        }\n    }, [\n        enabled,\n        open,\n        elements.floating,\n        selectedIndex,\n        onNavigate\n    ]);\n    // Sync `activeIndex` to be the focused item while the floating element is\n    // open.\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (!enabled) return;\n        if (!open) return;\n        if (!elements.floating) return;\n        if (activeIndex == null) {\n            forceSyncFocusRef.current = false;\n            if (selectedIndexRef.current != null) {\n                return;\n            }\n            // Reset while the floating element was open (e.g. the list changed).\n            if (previousMountedRef.current) {\n                indexRef.current = -1;\n                focusItem();\n            }\n            // Initial sync.\n            if ((!previousOpenRef.current || !previousMountedRef.current) && focusItemOnOpenRef.current && (keyRef.current != null || focusItemOnOpenRef.current === true && keyRef.current == null)) {\n                let runs = 0;\n                const waitForListPopulated = ()=>{\n                    if (listRef.current[0] == null) {\n                        // Avoid letting the browser paint if possible on the first try,\n                        // otherwise use rAF. Don't try more than twice, since something\n                        // is wrong otherwise.\n                        if (runs < 2) {\n                            const scheduler = runs ? requestAnimationFrame : queueMicrotask;\n                            scheduler(waitForListPopulated);\n                        }\n                        runs++;\n                    } else {\n                        indexRef.current = keyRef.current == null || isMainOrientationToEndKey(keyRef.current, orientation, rtl) || nested ? (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getMinListIndex)(listRef, disabledIndicesRef.current) : (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getMaxListIndex)(listRef, disabledIndicesRef.current);\n                        keyRef.current = null;\n                        onNavigate();\n                    }\n                };\n                waitForListPopulated();\n            }\n        } else if (!(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isIndexOutOfListBounds)(listRef, activeIndex)) {\n            indexRef.current = activeIndex;\n            focusItem();\n            forceScrollIntoViewRef.current = false;\n        }\n    }, [\n        enabled,\n        open,\n        elements.floating,\n        activeIndex,\n        selectedIndexRef,\n        nested,\n        listRef,\n        orientation,\n        rtl,\n        onNavigate,\n        focusItem,\n        disabledIndicesRef\n    ]);\n    // Ensure the parent floating element has focus when a nested child closes\n    // to allow arrow key navigation to work after the pointer leaves the child.\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        var _nodes$find;\n        if (!enabled || elements.floating || !tree || virtual || !previousMountedRef.current) {\n            return;\n        }\n        const nodes = tree.nodesRef.current;\n        const parent = (_nodes$find = nodes.find((node)=>node.id === parentId)) == null || (_nodes$find = _nodes$find.context) == null ? void 0 : _nodes$find.elements.floating;\n        const activeEl = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.activeElement)((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getDocument)(elements.floating));\n        const treeContainsActiveEl = nodes.some((node)=>node.context && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.contains)(node.context.elements.floating, activeEl));\n        if (parent && !treeContainsActiveEl && isPointerModalityRef.current) {\n            parent.focus({\n                preventScroll: true\n            });\n        }\n    }, [\n        enabled,\n        elements.floating,\n        tree,\n        parentId,\n        virtual\n    ]);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (!enabled) return;\n        if (!tree) return;\n        if (!virtual) return;\n        if (parentId) return;\n        function handleVirtualFocus(item) {\n            setVirtualId(item.id);\n            if (virtualItemRef) {\n                virtualItemRef.current = item;\n            }\n        }\n        tree.events.on(\"virtualfocus\", handleVirtualFocus);\n        return ()=>{\n            tree.events.off(\"virtualfocus\", handleVirtualFocus);\n        };\n    }, [\n        enabled,\n        tree,\n        virtual,\n        parentId,\n        virtualItemRef\n    ]);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        previousOnNavigateRef.current = onNavigate;\n        previousOpenRef.current = open;\n        previousMountedRef.current = !!elements.floating;\n    });\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (!open) {\n            keyRef.current = null;\n            focusItemOnOpenRef.current = focusItemOnOpen;\n        }\n    }, [\n        open,\n        focusItemOnOpen\n    ]);\n    const hasActiveIndex = activeIndex != null;\n    const item = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        function syncCurrentTarget(currentTarget) {\n            if (!latestOpenRef.current) return;\n            const index = listRef.current.indexOf(currentTarget);\n            if (index !== -1 && indexRef.current !== index) {\n                indexRef.current = index;\n                onNavigate();\n            }\n        }\n        const props = {\n            onFocus (_ref) {\n                let { currentTarget } = _ref;\n                forceSyncFocusRef.current = true;\n                syncCurrentTarget(currentTarget);\n            },\n            onClick: (_ref2)=>{\n                let { currentTarget } = _ref2;\n                return currentTarget.focus({\n                    preventScroll: true\n                });\n            },\n            // Safari\n            ...focusItemOnHover && {\n                onMouseMove (_ref3) {\n                    let { currentTarget } = _ref3;\n                    forceSyncFocusRef.current = true;\n                    forceScrollIntoViewRef.current = false;\n                    syncCurrentTarget(currentTarget);\n                },\n                onPointerLeave (_ref4) {\n                    let { pointerType } = _ref4;\n                    if (!isPointerModalityRef.current || pointerType === \"touch\") {\n                        return;\n                    }\n                    forceSyncFocusRef.current = true;\n                    indexRef.current = -1;\n                    onNavigate();\n                    if (!virtual) {\n                        var _floatingFocusElement;\n                        (_floatingFocusElement = floatingFocusElementRef.current) == null || _floatingFocusElement.focus({\n                            preventScroll: true\n                        });\n                    }\n                }\n            }\n        };\n        return props;\n    }, [\n        latestOpenRef,\n        floatingFocusElementRef,\n        focusItemOnHover,\n        listRef,\n        onNavigate,\n        virtual\n    ]);\n    const getParentOrientation = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        var _tree$nodesRef$curren;\n        return parentOrientation != null ? parentOrientation : tree == null || (_tree$nodesRef$curren = tree.nodesRef.current.find((node)=>node.id === parentId)) == null || (_tree$nodesRef$curren = _tree$nodesRef$curren.context) == null || (_tree$nodesRef$curren = _tree$nodesRef$curren.dataRef) == null ? void 0 : _tree$nodesRef$curren.current.orientation;\n    }, [\n        parentId,\n        tree,\n        parentOrientation\n    ]);\n    const commonOnKeyDown = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)((event)=>{\n        isPointerModalityRef.current = false;\n        forceSyncFocusRef.current = true;\n        // When composing a character, Chrome fires ArrowDown twice. Firefox/Safari\n        // don't appear to suffer from this. `event.isComposing` is avoided due to\n        // Safari not supporting it properly (although it's not needed in the first\n        // place for Safari, just avoiding any possible issues).\n        if (event.which === 229) {\n            return;\n        }\n        // If the floating element is animating out, ignore navigation. Otherwise,\n        // the `activeIndex` gets set to 0 despite not being open so the next time\n        // the user ArrowDowns, the first item won't be focused.\n        if (!latestOpenRef.current && event.currentTarget === floatingFocusElementRef.current) {\n            return;\n        }\n        if (nested && isCrossOrientationCloseKey(event.key, orientation, rtl, cols)) {\n            // If the nested list's close key is also the parent navigation key,\n            // let the parent navigate. Otherwise, stop propagating the event.\n            if (!isMainOrientationKey(event.key, getParentOrientation())) {\n                (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.stopEvent)(event);\n            }\n            onOpenChange(false, event.nativeEvent, \"list-navigation\");\n            if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isHTMLElement)(elements.domReference)) {\n                if (virtual) {\n                    tree == null || tree.events.emit(\"virtualfocus\", elements.domReference);\n                } else {\n                    elements.domReference.focus();\n                }\n            }\n            return;\n        }\n        const currentIndex = indexRef.current;\n        const minIndex = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getMinListIndex)(listRef, disabledIndices);\n        const maxIndex = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getMaxListIndex)(listRef, disabledIndices);\n        if (!typeableComboboxReference) {\n            if (event.key === \"Home\") {\n                (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.stopEvent)(event);\n                indexRef.current = minIndex;\n                onNavigate();\n            }\n            if (event.key === \"End\") {\n                (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.stopEvent)(event);\n                indexRef.current = maxIndex;\n                onNavigate();\n            }\n        }\n        // Grid navigation.\n        if (cols > 1) {\n            const sizes = itemSizes || Array.from({\n                length: listRef.current.length\n            }, ()=>({\n                    width: 1,\n                    height: 1\n                }));\n            // To calculate movements on the grid, we use hypothetical cell indices\n            // as if every item was 1x1, then convert back to real indices.\n            const cellMap = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.createGridCellMap)(sizes, cols, dense);\n            const minGridIndex = cellMap.findIndex((index)=>index != null && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isListIndexDisabled)(listRef, index, disabledIndices));\n            // last enabled index\n            const maxGridIndex = cellMap.reduce((foundIndex, index, cellIndex)=>index != null && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isListIndexDisabled)(listRef, index, disabledIndices) ? cellIndex : foundIndex, -1);\n            const index = cellMap[(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getGridNavigatedIndex)({\n                current: cellMap.map((itemIndex)=>itemIndex != null ? listRef.current[itemIndex] : null)\n            }, {\n                event,\n                orientation,\n                loop,\n                rtl,\n                cols,\n                // treat undefined (empty grid spaces) as disabled indices so we\n                // don't end up in them\n                disabledIndices: (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getGridCellIndices)([\n                    ...(typeof disabledIndices !== \"function\" ? disabledIndices : null) || listRef.current.map((_, index)=>(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isListIndexDisabled)(listRef, index, disabledIndices) ? index : undefined),\n                    undefined\n                ], cellMap),\n                minIndex: minGridIndex,\n                maxIndex: maxGridIndex,\n                prevIndex: (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getGridCellIndexOfCorner)(indexRef.current > maxIndex ? minIndex : indexRef.current, sizes, cellMap, cols, // use a corner matching the edge closest to the direction\n                // we're moving in so we don't end up in the same item. Prefer\n                // top/left over bottom/right.\n                event.key === ARROW_DOWN ? \"bl\" : event.key === (rtl ? ARROW_LEFT : ARROW_RIGHT) ? \"tr\" : \"tl\"),\n                stopEvent: true\n            })];\n            if (index != null) {\n                indexRef.current = index;\n                onNavigate();\n            }\n            if (orientation === \"both\") {\n                return;\n            }\n        }\n        if (isMainOrientationKey(event.key, orientation)) {\n            (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.stopEvent)(event);\n            // Reset the index if no item is focused.\n            if (open && !virtual && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.activeElement)(event.currentTarget.ownerDocument) === event.currentTarget) {\n                indexRef.current = isMainOrientationToEndKey(event.key, orientation, rtl) ? minIndex : maxIndex;\n                onNavigate();\n                return;\n            }\n            if (isMainOrientationToEndKey(event.key, orientation, rtl)) {\n                if (loop) {\n                    indexRef.current = currentIndex >= maxIndex ? allowEscape && currentIndex !== listRef.current.length ? -1 : minIndex : (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.findNonDisabledListIndex)(listRef, {\n                        startingIndex: currentIndex,\n                        disabledIndices\n                    });\n                } else {\n                    indexRef.current = Math.min(maxIndex, (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.findNonDisabledListIndex)(listRef, {\n                        startingIndex: currentIndex,\n                        disabledIndices\n                    }));\n                }\n            } else {\n                if (loop) {\n                    indexRef.current = currentIndex <= minIndex ? allowEscape && currentIndex !== -1 ? listRef.current.length : maxIndex : (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.findNonDisabledListIndex)(listRef, {\n                        startingIndex: currentIndex,\n                        decrement: true,\n                        disabledIndices\n                    });\n                } else {\n                    indexRef.current = Math.max(minIndex, (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.findNonDisabledListIndex)(listRef, {\n                        startingIndex: currentIndex,\n                        decrement: true,\n                        disabledIndices\n                    }));\n                }\n            }\n            if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isIndexOutOfListBounds)(listRef, indexRef.current)) {\n                indexRef.current = -1;\n            }\n            onNavigate();\n        }\n    });\n    const ariaActiveDescendantProp = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return virtual && open && hasActiveIndex && {\n            \"aria-activedescendant\": virtualId || activeId\n        };\n    }, [\n        virtual,\n        open,\n        hasActiveIndex,\n        virtualId,\n        activeId\n    ]);\n    const floating = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return {\n            \"aria-orientation\": orientation === \"both\" ? undefined : orientation,\n            ...!typeableComboboxReference ? ariaActiveDescendantProp : {},\n            onKeyDown: commonOnKeyDown,\n            onPointerMove () {\n                isPointerModalityRef.current = true;\n            }\n        };\n    }, [\n        ariaActiveDescendantProp,\n        commonOnKeyDown,\n        orientation,\n        typeableComboboxReference\n    ]);\n    const reference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        function checkVirtualMouse(event) {\n            if (focusItemOnOpen === \"auto\" && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isVirtualClick)(event.nativeEvent)) {\n                focusItemOnOpenRef.current = true;\n            }\n        }\n        function checkVirtualPointer(event) {\n            // `pointerdown` fires first, reset the state then perform the checks.\n            focusItemOnOpenRef.current = focusItemOnOpen;\n            if (focusItemOnOpen === \"auto\" && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.isVirtualPointerEvent)(event.nativeEvent)) {\n                focusItemOnOpenRef.current = true;\n            }\n        }\n        return {\n            ...ariaActiveDescendantProp,\n            onKeyDown (event) {\n                isPointerModalityRef.current = false;\n                const isArrowKey = event.key.startsWith(\"Arrow\");\n                const isHomeOrEndKey = [\n                    \"Home\",\n                    \"End\"\n                ].includes(event.key);\n                const isMoveKey = isArrowKey || isHomeOrEndKey;\n                const isCrossOpenKey = isCrossOrientationOpenKey(event.key, orientation, rtl);\n                const isCrossCloseKey = isCrossOrientationCloseKey(event.key, orientation, rtl, cols);\n                const isParentCrossOpenKey = isCrossOrientationOpenKey(event.key, getParentOrientation(), rtl);\n                const isMainKey = isMainOrientationKey(event.key, orientation);\n                const isNavigationKey = (nested ? isParentCrossOpenKey : isMainKey) || event.key === \"Enter\" || event.key.trim() === \"\";\n                if (virtual && open) {\n                    const rootNode = tree == null ? void 0 : tree.nodesRef.current.find((node)=>node.parentId == null);\n                    const deepestNode = tree && rootNode ? (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getDeepestNode)(tree.nodesRef.current, rootNode.id) : null;\n                    if (isMoveKey && deepestNode && virtualItemRef) {\n                        const eventObject = new KeyboardEvent(\"keydown\", {\n                            key: event.key,\n                            bubbles: true\n                        });\n                        if (isCrossOpenKey || isCrossCloseKey) {\n                            var _deepestNode$context, _deepestNode$context2;\n                            const isCurrentTarget = ((_deepestNode$context = deepestNode.context) == null ? void 0 : _deepestNode$context.elements.domReference) === event.currentTarget;\n                            const dispatchItem = isCrossCloseKey && !isCurrentTarget ? (_deepestNode$context2 = deepestNode.context) == null ? void 0 : _deepestNode$context2.elements.domReference : isCrossOpenKey ? listRef.current.find((item)=>(item == null ? void 0 : item.id) === activeId) : null;\n                            if (dispatchItem) {\n                                (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.stopEvent)(event);\n                                dispatchItem.dispatchEvent(eventObject);\n                                setVirtualId(undefined);\n                            }\n                        }\n                        if ((isMainKey || isHomeOrEndKey) && deepestNode.context) {\n                            if (deepestNode.context.open && deepestNode.parentId && event.currentTarget !== deepestNode.context.elements.domReference) {\n                                var _deepestNode$context$;\n                                (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.stopEvent)(event);\n                                (_deepestNode$context$ = deepestNode.context.elements.domReference) == null || _deepestNode$context$.dispatchEvent(eventObject);\n                                return;\n                            }\n                        }\n                    }\n                    return commonOnKeyDown(event);\n                }\n                // If a floating element should not open on arrow key down, avoid\n                // setting `activeIndex` while it's closed.\n                if (!open && !openOnArrowKeyDown && isArrowKey) {\n                    return;\n                }\n                if (isNavigationKey) {\n                    const isParentMainKey = isMainOrientationKey(event.key, getParentOrientation());\n                    keyRef.current = nested && isParentMainKey ? null : event.key;\n                }\n                if (nested) {\n                    if (isParentCrossOpenKey) {\n                        (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.stopEvent)(event);\n                        if (open) {\n                            indexRef.current = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getMinListIndex)(listRef, disabledIndicesRef.current);\n                            onNavigate();\n                        } else {\n                            onOpenChange(true, event.nativeEvent, \"list-navigation\");\n                        }\n                    }\n                    return;\n                }\n                if (isMainKey) {\n                    if (selectedIndex != null) {\n                        indexRef.current = selectedIndex;\n                    }\n                    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.stopEvent)(event);\n                    if (!open && openOnArrowKeyDown) {\n                        onOpenChange(true, event.nativeEvent, \"list-navigation\");\n                    } else {\n                        commonOnKeyDown(event);\n                    }\n                    if (open) {\n                        onNavigate();\n                    }\n                }\n            },\n            onFocus () {\n                if (open && !virtual) {\n                    indexRef.current = -1;\n                    onNavigate();\n                }\n            },\n            onPointerDown: checkVirtualPointer,\n            onPointerEnter: checkVirtualPointer,\n            onMouseDown: checkVirtualMouse,\n            onClick: checkVirtualMouse\n        };\n    }, [\n        activeId,\n        ariaActiveDescendantProp,\n        cols,\n        commonOnKeyDown,\n        disabledIndicesRef,\n        focusItemOnOpen,\n        listRef,\n        nested,\n        onNavigate,\n        onOpenChange,\n        open,\n        openOnArrowKeyDown,\n        orientation,\n        getParentOrientation,\n        rtl,\n        selectedIndex,\n        tree,\n        virtual,\n        virtualItemRef\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>enabled ? {\n            reference,\n            floating,\n            item\n        } : {}, [\n        enabled,\n        reference,\n        floating,\n        item\n    ]);\n}\nconst componentRoleToAriaRoleMap = /*#__PURE__*/ new Map([\n    [\n        \"select\",\n        \"listbox\"\n    ],\n    [\n        \"combobox\",\n        \"listbox\"\n    ],\n    [\n        \"label\",\n        false\n    ]\n]);\n/**\n * Adds base screen reader props to the reference and floating elements for a\n * given floating element `role`.\n * @see https://floating-ui.com/docs/useRole\n */ function useRole(context, props) {\n    var _elements$domReferenc, _componentRoleToAriaR;\n    if (props === void 0) {\n        props = {};\n    }\n    const { open, elements, floatingId: defaultFloatingId } = context;\n    const { enabled = true, role = \"dialog\" } = props;\n    const defaultReferenceId = useId();\n    const referenceId = ((_elements$domReferenc = elements.domReference) == null ? void 0 : _elements$domReferenc.id) || defaultReferenceId;\n    const floatingId = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        var _getFloatingFocusElem;\n        return ((_getFloatingFocusElem = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getFloatingFocusElement)(elements.floating)) == null ? void 0 : _getFloatingFocusElem.id) || defaultFloatingId;\n    }, [\n        elements.floating,\n        defaultFloatingId\n    ]);\n    const ariaRole = (_componentRoleToAriaR = componentRoleToAriaRoleMap.get(role)) != null ? _componentRoleToAriaR : role;\n    const parentId = useFloatingParentNodeId();\n    const isNested = parentId != null;\n    const reference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (ariaRole === \"tooltip\" || role === \"label\") {\n            return {\n                [\"aria-\" + (role === \"label\" ? \"labelledby\" : \"describedby\")]: open ? floatingId : undefined\n            };\n        }\n        return {\n            \"aria-expanded\": open ? \"true\" : \"false\",\n            \"aria-haspopup\": ariaRole === \"alertdialog\" ? \"dialog\" : ariaRole,\n            \"aria-controls\": open ? floatingId : undefined,\n            ...ariaRole === \"listbox\" && {\n                role: \"combobox\"\n            },\n            ...ariaRole === \"menu\" && {\n                id: referenceId\n            },\n            ...ariaRole === \"menu\" && isNested && {\n                role: \"menuitem\"\n            },\n            ...role === \"select\" && {\n                \"aria-autocomplete\": \"none\"\n            },\n            ...role === \"combobox\" && {\n                \"aria-autocomplete\": \"list\"\n            }\n        };\n    }, [\n        ariaRole,\n        floatingId,\n        isNested,\n        open,\n        referenceId,\n        role\n    ]);\n    const floating = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const floatingProps = {\n            id: floatingId,\n            ...ariaRole && {\n                role: ariaRole\n            }\n        };\n        if (ariaRole === \"tooltip\" || role === \"label\") {\n            return floatingProps;\n        }\n        return {\n            ...floatingProps,\n            ...ariaRole === \"menu\" && {\n                \"aria-labelledby\": referenceId\n            }\n        };\n    }, [\n        ariaRole,\n        floatingId,\n        referenceId,\n        role\n    ]);\n    const item = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((_ref)=>{\n        let { active, selected } = _ref;\n        const commonProps = {\n            role: \"option\",\n            ...active && {\n                id: floatingId + \"-fui-option\"\n            }\n        };\n        // For `menu`, we are unable to tell if the item is a `menuitemradio`\n        // or `menuitemcheckbox`. For backwards-compatibility reasons, also\n        // avoid defaulting to `menuitem` as it may overwrite custom role props.\n        switch(role){\n            case \"select\":\n                return {\n                    ...commonProps,\n                    \"aria-selected\": active && selected\n                };\n            case \"combobox\":\n                {\n                    return {\n                        ...commonProps,\n                        \"aria-selected\": selected\n                    };\n                }\n        }\n        return {};\n    }, [\n        floatingId,\n        role\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>enabled ? {\n            reference,\n            floating,\n            item\n        } : {}, [\n        enabled,\n        reference,\n        floating,\n        item\n    ]);\n}\n// Converts a JS style key like `backgroundColor` to a CSS transition-property\n// like `background-color`.\nconst camelCaseToKebabCase = (str)=>str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs)=>(ofs ? \"-\" : \"\") + $.toLowerCase());\nfunction execWithArgsOrReturn(valueOrFn, args) {\n    return typeof valueOrFn === \"function\" ? valueOrFn(args) : valueOrFn;\n}\nfunction useDelayUnmount(open, durationMs) {\n    const [isMounted, setIsMounted] = react__WEBPACK_IMPORTED_MODULE_0__.useState(open);\n    if (open && !isMounted) {\n        setIsMounted(true);\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!open && isMounted) {\n            const timeout = setTimeout(()=>setIsMounted(false), durationMs);\n            return ()=>clearTimeout(timeout);\n        }\n    }, [\n        open,\n        isMounted,\n        durationMs\n    ]);\n    return isMounted;\n}\n/**\n * Provides a status string to apply CSS transitions to a floating element,\n * correctly handling placement-aware transitions.\n * @see https://floating-ui.com/docs/useTransition#usetransitionstatus\n */ function useTransitionStatus(context, props) {\n    if (props === void 0) {\n        props = {};\n    }\n    const { open, elements: { floating } } = context;\n    const { duration = 250 } = props;\n    const isNumberDuration = typeof duration === \"number\";\n    const closeDuration = (isNumberDuration ? duration : duration.close) || 0;\n    const [status, setStatus] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\"unmounted\");\n    const isMounted = useDelayUnmount(open, closeDuration);\n    if (!isMounted && status === \"close\") {\n        setStatus(\"unmounted\");\n    }\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (!floating) return;\n        if (open) {\n            setStatus(\"initial\");\n            const frame = requestAnimationFrame(()=>{\n                // Ensure it opens before paint. With `FloatingDelayGroup`,\n                // this avoids a flicker when moving between floating elements\n                // to ensure one is always open with no missing frames.\n                react_dom__WEBPACK_IMPORTED_MODULE_2__.flushSync(()=>{\n                    setStatus(\"open\");\n                });\n            });\n            return ()=>{\n                cancelAnimationFrame(frame);\n            };\n        }\n        setStatus(\"close\");\n    }, [\n        open,\n        floating\n    ]);\n    return {\n        isMounted,\n        status\n    };\n}\n/**\n * Provides styles to apply CSS transitions to a floating element, correctly\n * handling placement-aware transitions. Wrapper around `useTransitionStatus`.\n * @see https://floating-ui.com/docs/useTransition#usetransitionstyles\n */ function useTransitionStyles(context, props) {\n    if (props === void 0) {\n        props = {};\n    }\n    const { initial: unstable_initial = {\n        opacity: 0\n    }, open: unstable_open, close: unstable_close, common: unstable_common, duration = 250 } = props;\n    const placement = context.placement;\n    const side = placement.split(\"-\")[0];\n    const fnArgs = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            side,\n            placement\n        }), [\n        side,\n        placement\n    ]);\n    const isNumberDuration = typeof duration === \"number\";\n    const openDuration = (isNumberDuration ? duration : duration.open) || 0;\n    const closeDuration = (isNumberDuration ? duration : duration.close) || 0;\n    const [styles, setStyles] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>({\n            ...execWithArgsOrReturn(unstable_common, fnArgs),\n            ...execWithArgsOrReturn(unstable_initial, fnArgs)\n        }));\n    const { isMounted, status } = useTransitionStatus(context, {\n        duration\n    });\n    const initialRef = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useLatestRef)(unstable_initial);\n    const openRef = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useLatestRef)(unstable_open);\n    const closeRef = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useLatestRef)(unstable_close);\n    const commonRef = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useLatestRef)(unstable_common);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        const initialStyles = execWithArgsOrReturn(initialRef.current, fnArgs);\n        const closeStyles = execWithArgsOrReturn(closeRef.current, fnArgs);\n        const commonStyles = execWithArgsOrReturn(commonRef.current, fnArgs);\n        const openStyles = execWithArgsOrReturn(openRef.current, fnArgs) || Object.keys(initialStyles).reduce((acc, key)=>{\n            acc[key] = \"\";\n            return acc;\n        }, {});\n        if (status === \"initial\") {\n            setStyles((styles)=>({\n                    transitionProperty: styles.transitionProperty,\n                    ...commonStyles,\n                    ...initialStyles\n                }));\n        }\n        if (status === \"open\") {\n            setStyles({\n                transitionProperty: Object.keys(openStyles).map(camelCaseToKebabCase).join(\",\"),\n                transitionDuration: openDuration + \"ms\",\n                ...commonStyles,\n                ...openStyles\n            });\n        }\n        if (status === \"close\") {\n            const styles = closeStyles || initialStyles;\n            setStyles({\n                transitionProperty: Object.keys(styles).map(camelCaseToKebabCase).join(\",\"),\n                transitionDuration: closeDuration + \"ms\",\n                ...commonStyles,\n                ...styles\n            });\n        }\n    }, [\n        closeDuration,\n        closeRef,\n        initialRef,\n        openRef,\n        commonRef,\n        openDuration,\n        status,\n        fnArgs\n    ]);\n    return {\n        isMounted,\n        styles\n    };\n}\n/**\n * Provides a matching callback that can be used to focus an item as the user\n * types, often used in tandem with `useListNavigation()`.\n * @see https://floating-ui.com/docs/useTypeahead\n */ function useTypeahead(context, props) {\n    var _ref;\n    const { open, dataRef } = context;\n    const { listRef, activeIndex, onMatch: unstable_onMatch, onTypingChange: unstable_onTypingChange, enabled = true, findMatch = null, resetMs = 750, ignoreKeys = [], selectedIndex = null } = props;\n    const timeoutIdRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(-1);\n    const stringRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(\"\");\n    const prevIndexRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef((_ref = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref : -1);\n    const matchIndexRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const onMatch = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)(unstable_onMatch);\n    const onTypingChange = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)(unstable_onTypingChange);\n    const findMatchRef = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useLatestRef)(findMatch);\n    const ignoreKeysRef = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useLatestRef)(ignoreKeys);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        if (open) {\n            clearTimeoutIfSet(timeoutIdRef);\n            matchIndexRef.current = null;\n            stringRef.current = \"\";\n        }\n    }, [\n        open\n    ]);\n    (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useModernLayoutEffect)(()=>{\n        // Sync arrow key navigation but not typeahead navigation.\n        if (open && stringRef.current === \"\") {\n            var _ref2;\n            prevIndexRef.current = (_ref2 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref2 : -1;\n        }\n    }, [\n        open,\n        selectedIndex,\n        activeIndex\n    ]);\n    const setTypingChange = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)((value)=>{\n        if (value) {\n            if (!dataRef.current.typing) {\n                dataRef.current.typing = value;\n                onTypingChange(value);\n            }\n        } else {\n            if (dataRef.current.typing) {\n                dataRef.current.typing = value;\n                onTypingChange(value);\n            }\n        }\n    });\n    const onKeyDown = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)((event)=>{\n        function getMatchingIndex(list, orderedList, string) {\n            const str = findMatchRef.current ? findMatchRef.current(orderedList, string) : orderedList.find((text)=>(text == null ? void 0 : text.toLocaleLowerCase().indexOf(string.toLocaleLowerCase())) === 0);\n            return str ? list.indexOf(str) : -1;\n        }\n        const listContent = listRef.current;\n        if (stringRef.current.length > 0 && stringRef.current[0] !== \" \") {\n            if (getMatchingIndex(listContent, listContent, stringRef.current) === -1) {\n                setTypingChange(false);\n            } else if (event.key === \" \") {\n                (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.stopEvent)(event);\n            }\n        }\n        if (listContent == null || ignoreKeysRef.current.includes(event.key) || // Character key.\n        event.key.length !== 1 || // Modifier key.\n        event.ctrlKey || event.metaKey || event.altKey) {\n            return;\n        }\n        if (open && event.key !== \" \") {\n            (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.stopEvent)(event);\n            setTypingChange(true);\n        }\n        // Bail out if the list contains a word like \"llama\" or \"aaron\". TODO:\n        // allow it in this case, too.\n        const allowRapidSuccessionOfFirstLetter = listContent.every((text)=>{\n            var _text$, _text$2;\n            return text ? ((_text$ = text[0]) == null ? void 0 : _text$.toLocaleLowerCase()) !== ((_text$2 = text[1]) == null ? void 0 : _text$2.toLocaleLowerCase()) : true;\n        });\n        // Allows the user to cycle through items that start with the same letter\n        // in rapid succession.\n        if (allowRapidSuccessionOfFirstLetter && stringRef.current === event.key) {\n            stringRef.current = \"\";\n            prevIndexRef.current = matchIndexRef.current;\n        }\n        stringRef.current += event.key;\n        clearTimeoutIfSet(timeoutIdRef);\n        timeoutIdRef.current = window.setTimeout(()=>{\n            stringRef.current = \"\";\n            prevIndexRef.current = matchIndexRef.current;\n            setTypingChange(false);\n        }, resetMs);\n        const prevIndex = prevIndexRef.current;\n        const index = getMatchingIndex(listContent, [\n            ...listContent.slice((prevIndex || 0) + 1),\n            ...listContent.slice(0, (prevIndex || 0) + 1)\n        ], stringRef.current);\n        if (index !== -1) {\n            onMatch(index);\n            matchIndexRef.current = index;\n        } else if (event.key !== \" \") {\n            stringRef.current = \"\";\n            setTypingChange(false);\n        }\n    });\n    const reference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            onKeyDown\n        }), [\n        onKeyDown\n    ]);\n    const floating = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return {\n            onKeyDown,\n            onKeyUp (event) {\n                if (event.key === \" \") {\n                    setTypingChange(false);\n                }\n            }\n        };\n    }, [\n        onKeyDown,\n        setTypingChange\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>enabled ? {\n            reference,\n            floating\n        } : {}, [\n        enabled,\n        reference,\n        floating\n    ]);\n}\nfunction getArgsWithCustomFloatingHeight(state, height) {\n    return {\n        ...state,\n        rects: {\n            ...state.rects,\n            floating: {\n                ...state.rects.floating,\n                height\n            }\n        }\n    };\n}\n/**\n * Positions the floating element such that an inner element inside of it is\n * anchored to the reference element.\n * @see https://floating-ui.com/docs/inner\n * @deprecated\n */ const inner = (props)=>({\n        name: \"inner\",\n        options: props,\n        async fn (state) {\n            const { listRef, overflowRef, onFallbackChange, offset: innerOffset = 0, index = 0, minItemsVisible = 4, referenceOverflowThreshold = 0, scrollRef, ...detectOverflowOptions } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_8__.evaluate)(props, state);\n            const { rects, elements: { floating } } = state;\n            const item = listRef.current[index];\n            const scrollEl = (scrollRef == null ? void 0 : scrollRef.current) || floating;\n            // Valid combinations:\n            // 1. Floating element is the scrollRef and has a border (default)\n            // 2. Floating element is not the scrollRef, floating element has a border\n            // 3. Floating element is not the scrollRef, scrollRef has a border\n            // Floating > {...getFloatingProps()} wrapper > scrollRef > items is not\n            // allowed as VoiceOver doesn't work.\n            const clientTop = floating.clientTop || scrollEl.clientTop;\n            const floatingIsBordered = floating.clientTop !== 0;\n            const scrollElIsBordered = scrollEl.clientTop !== 0;\n            const floatingIsScrollEl = floating === scrollEl;\n            if (true) {\n                if (!state.placement.startsWith(\"bottom\")) {\n                    warn('`placement` side must be \"bottom\" when using the `inner`', \"middleware.\");\n                }\n            }\n            if (!item) {\n                return {};\n            }\n            const nextArgs = {\n                ...state,\n                ...await (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.offset)(-item.offsetTop - floating.clientTop - rects.reference.height / 2 - item.offsetHeight / 2 - innerOffset).fn(state)\n            };\n            const overflow = await (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.detectOverflow)(getArgsWithCustomFloatingHeight(nextArgs, scrollEl.scrollHeight + clientTop + floating.clientTop), detectOverflowOptions);\n            const refOverflow = await (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.detectOverflow)(nextArgs, {\n                ...detectOverflowOptions,\n                elementContext: \"reference\"\n            });\n            const diffY = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_8__.max)(0, overflow.top);\n            const nextY = nextArgs.y + diffY;\n            const isScrollable = scrollEl.scrollHeight > scrollEl.clientHeight;\n            const rounder = isScrollable ? (v)=>v : _floating_ui_utils__WEBPACK_IMPORTED_MODULE_8__.round;\n            const maxHeight = rounder((0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_8__.max)(0, scrollEl.scrollHeight + (floatingIsBordered && floatingIsScrollEl || scrollElIsBordered ? clientTop * 2 : 0) - diffY - (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_8__.max)(0, overflow.bottom)));\n            scrollEl.style.maxHeight = maxHeight + \"px\";\n            scrollEl.scrollTop = diffY;\n            // There is not enough space, fallback to standard anchored positioning\n            if (onFallbackChange) {\n                const shouldFallback = scrollEl.offsetHeight < item.offsetHeight * (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_8__.min)(minItemsVisible, listRef.current.length) - 1 || refOverflow.top >= -referenceOverflowThreshold || refOverflow.bottom >= -referenceOverflowThreshold;\n                react_dom__WEBPACK_IMPORTED_MODULE_2__.flushSync(()=>onFallbackChange(shouldFallback));\n            }\n            if (overflowRef) {\n                overflowRef.current = await (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.detectOverflow)(getArgsWithCustomFloatingHeight({\n                    ...nextArgs,\n                    y: nextY\n                }, scrollEl.offsetHeight + clientTop + floating.clientTop), detectOverflowOptions);\n            }\n            return {\n                y: nextY\n            };\n        }\n    });\n/**\n * Changes the `inner` middleware's `offset` upon a `wheel` event to\n * expand the floating element's height, revealing more list items.\n * @see https://floating-ui.com/docs/inner\n * @deprecated\n */ function useInnerOffset(context, props) {\n    const { open, elements } = context;\n    const { enabled = true, overflowRef, scrollRef, onChange: unstable_onChange } = props;\n    const onChange = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.useEffectEvent)(unstable_onChange);\n    const controlledScrollingRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const prevScrollTopRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const initialOverflowRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!enabled) return;\n        function onWheel(e) {\n            if (e.ctrlKey || !el || overflowRef.current == null) {\n                return;\n            }\n            const dY = e.deltaY;\n            const isAtTop = overflowRef.current.top >= -0.5;\n            const isAtBottom = overflowRef.current.bottom >= -0.5;\n            const remainingScroll = el.scrollHeight - el.clientHeight;\n            const sign = dY < 0 ? -1 : 1;\n            const method = dY < 0 ? \"max\" : \"min\";\n            if (el.scrollHeight <= el.clientHeight) {\n                return;\n            }\n            if (!isAtTop && dY > 0 || !isAtBottom && dY < 0) {\n                e.preventDefault();\n                react_dom__WEBPACK_IMPORTED_MODULE_2__.flushSync(()=>{\n                    onChange((d)=>d + Math[method](dY, remainingScroll * sign));\n                });\n            } else if (/firefox/i.test((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_6__.getUserAgent)())) {\n                // Needed to propagate scrolling during momentum scrolling phase once\n                // it gets limited by the boundary. UX improvement, not critical.\n                el.scrollTop += dY;\n            }\n        }\n        const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\n        if (open && el) {\n            el.addEventListener(\"wheel\", onWheel);\n            // Wait for the position to be ready.\n            requestAnimationFrame(()=>{\n                prevScrollTopRef.current = el.scrollTop;\n                if (overflowRef.current != null) {\n                    initialOverflowRef.current = {\n                        ...overflowRef.current\n                    };\n                }\n            });\n            return ()=>{\n                prevScrollTopRef.current = null;\n                initialOverflowRef.current = null;\n                el.removeEventListener(\"wheel\", onWheel);\n            };\n        }\n    }, [\n        enabled,\n        open,\n        elements.floating,\n        overflowRef,\n        scrollRef,\n        onChange\n    ]);\n    const floating = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            onKeyDown () {\n                controlledScrollingRef.current = true;\n            },\n            onWheel () {\n                controlledScrollingRef.current = false;\n            },\n            onPointerMove () {\n                controlledScrollingRef.current = false;\n            },\n            onScroll () {\n                const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\n                if (!overflowRef.current || !el || !controlledScrollingRef.current) {\n                    return;\n                }\n                if (prevScrollTopRef.current !== null) {\n                    const scrollDiff = el.scrollTop - prevScrollTopRef.current;\n                    if (overflowRef.current.bottom < -0.5 && scrollDiff < -1 || overflowRef.current.top < -0.5 && scrollDiff > 1) {\n                        react_dom__WEBPACK_IMPORTED_MODULE_2__.flushSync(()=>onChange((d)=>d + scrollDiff));\n                    }\n                }\n                // [Firefox] Wait for the height change to have been applied.\n                requestAnimationFrame(()=>{\n                    prevScrollTopRef.current = el.scrollTop;\n                });\n            }\n        }), [\n        elements.floating,\n        onChange,\n        overflowRef,\n        scrollRef\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>enabled ? {\n            floating\n        } : {}, [\n        enabled,\n        floating\n    ]);\n}\nfunction getNodeChildren(nodes, id) {\n    let allChildren = nodes.filter((node)=>{\n        var _node$context;\n        return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);\n    });\n    let currentChildren = allChildren;\n    while(currentChildren.length){\n        currentChildren = nodes.filter((node)=>{\n            var _currentChildren;\n            return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some((n)=>{\n                var _node$context2;\n                return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);\n            });\n        });\n        allChildren = allChildren.concat(currentChildren);\n    }\n    return allChildren;\n}\nfunction isPointInPolygon(point, polygon) {\n    const [x, y] = point;\n    let isInside = false;\n    const length = polygon.length;\n    for(let i = 0, j = length - 1; i < length; j = i++){\n        const [xi, yi] = polygon[i] || [\n            0,\n            0\n        ];\n        const [xj, yj] = polygon[j] || [\n            0,\n            0\n        ];\n        const intersect = yi >= y !== yj >= y && x <= (xj - xi) * (y - yi) / (yj - yi) + xi;\n        if (intersect) {\n            isInside = !isInside;\n        }\n    }\n    return isInside;\n}\nfunction isInside(point, rect) {\n    return point[0] >= rect.x && point[0] <= rect.x + rect.width && point[1] >= rect.y && point[1] <= rect.y + rect.height;\n}\n/**\n * Generates a safe polygon area that the user can traverse without closing the\n * floating element once leaving the reference element.\n * @see https://floating-ui.com/docs/useHover#safepolygon\n */ function safePolygon(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    const { buffer = 0.5, blockPointerEvents = false, requireIntent = true } = options;\n    const timeoutRef = {\n        current: -1\n    };\n    let hasLanded = false;\n    let lastX = null;\n    let lastY = null;\n    let lastCursorTime = performance.now();\n    function getCursorSpeed(x, y) {\n        const currentTime = performance.now();\n        const elapsedTime = currentTime - lastCursorTime;\n        if (lastX === null || lastY === null || elapsedTime === 0) {\n            lastX = x;\n            lastY = y;\n            lastCursorTime = currentTime;\n            return null;\n        }\n        const deltaX = x - lastX;\n        const deltaY = y - lastY;\n        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n        const speed = distance / elapsedTime; // px / ms\n        lastX = x;\n        lastY = y;\n        lastCursorTime = currentTime;\n        return speed;\n    }\n    const fn = (_ref)=>{\n        let { x, y, placement, elements, onClose, nodeId, tree } = _ref;\n        return function onMouseMove(event) {\n            function close() {\n                clearTimeoutIfSet(timeoutRef);\n                onClose();\n            }\n            clearTimeoutIfSet(timeoutRef);\n            if (!elements.domReference || !elements.floating || placement == null || x == null || y == null) {\n                return;\n            }\n            const { clientX, clientY } = event;\n            const clientPoint = [\n                clientX,\n                clientY\n            ];\n            const target = getTarget(event);\n            const isLeave = event.type === \"mouseleave\";\n            const isOverFloatingEl = contains(elements.floating, target);\n            const isOverReferenceEl = contains(elements.domReference, target);\n            const refRect = elements.domReference.getBoundingClientRect();\n            const rect = elements.floating.getBoundingClientRect();\n            const side = placement.split(\"-\")[0];\n            const cursorLeaveFromRight = x > rect.right - rect.width / 2;\n            const cursorLeaveFromBottom = y > rect.bottom - rect.height / 2;\n            const isOverReferenceRect = isInside(clientPoint, refRect);\n            const isFloatingWider = rect.width > refRect.width;\n            const isFloatingTaller = rect.height > refRect.height;\n            const left = (isFloatingWider ? refRect : rect).left;\n            const right = (isFloatingWider ? refRect : rect).right;\n            const top = (isFloatingTaller ? refRect : rect).top;\n            const bottom = (isFloatingTaller ? refRect : rect).bottom;\n            if (isOverFloatingEl) {\n                hasLanded = true;\n                if (!isLeave) {\n                    return;\n                }\n            }\n            if (isOverReferenceEl) {\n                hasLanded = false;\n            }\n            if (isOverReferenceEl && !isLeave) {\n                hasLanded = true;\n                return;\n            }\n            // Prevent overlapping floating element from being stuck in an open-close\n            // loop: https://github.com/floating-ui/floating-ui/issues/1910\n            if (isLeave && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_5__.isElement)(event.relatedTarget) && contains(elements.floating, event.relatedTarget)) {\n                return;\n            }\n            // If any nested child is open, abort.\n            if (tree && getNodeChildren(tree.nodesRef.current, nodeId).length) {\n                return;\n            }\n            // If the pointer is leaving from the opposite side, the \"buffer\" logic\n            // creates a point where the floating element remains open, but should be\n            // ignored.\n            // A constant of 1 handles floating point rounding errors.\n            if (side === \"top\" && y >= refRect.bottom - 1 || side === \"bottom\" && y <= refRect.top + 1 || side === \"left\" && x >= refRect.right - 1 || side === \"right\" && x <= refRect.left + 1) {\n                return close();\n            }\n            // Ignore when the cursor is within the rectangular trough between the\n            // two elements. Since the triangle is created from the cursor point,\n            // which can start beyond the ref element's edge, traversing back and\n            // forth from the ref to the floating element can cause it to close. This\n            // ensures it always remains open in that case.\n            let rectPoly = [];\n            switch(side){\n                case \"top\":\n                    rectPoly = [\n                        [\n                            left,\n                            refRect.top + 1\n                        ],\n                        [\n                            left,\n                            rect.bottom - 1\n                        ],\n                        [\n                            right,\n                            rect.bottom - 1\n                        ],\n                        [\n                            right,\n                            refRect.top + 1\n                        ]\n                    ];\n                    break;\n                case \"bottom\":\n                    rectPoly = [\n                        [\n                            left,\n                            rect.top + 1\n                        ],\n                        [\n                            left,\n                            refRect.bottom - 1\n                        ],\n                        [\n                            right,\n                            refRect.bottom - 1\n                        ],\n                        [\n                            right,\n                            rect.top + 1\n                        ]\n                    ];\n                    break;\n                case \"left\":\n                    rectPoly = [\n                        [\n                            rect.right - 1,\n                            bottom\n                        ],\n                        [\n                            rect.right - 1,\n                            top\n                        ],\n                        [\n                            refRect.left + 1,\n                            top\n                        ],\n                        [\n                            refRect.left + 1,\n                            bottom\n                        ]\n                    ];\n                    break;\n                case \"right\":\n                    rectPoly = [\n                        [\n                            refRect.right - 1,\n                            bottom\n                        ],\n                        [\n                            refRect.right - 1,\n                            top\n                        ],\n                        [\n                            rect.left + 1,\n                            top\n                        ],\n                        [\n                            rect.left + 1,\n                            bottom\n                        ]\n                    ];\n                    break;\n            }\n            function getPolygon(_ref2) {\n                let [x, y] = _ref2;\n                switch(side){\n                    case \"top\":\n                        {\n                            const cursorPointOne = [\n                                isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4,\n                                y + buffer + 1\n                            ];\n                            const cursorPointTwo = [\n                                isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4,\n                                y + buffer + 1\n                            ];\n                            const commonPoints = [\n                                [\n                                    rect.left,\n                                    cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top\n                                ],\n                                [\n                                    rect.right,\n                                    cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer\n                                ]\n                            ];\n                            return [\n                                cursorPointOne,\n                                cursorPointTwo,\n                                ...commonPoints\n                            ];\n                        }\n                    case \"bottom\":\n                        {\n                            const cursorPointOne = [\n                                isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4,\n                                y - buffer\n                            ];\n                            const cursorPointTwo = [\n                                isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4,\n                                y - buffer\n                            ];\n                            const commonPoints = [\n                                [\n                                    rect.left,\n                                    cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom\n                                ],\n                                [\n                                    rect.right,\n                                    cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer\n                                ]\n                            ];\n                            return [\n                                cursorPointOne,\n                                cursorPointTwo,\n                                ...commonPoints\n                            ];\n                        }\n                    case \"left\":\n                        {\n                            const cursorPointOne = [\n                                x + buffer + 1,\n                                isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4\n                            ];\n                            const cursorPointTwo = [\n                                x + buffer + 1,\n                                isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4\n                            ];\n                            const commonPoints = [\n                                [\n                                    cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left,\n                                    rect.top\n                                ],\n                                [\n                                    cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer,\n                                    rect.bottom\n                                ]\n                            ];\n                            return [\n                                ...commonPoints,\n                                cursorPointOne,\n                                cursorPointTwo\n                            ];\n                        }\n                    case \"right\":\n                        {\n                            const cursorPointOne = [\n                                x - buffer,\n                                isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4\n                            ];\n                            const cursorPointTwo = [\n                                x - buffer,\n                                isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4\n                            ];\n                            const commonPoints = [\n                                [\n                                    cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right,\n                                    rect.top\n                                ],\n                                [\n                                    cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer,\n                                    rect.bottom\n                                ]\n                            ];\n                            return [\n                                cursorPointOne,\n                                cursorPointTwo,\n                                ...commonPoints\n                            ];\n                        }\n                }\n            }\n            if (isPointInPolygon([\n                clientX,\n                clientY\n            ], rectPoly)) {\n                return;\n            }\n            if (hasLanded && !isOverReferenceRect) {\n                return close();\n            }\n            if (!isLeave && requireIntent) {\n                const cursorSpeed = getCursorSpeed(event.clientX, event.clientY);\n                const cursorSpeedThreshold = 0.1;\n                if (cursorSpeed !== null && cursorSpeed < cursorSpeedThreshold) {\n                    return close();\n                }\n            }\n            if (!isPointInPolygon([\n                clientX,\n                clientY\n            ], getPolygon([\n                x,\n                y\n            ]))) {\n                close();\n            } else if (!hasLanded && requireIntent) {\n                timeoutRef.current = window.setTimeout(close, 40);\n            }\n        };\n    };\n    fn.__options = {\n        blockPointerEvents\n    };\n    return fn;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datepicker/node_modules/@floating-ui/react/dist/floating-ui.react.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datepicker/node_modules/@floating-ui/react/dist/floating-ui.react.utils.mjs":
/*!********************************************************************************************************!*\
  !*** ./node_modules/react-datepicker/node_modules/@floating-ui/react/dist/floating-ui.react.utils.mjs ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var react__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   activeElement: () => (/* binding */ activeElement),\n/* harmony export */   contains: () => (/* binding */ contains),\n/* harmony export */   createGridCellMap: () => (/* binding */ createGridCellMap),\n/* harmony export */   disableFocusInside: () => (/* binding */ disableFocusInside),\n/* harmony export */   enableFocusInside: () => (/* binding */ enableFocusInside),\n/* harmony export */   findNonDisabledListIndex: () => (/* binding */ findNonDisabledListIndex),\n/* harmony export */   getDeepestNode: () => (/* binding */ getDeepestNode),\n/* harmony export */   getDocument: () => (/* binding */ getDocument),\n/* harmony export */   getFloatingFocusElement: () => (/* binding */ getFloatingFocusElement),\n/* harmony export */   getGridCellIndexOfCorner: () => (/* binding */ getGridCellIndexOfCorner),\n/* harmony export */   getGridCellIndices: () => (/* binding */ getGridCellIndices),\n/* harmony export */   getGridNavigatedIndex: () => (/* binding */ getGridNavigatedIndex),\n/* harmony export */   getMaxListIndex: () => (/* binding */ getMaxListIndex),\n/* harmony export */   getMinListIndex: () => (/* binding */ getMinListIndex),\n/* harmony export */   getNextTabbable: () => (/* binding */ getNextTabbable),\n/* harmony export */   getNodeAncestors: () => (/* binding */ getNodeAncestors),\n/* harmony export */   getNodeChildren: () => (/* binding */ getNodeChildren),\n/* harmony export */   getPlatform: () => (/* binding */ getPlatform),\n/* harmony export */   getPreviousTabbable: () => (/* binding */ getPreviousTabbable),\n/* harmony export */   getTabbableOptions: () => (/* binding */ getTabbableOptions),\n/* harmony export */   getTarget: () => (/* binding */ getTarget),\n/* harmony export */   getUserAgent: () => (/* binding */ getUserAgent),\n/* harmony export */   isAndroid: () => (/* binding */ isAndroid),\n/* harmony export */   isDifferentGridRow: () => (/* binding */ isDifferentGridRow),\n/* harmony export */   isEventTargetWithin: () => (/* binding */ isEventTargetWithin),\n/* harmony export */   isIndexOutOfListBounds: () => (/* binding */ isIndexOutOfListBounds),\n/* harmony export */   isJSDOM: () => (/* binding */ isJSDOM),\n/* harmony export */   isListIndexDisabled: () => (/* binding */ isListIndexDisabled),\n/* harmony export */   isMac: () => (/* binding */ isMac),\n/* harmony export */   isMouseLikePointerType: () => (/* binding */ isMouseLikePointerType),\n/* harmony export */   isOutsideEvent: () => (/* binding */ isOutsideEvent),\n/* harmony export */   isReactEvent: () => (/* binding */ isReactEvent),\n/* harmony export */   isRootElement: () => (/* binding */ isRootElement),\n/* harmony export */   isSafari: () => (/* binding */ isSafari),\n/* harmony export */   isTypeableCombobox: () => (/* binding */ isTypeableCombobox),\n/* harmony export */   isTypeableElement: () => (/* binding */ isTypeableElement),\n/* harmony export */   isVirtualClick: () => (/* binding */ isVirtualClick),\n/* harmony export */   isVirtualPointerEvent: () => (/* binding */ isVirtualPointerEvent),\n/* harmony export */   matchesFocusVisible: () => (/* binding */ matchesFocusVisible),\n/* harmony export */   stopEvent: () => (/* binding */ stopEvent),\n/* harmony export */   useEffectEvent: () => (/* binding */ useEffectEvent),\n/* harmony export */   useLatestRef: () => (/* binding */ useLatestRef),\n/* harmony export */   useModernLayoutEffect: () => (/* binding */ index)\n/* harmony export */ });\n/* harmony import */ var _floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @floating-ui/utils/dom */ \"(ssr)/./node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @floating-ui/utils */ \"(ssr)/./node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs\");\n/* harmony import */ var tabbable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tabbable */ \"(ssr)/./node_modules/tabbable/dist/index.esm.js\");\n\n\n\n\n\n// Avoid Chrome DevTools blue warning.\nfunction getPlatform() {\n    const uaData = navigator.userAgentData;\n    if (uaData != null && uaData.platform) {\n        return uaData.platform;\n    }\n    return navigator.platform;\n}\nfunction getUserAgent() {\n    const uaData = navigator.userAgentData;\n    if (uaData && Array.isArray(uaData.brands)) {\n        return uaData.brands.map((_ref)=>{\n            let { brand, version } = _ref;\n            return brand + \"/\" + version;\n        }).join(\" \");\n    }\n    return navigator.userAgent;\n}\nfunction isSafari() {\n    // Chrome DevTools does not complain about navigator.vendor\n    return /apple/i.test(navigator.vendor);\n}\nfunction isAndroid() {\n    const re = /android/i;\n    return re.test(getPlatform()) || re.test(getUserAgent());\n}\nfunction isMac() {\n    return getPlatform().toLowerCase().startsWith(\"mac\") && !navigator.maxTouchPoints;\n}\nfunction isJSDOM() {\n    return getUserAgent().includes(\"jsdom/\");\n}\nconst FOCUSABLE_ATTRIBUTE = \"data-floating-ui-focusable\";\nconst TYPEABLE_SELECTOR = \"input:not([type='hidden']):not([disabled]),\" + \"[contenteditable]:not([contenteditable='false']),textarea:not([disabled])\";\nconst ARROW_LEFT = \"ArrowLeft\";\nconst ARROW_RIGHT = \"ArrowRight\";\nconst ARROW_UP = \"ArrowUp\";\nconst ARROW_DOWN = \"ArrowDown\";\nfunction activeElement(doc) {\n    let activeElement = doc.activeElement;\n    while(((_activeElement = activeElement) == null || (_activeElement = _activeElement.shadowRoot) == null ? void 0 : _activeElement.activeElement) != null){\n        var _activeElement;\n        activeElement = activeElement.shadowRoot.activeElement;\n    }\n    return activeElement;\n}\nfunction contains(parent, child) {\n    if (!parent || !child) {\n        return false;\n    }\n    const rootNode = child.getRootNode == null ? void 0 : child.getRootNode();\n    // First, attempt with faster native method\n    if (parent.contains(child)) {\n        return true;\n    }\n    // then fallback to custom implementation with Shadow DOM support\n    if (rootNode && (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isShadowRoot)(rootNode)) {\n        let next = child;\n        while(next){\n            if (parent === next) {\n                return true;\n            }\n            // @ts-ignore\n            next = next.parentNode || next.host;\n        }\n    }\n    // Give up, the result is false\n    return false;\n}\nfunction getTarget(event) {\n    if (\"composedPath\" in event) {\n        return event.composedPath()[0];\n    }\n    // TS thinks `event` is of type never as it assumes all browsers support\n    // `composedPath()`, but browsers without shadow DOM don't.\n    return event.target;\n}\nfunction isEventTargetWithin(event, node) {\n    if (node == null) {\n        return false;\n    }\n    if (\"composedPath\" in event) {\n        return event.composedPath().includes(node);\n    }\n    // TS thinks `event` is of type never as it assumes all browsers support composedPath, but browsers without shadow dom don't\n    const e = event;\n    return e.target != null && node.contains(e.target);\n}\nfunction isRootElement(element) {\n    return element.matches(\"html,body\");\n}\nfunction getDocument(node) {\n    return (node == null ? void 0 : node.ownerDocument) || document;\n}\nfunction isTypeableElement(element) {\n    return (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(element) && element.matches(TYPEABLE_SELECTOR);\n}\nfunction isTypeableCombobox(element) {\n    if (!element) return false;\n    return element.getAttribute(\"role\") === \"combobox\" && isTypeableElement(element);\n}\nfunction matchesFocusVisible(element) {\n    // We don't want to block focus from working with `visibleOnly`\n    // (JSDOM doesn't match `:focus-visible` when the element has `:focus`)\n    if (!element || isJSDOM()) return true;\n    try {\n        return element.matches(\":focus-visible\");\n    } catch (_e) {\n        return true;\n    }\n}\nfunction getFloatingFocusElement(floatingElement) {\n    if (!floatingElement) {\n        return null;\n    }\n    // Try to find the element that has `{...getFloatingProps()}` spread on it.\n    // This indicates the floating element is acting as a positioning wrapper, and\n    // so focus should be managed on the child element with the event handlers and\n    // aria props.\n    return floatingElement.hasAttribute(FOCUSABLE_ATTRIBUTE) ? floatingElement : floatingElement.querySelector(\"[\" + FOCUSABLE_ATTRIBUTE + \"]\") || floatingElement;\n}\nfunction getNodeChildren(nodes, id) {\n    let allChildren = nodes.filter((node)=>{\n        var _node$context;\n        return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);\n    });\n    let currentChildren = allChildren;\n    while(currentChildren.length){\n        currentChildren = nodes.filter((node)=>{\n            var _currentChildren;\n            return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some((n)=>{\n                var _node$context2;\n                return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);\n            });\n        });\n        allChildren = allChildren.concat(currentChildren);\n    }\n    return allChildren;\n}\nfunction getDeepestNode(nodes, id) {\n    let deepestNodeId;\n    let maxDepth = -1;\n    function findDeepest(nodeId, depth) {\n        if (depth > maxDepth) {\n            deepestNodeId = nodeId;\n            maxDepth = depth;\n        }\n        const children = getNodeChildren(nodes, nodeId);\n        children.forEach((child)=>{\n            findDeepest(child.id, depth + 1);\n        });\n    }\n    findDeepest(id, 0);\n    return nodes.find((node)=>node.id === deepestNodeId);\n}\nfunction getNodeAncestors(nodes, id) {\n    var _nodes$find;\n    let allAncestors = [];\n    let currentParentId = (_nodes$find = nodes.find((node)=>node.id === id)) == null ? void 0 : _nodes$find.parentId;\n    while(currentParentId){\n        const currentNode = nodes.find((node)=>node.id === currentParentId);\n        currentParentId = currentNode == null ? void 0 : currentNode.parentId;\n        if (currentNode) {\n            allAncestors = allAncestors.concat(currentNode);\n        }\n    }\n    return allAncestors;\n}\nfunction stopEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n}\nfunction isReactEvent(event) {\n    return \"nativeEvent\" in event;\n}\n// License: https://github.com/adobe/react-spectrum/blob/b35d5c02fe900badccd0cf1a8f23bb593419f238/packages/@react-aria/utils/src/isVirtualEvent.ts\nfunction isVirtualClick(event) {\n    // FIXME: Firefox is now emitting a deprecation warning for `mozInputSource`.\n    // Try to find a workaround for this. `react-aria` source still has the check.\n    if (event.mozInputSource === 0 && event.isTrusted) {\n        return true;\n    }\n    if (isAndroid() && event.pointerType) {\n        return event.type === \"click\" && event.buttons === 1;\n    }\n    return event.detail === 0 && !event.pointerType;\n}\nfunction isVirtualPointerEvent(event) {\n    if (isJSDOM()) return false;\n    return !isAndroid() && event.width === 0 && event.height === 0 || isAndroid() && event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === \"mouse\" || // iOS VoiceOver returns 0.333• for width/height.\n    event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === \"touch\";\n}\nfunction isMouseLikePointerType(pointerType, strict) {\n    // On some Linux machines with Chromium, mouse inputs return a `pointerType`\n    // of \"pen\": https://github.com/floating-ui/floating-ui/issues/2015\n    const values = [\n        \"mouse\",\n        \"pen\"\n    ];\n    if (!strict) {\n        values.push(\"\", undefined);\n    }\n    return values.includes(pointerType);\n}\nvar isClient = typeof document !== \"undefined\";\nvar noop = function noop() {};\nvar index = isClient ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : noop;\n// https://github.com/mui/material-ui/issues/41190#issuecomment-2040873379\nconst SafeReact = {\n    .../*#__PURE__*/ (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(react__WEBPACK_IMPORTED_MODULE_0__, 2)))\n};\nfunction useLatestRef(value) {\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(value);\n    index(()=>{\n        ref.current = value;\n    });\n    return ref;\n}\nconst useInsertionEffect = SafeReact.useInsertionEffect;\nconst useSafeInsertionEffect = useInsertionEffect || ((fn)=>fn());\nfunction useEffectEvent(callback) {\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(()=>{\n        if (true) {\n            throw new Error(\"Cannot call an event handler while rendering.\");\n        }\n    });\n    useSafeInsertionEffect(()=>{\n        ref.current = callback;\n    });\n    return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return ref.current == null ? void 0 : ref.current(...args);\n    }, []);\n}\nfunction isDifferentGridRow(index, cols, prevRow) {\n    return Math.floor(index / cols) !== prevRow;\n}\nfunction isIndexOutOfListBounds(listRef, index) {\n    return index < 0 || index >= listRef.current.length;\n}\nfunction getMinListIndex(listRef, disabledIndices) {\n    return findNonDisabledListIndex(listRef, {\n        disabledIndices\n    });\n}\nfunction getMaxListIndex(listRef, disabledIndices) {\n    return findNonDisabledListIndex(listRef, {\n        decrement: true,\n        startingIndex: listRef.current.length,\n        disabledIndices\n    });\n}\nfunction findNonDisabledListIndex(listRef, _temp) {\n    let { startingIndex = -1, decrement = false, disabledIndices, amount = 1 } = _temp === void 0 ? {} : _temp;\n    let index = startingIndex;\n    do {\n        index += decrement ? -amount : amount;\n    }while (index >= 0 && index <= listRef.current.length - 1 && isListIndexDisabled(listRef, index, disabledIndices));\n    return index;\n}\nfunction getGridNavigatedIndex(listRef, _ref) {\n    let { event, orientation, loop, rtl, cols, disabledIndices, minIndex, maxIndex, prevIndex, stopEvent: stop = false } = _ref;\n    let nextIndex = prevIndex;\n    if (event.key === ARROW_UP) {\n        stop && stopEvent(event);\n        if (prevIndex === -1) {\n            nextIndex = maxIndex;\n        } else {\n            nextIndex = findNonDisabledListIndex(listRef, {\n                startingIndex: nextIndex,\n                amount: cols,\n                decrement: true,\n                disabledIndices\n            });\n            if (loop && (prevIndex - cols < minIndex || nextIndex < 0)) {\n                const col = prevIndex % cols;\n                const maxCol = maxIndex % cols;\n                const offset = maxIndex - (maxCol - col);\n                if (maxCol === col) {\n                    nextIndex = maxIndex;\n                } else {\n                    nextIndex = maxCol > col ? offset : offset - cols;\n                }\n            }\n        }\n        if (isIndexOutOfListBounds(listRef, nextIndex)) {\n            nextIndex = prevIndex;\n        }\n    }\n    if (event.key === ARROW_DOWN) {\n        stop && stopEvent(event);\n        if (prevIndex === -1) {\n            nextIndex = minIndex;\n        } else {\n            nextIndex = findNonDisabledListIndex(listRef, {\n                startingIndex: prevIndex,\n                amount: cols,\n                disabledIndices\n            });\n            if (loop && prevIndex + cols > maxIndex) {\n                nextIndex = findNonDisabledListIndex(listRef, {\n                    startingIndex: prevIndex % cols - cols,\n                    amount: cols,\n                    disabledIndices\n                });\n            }\n        }\n        if (isIndexOutOfListBounds(listRef, nextIndex)) {\n            nextIndex = prevIndex;\n        }\n    }\n    // Remains on the same row/column.\n    if (orientation === \"both\") {\n        const prevRow = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.floor)(prevIndex / cols);\n        if (event.key === (rtl ? ARROW_LEFT : ARROW_RIGHT)) {\n            stop && stopEvent(event);\n            if (prevIndex % cols !== cols - 1) {\n                nextIndex = findNonDisabledListIndex(listRef, {\n                    startingIndex: prevIndex,\n                    disabledIndices\n                });\n                if (loop && isDifferentGridRow(nextIndex, cols, prevRow)) {\n                    nextIndex = findNonDisabledListIndex(listRef, {\n                        startingIndex: prevIndex - prevIndex % cols - 1,\n                        disabledIndices\n                    });\n                }\n            } else if (loop) {\n                nextIndex = findNonDisabledListIndex(listRef, {\n                    startingIndex: prevIndex - prevIndex % cols - 1,\n                    disabledIndices\n                });\n            }\n            if (isDifferentGridRow(nextIndex, cols, prevRow)) {\n                nextIndex = prevIndex;\n            }\n        }\n        if (event.key === (rtl ? ARROW_RIGHT : ARROW_LEFT)) {\n            stop && stopEvent(event);\n            if (prevIndex % cols !== 0) {\n                nextIndex = findNonDisabledListIndex(listRef, {\n                    startingIndex: prevIndex,\n                    decrement: true,\n                    disabledIndices\n                });\n                if (loop && isDifferentGridRow(nextIndex, cols, prevRow)) {\n                    nextIndex = findNonDisabledListIndex(listRef, {\n                        startingIndex: prevIndex + (cols - prevIndex % cols),\n                        decrement: true,\n                        disabledIndices\n                    });\n                }\n            } else if (loop) {\n                nextIndex = findNonDisabledListIndex(listRef, {\n                    startingIndex: prevIndex + (cols - prevIndex % cols),\n                    decrement: true,\n                    disabledIndices\n                });\n            }\n            if (isDifferentGridRow(nextIndex, cols, prevRow)) {\n                nextIndex = prevIndex;\n            }\n        }\n        const lastRow = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.floor)(maxIndex / cols) === prevRow;\n        if (isIndexOutOfListBounds(listRef, nextIndex)) {\n            if (loop && lastRow) {\n                nextIndex = event.key === (rtl ? ARROW_RIGHT : ARROW_LEFT) ? maxIndex : findNonDisabledListIndex(listRef, {\n                    startingIndex: prevIndex - prevIndex % cols - 1,\n                    disabledIndices\n                });\n            } else {\n                nextIndex = prevIndex;\n            }\n        }\n    }\n    return nextIndex;\n}\n/** For each cell index, gets the item index that occupies that cell */ function createGridCellMap(sizes, cols, dense) {\n    const cellMap = [];\n    let startIndex = 0;\n    sizes.forEach((_ref2, index)=>{\n        let { width, height } = _ref2;\n        if (width > cols) {\n            if (true) {\n                throw new Error(\"[Floating UI]: Invalid grid - item width at index \" + index + \" is greater than grid columns\");\n            }\n        }\n        let itemPlaced = false;\n        if (dense) {\n            startIndex = 0;\n        }\n        while(!itemPlaced){\n            const targetCells = [];\n            for(let i = 0; i < width; i++){\n                for(let j = 0; j < height; j++){\n                    targetCells.push(startIndex + i + j * cols);\n                }\n            }\n            if (startIndex % cols + width <= cols && targetCells.every((cell)=>cellMap[cell] == null)) {\n                targetCells.forEach((cell)=>{\n                    cellMap[cell] = index;\n                });\n                itemPlaced = true;\n            } else {\n                startIndex++;\n            }\n        }\n    });\n    // convert into a non-sparse array\n    return [\n        ...cellMap\n    ];\n}\n/** Gets cell index of an item's corner or -1 when index is -1. */ function getGridCellIndexOfCorner(index, sizes, cellMap, cols, corner) {\n    if (index === -1) return -1;\n    const firstCellIndex = cellMap.indexOf(index);\n    const sizeItem = sizes[index];\n    switch(corner){\n        case \"tl\":\n            return firstCellIndex;\n        case \"tr\":\n            if (!sizeItem) {\n                return firstCellIndex;\n            }\n            return firstCellIndex + sizeItem.width - 1;\n        case \"bl\":\n            if (!sizeItem) {\n                return firstCellIndex;\n            }\n            return firstCellIndex + (sizeItem.height - 1) * cols;\n        case \"br\":\n            return cellMap.lastIndexOf(index);\n    }\n}\n/** Gets all cell indices that correspond to the specified indices */ function getGridCellIndices(indices, cellMap) {\n    return cellMap.flatMap((index, cellIndex)=>indices.includes(index) ? [\n            cellIndex\n        ] : []);\n}\nfunction isListIndexDisabled(listRef, index, disabledIndices) {\n    if (typeof disabledIndices === \"function\") {\n        return disabledIndices(index);\n    } else if (disabledIndices) {\n        return disabledIndices.includes(index);\n    }\n    const element = listRef.current[index];\n    return element == null || element.hasAttribute(\"disabled\") || element.getAttribute(\"aria-disabled\") === \"true\";\n}\nconst getTabbableOptions = ()=>({\n        getShadowRoot: true,\n        displayCheck: // JSDOM does not support the `tabbable` library. To solve this we can\n        // check if `ResizeObserver` is a real function (not polyfilled), which\n        // determines if the current environment is JSDOM-like.\n        typeof ResizeObserver === \"function\" && ResizeObserver.toString().includes(\"[native code]\") ? \"full\" : \"none\"\n    });\nfunction getTabbableIn(container, dir) {\n    const list = (0,tabbable__WEBPACK_IMPORTED_MODULE_3__.tabbable)(container, getTabbableOptions());\n    const len = list.length;\n    if (len === 0) return;\n    const active = activeElement(getDocument(container));\n    const index = list.indexOf(active);\n    const nextIndex = index === -1 ? dir === 1 ? 0 : len - 1 : index + dir;\n    return list[nextIndex];\n}\nfunction getNextTabbable(referenceElement) {\n    return getTabbableIn(getDocument(referenceElement).body, 1) || referenceElement;\n}\nfunction getPreviousTabbable(referenceElement) {\n    return getTabbableIn(getDocument(referenceElement).body, -1) || referenceElement;\n}\nfunction isOutsideEvent(event, container) {\n    const containerElement = container || event.currentTarget;\n    const relatedTarget = event.relatedTarget;\n    return !relatedTarget || !contains(containerElement, relatedTarget);\n}\nfunction disableFocusInside(container) {\n    const tabbableElements = (0,tabbable__WEBPACK_IMPORTED_MODULE_3__.tabbable)(container, getTabbableOptions());\n    tabbableElements.forEach((element)=>{\n        element.dataset.tabindex = element.getAttribute(\"tabindex\") || \"\";\n        element.setAttribute(\"tabindex\", \"-1\");\n    });\n}\nfunction enableFocusInside(container) {\n    const elements = container.querySelectorAll(\"[data-tabindex]\");\n    elements.forEach((element)=>{\n        const tabindex = element.dataset.tabindex;\n        delete element.dataset.tabindex;\n        if (tabindex) {\n            element.setAttribute(\"tabindex\", tabindex);\n        } else {\n            element.removeAttribute(\"tabindex\");\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datepicker/node_modules/@floating-ui/react/dist/floating-ui.react.utils.mjs\n");

/***/ })

};
;